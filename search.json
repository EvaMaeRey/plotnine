[
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-using-notebook-widgets.html",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-using-notebook-widgets.html",
    "title": "Using ipyWidgets",
    "section": "",
    "text": "In this notebook, we will use ipyWidgets to make dynamic selections of the data being visualized.\n\nimport matplotlib.pyplot as plt\nfrom plotnine import ggplot, aes\nimport plotnine as p9\nimport pandas as pd\nimport numpy as np\nimport itertools\nfrom copy import copy\nfrom ipywidgets import widgets\nfrom IPython.display import display\n\nfrom plotnine.data import mtcars\n\nFirst of all, install ipywidgets:\npip install ipywidgets\n\n# for jupyter notebooks:\njupyter nbextension enable --py widgetsnbextension\n\n# for jupyter lab (requires npm):\njupyter labextension install @jupyter-widgets/jupyterlab-manager\nLet’s have alook on the plot with all the data. We are comparing cars with their horse-power in the X axis and miles-per-gallon in the Y axis. The points are collored by car weight.\n\n# This has to be used the first time you make a plot. This magic allows the notebook to update plots.\n%matplotlib notebook\n\np = (ggplot(mtcars, aes(x=\"hp\", y=\"mpg\", color=\"wt\"))\n     + p9.geom_point()\n     + p9.theme_linedraw()\n    )\np\n\n\n\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nNow we will get relevant values for the creation of plots with sub-sets of data.\nInitially, select cars based on number of cylinders\n\n# Prepre the list we will use to selec sub-sets of data based on number of cylinders.\ncylList = np.unique( mtcars['cyl'] )\n\n\n# The first selection is a drop-down menu for number of cylinders\ncylSelect = widgets.Dropdown(\n    options=list(cylList),\n    value=cylList[1],\n    description='Cylinders:',\n    disabled=False,\n)\n\n# For the widgets to update the same plot, instead of creating one new image every time\n# a selection changes. We keep track of the matplotlib image and axis, so we create only one\n# figure and set of axis, for the first plot, and then just re-use the figure and axis\n# with plotnine's \"_draw_using_figure\" function.\nfig = None\naxs = None\n\ndef get_current_artists():\n    # Return artists attached to all the matplotlib axes\n    axes = plt.gca()\n    return itertools.chain(axes.lines, axes.collections, axes.artists, axes.patches, axes.texts)\n\n# This is the main function that is called to update the plot every time we chage a selection.\ndef plotUpdate(*args):\n    \n    # Use global variables for matplotlib's figure and axis.\n    global fig, axs\n    \n    # Get current values of the selection widget\n    cylValue = cylSelect.value\n    \n    # Create a temporary dataset that is constrained by the user's selections.\n    tmpDat = mtcars.loc[(mtcars['cyl'] == cylValue),:]\n    \n    # Create plotnine's plot\n    \n    # Using the maximum and minimum values we gatehred before, we can keep the plot axis from\n    # changing with the cyinder selection\n    p = (ggplot(tmpDat, aes(x=\"hp\", y=\"mpg\", color=\"wt\"))\n         + p9.geom_point()\n         + p9.theme_linedraw()\n        )\n    if fig is None:\n        # If this is the first time a plot is made in the notebook, we let plotnine create a new \n        # matplotlib figure and axis.\n        fig = p.draw()\n        axs = fig.axes\n    else:\n        \n        #p = copy(p)\n        # This helps keeping old selected data from being visualized after a new selection is made.\n        # We delete all previously reated artists from the matplotlib axis.\n        for artist in get_current_artists():\n            artist.remove()\n        \n        # If a plot is being updated, we re-use the figure an axis created before.\n        p._draw_using_figure(fig, axs)\n    \n    \ncylSelect.observe(plotUpdate, 'value')\n\n# Display the widgets\ndisplay(cylSelect)\n\n# Plots the first image, with inintial values.\nplotUpdate()\n\n# Matplotlib function to make the image fit within the plot dimensions. \nplt.tight_layout()\n\n# Trick to get the first rendered image to follow the previous \"tight_layout\" command.\n# without this, only after the first update would the figure be fit inside its dimensions.\ncylSelect.value = cylList[0]\n\n\n\n\n\n\n\n\n\n\n/var/folders/hs/99fxk29x1_s57j2rpkmvqqk00000gq/T/ipykernel_38654/1860326823.py:67: UserWarning: The figure layout has changed to tight\n\n\nHaving axis ranges change between selections does not help probing the data.\n\n# We now get the maximum ranges of relevant variables to keep axis constant between images.\n\n# Get range of weight\nminWt = min(mtcars['wt'])\nmaxWt = max(mtcars['wt'])\n# We get all unique values of weigh, sort them, and transform the numpy.array into a python list.\nwtOptions = list( np.sort(np.unique(mtcars.loc[mtcars['cyl']==cylList[0],'wt']))  )\n\nminHP = min(mtcars['hp'])\nmaxHP = max(mtcars['hp'])\n\nminMPG = min(mtcars['mpg'])\nmaxMPG = max(mtcars['mpg'])\n\n\n# The first selection is a drop-down menu for number of cylinders\ncylSelect = widgets.Dropdown(\n    options=list(cylList),\n    value=cylList[1],\n    description='Cylinders:',\n    disabled=False,\n)\n\n# For the widgets to update the same plot, instead of creating one new image every time\n# a selection changes. We keep track of the matplotlib image and axis, so we create only one\n# figure and set of axis, for the first plot, and then just re-use the figure and axis\n# with plotnine's \"_draw_using_figure\" function.\nfig = None\naxs = None\n\n# This is the main function that is called to update the plot every time we chage a selection.\ndef plotUpdate(*args):\n    \n    # Use global variables for matplotlib's figure and axis.\n    global fig, axs\n    \n    # Get current values of the selection widget\n    cylValue = cylSelect.value\n    \n    # Create a temporary dataset that is constrained by the user's selections.\n    tmpDat = mtcars.loc[(mtcars['cyl'] == cylValue),:]\n    \n    # Create plotnine's plot\n    \n    # Using the maximum and minimum values we gatehred before, we can keep the plot axis from\n    # changing with the cyinder selection\n    p = (ggplot(tmpDat, aes(x=\"hp\", y=\"mpg\", color=\"wt\"))\n         + p9.geom_point()\n         + p9.theme_linedraw()\n         + p9.lims(x=[minHP, maxHP], y=[minMPG, maxMPG])\n         + p9.scale_color_continuous(limits=(minWt, maxWt))\n        )\n        \n    if fig is None:\n        fig = p.draw()\n        axs = fig.axes\n    else:\n        #p = copy(p)\n        for artist in get_current_artists():\n            artist.remove()\n        p._draw_using_figure(fig, axs)\n    \n    \ncylSelect.observe(plotUpdate, 'value')\n\n# Display the widgets\ndisplay(cylSelect)\n\n# Plots the first image, with inintial values.\nplotUpdate()\n\n# Matplotlib function to make the image fit within the plot dimensions. \nplt.tight_layout()\n\n# Trick to get the first rendered image to follow the previous \"tight_layout\" command.\n# without this, only after the first update would the figure be fit inside its dimensions.\ncylSelect.value = cylList[0]\n\n\n\n\n\n\n\n\n\n\nNow we can make our selection more complicated by restricting the car data being visualized. Using a range slider we can restric data based on car weight.\n\n# The first selection is a drop-down menu for number of cylinders\ncylSelect = widgets.Dropdown(\n    options=list(cylList),\n    value=cylList[1],\n    description='Cylinders:',\n    disabled=False,\n)\n\n# The second selection is a range of weights\nwtSelect = widgets.SelectionRangeSlider(\n    options=wtOptions,\n    index=(0,len(wtOptions)-1),\n    description='Weight',\n    disabled=False\n)\n\nwidgetsCtl = widgets.HBox([cylSelect, wtSelect])\n\n# The range of weights needs to always be dependent on the cylinder selection.\ndef updateRange(*args):\n    '''Updates the selection range from the slider depending on the cylinder selection.'''\n    cylValue = cylSelect.value\n    \n    wtOptions = list( np.sort(np.unique(mtcars.loc[mtcars['cyl']==cylValue,'wt']))  )\n    \n    wtSelect.options = wtOptions\n    wtSelect.index = (0,len(wtOptions)-1)\n    \ncylSelect.observe(updateRange,'value')\n\n# For the widgets to update the same plot, instead of creating one new image every time\n# a selection changes. We keep track of the matplotlib image and axis, so we create only one\n# figure and set of axis, for the first plot, and then just re-use the figure and axis\n# with plotnine's \"_draw_using_figure\" function.\nfig = None\naxs = None\n\n# This is the main function that is called to update the plot every time we chage a selection.\ndef plotUpdate(*args):\n    \n    # Use global variables for matplotlib's figure and axis.\n    global fig, axs\n    \n    # Get current values of the selection widgets\n    cylValue = cylSelect.value\n    wrRange = wtSelect.value\n    \n    # Create a temporary dataset that is constrained by the user's selections.\n    tmpDat = mtcars.loc[(mtcars['cyl'] == cylValue) & \\\n                        (mtcars['wt'] &gt;= wrRange[0]) & \\\n                        (mtcars['wt'] &lt;= wrRange[1]),:]\n    \n    # Create plotnine's plot\n    \n    p = (ggplot(tmpDat, aes(x=\"hp\", y=\"mpg\", color=\"wt\"))\n         + p9.geom_point()\n         + p9.theme_linedraw()\n         + p9.lims(x=[minHP, maxHP], y=[minMPG, maxMPG])\n         + p9.scale_color_continuous(limits=(minWt, maxWt))\n        )\n        \n    if fig is None:\n        fig = p.draw()\n        axs = fig.axes\n    else:\n        for artist in get_current_artists():\n            artist.remove()\n        p._draw_using_figure(fig, axs)\n    \n    \ncylSelect.observe(plotUpdate, 'value')\nwtSelect.observe(plotUpdate, 'value')\n\n# Display the widgets\ndisplay(widgetsCtl)\n\n# Plots the first image, with inintial values.\nplotUpdate()\n\n# Matplotlib function to make the image fit within the plot dimensions. \nplt.tight_layout()\n\n# Trick to get the first rendered image to follow the previous \"tight_layout\" command.\n# without this, only after the first update would the figure be fit inside its dimensions.\ncylSelect.value = cylList[0]\n\n\n\n\n\n\n\n\n\n\nFinally, we can change some plot properties to make the final figure more understandable.\n\n# The first selection is a drop-down menu for number of cylinders\ncylSelect = widgets.Dropdown(\n    options=list(cylList),\n    value=cylList[1],\n    description='Cylinders:',\n    disabled=False,\n)\n\n# The second selection is a range of weights\nwtSelect = widgets.SelectionRangeSlider(\n    options=wtOptions,\n    index=(0,len(wtOptions)-1),\n    description='Weight',\n    disabled=False\n)\n\nwidgetsCtl = widgets.HBox([cylSelect, wtSelect])\n\n# The range of weights needs to always be dependent on the cylinder selection.\ndef updateRange(*args):\n    '''Updates the selection range from the slider depending on the cylinder selection.'''\n    cylValue = cylSelect.value\n    \n    wtOptions = list( np.sort(np.unique(mtcars.loc[mtcars['cyl']==cylValue,'wt']))  )\n    \n    wtSelect.options = wtOptions\n    wtSelect.index = (0,len(wtOptions)-1)\n    \ncylSelect.observe(updateRange,'value')\n\nfig = None\naxs = None\n\n# This is the main function that is called to update the plot every time we chage a selection.\ndef plotUpdate(*args):\n    \n    # Use global variables for matplotlib's figure and axis.\n    global fig, axs\n    \n    # Get current values of the selection widgets\n    cylValue = cylSelect.value\n    wrRange = wtSelect.value\n    \n    # Create a temporary dataset that is constrained by the user's selections of\n    # number of cylinders and weight.\n    tmpDat = mtcars.loc[(mtcars['cyl'] == cylValue) & \\\n                        (mtcars['wt'] &gt;= wrRange[0]) & \\\n                        (mtcars['wt'] &lt;= wrRange[1]),:]\n    \n    # Create plotnine's plot showing all data ins smaller grey points, and \n    # the selected data with coloured points.\n    p = (ggplot(tmpDat, aes(x=\"hp\", y=\"mpg\", color=\"wt\") )\n         + p9.geom_point(mtcars, color=\"grey\")\n         + p9.geom_point(size=3)\n         + p9.theme_linedraw()\n         + p9.xlim([minHP, maxHP])\n         + p9.ylim([minMPG, maxMPG])\n         + p9.scale_color_continuous(name=\"spring\",limits=(np.floor(minWt), np.ceil(maxWt)))\n         + p9.labs(x = \"Horse-Power\", y=\"Miles Per Gallon\", color=\"Weight\" )\n        )\n        \n    if fig is None:\n        fig = p.draw()\n        axs = fig.axes\n    else:\n        for artist in get_current_artists():\n            artist.remove()\n        p._draw_using_figure(fig, axs)\n    \n    \ncylSelect.observe(plotUpdate, 'value')\nwtSelect.observe(plotUpdate, 'value')\n\n# Display the widgets\ndisplay(widgetsCtl)\n\n# Plots the first image, with inintial values.\nplotUpdate()\n\n# Matplotlib function to make the image fit within the plot dimensions. \nplt.tight_layout()\n\n# Trick to get the first rendered image to follow the previous \"tight_layout\" command.\n# without this, only after the first update would the figure be fit inside its dimensions.\ncylSelect.value = cylList[0]"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-show-counts-on-a-stacked-bar-plot.html",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-show-counts-on-a-stacked-bar-plot.html",
    "title": "Show counts on a stacked bar plot",
    "section": "",
    "text": "from plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    geom_bar,\n    geom_text\n)\nfrom plotnine.data import mtcars\n\nA stacked bar plot.\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(am)'))\n + geom_bar( position='fill')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe want to know how many items are in each of the bars, so we add a geom_text with the same stat as geom_bar and map the label aesthetic to the computed count.\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(am)'))\n + geom_bar(position='fill')\n + geom_text(aes(label=after_stat('count')), stat='count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nNot what we wanted.\nWe forgot to give geom_text the same position as geom_bar. Let us fix that.\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(am)'))\n + geom_bar( position='fill')\n + geom_text(aes(label=after_stat('count')), stat='count', position='fill')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat is more like it"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-order-plot-series.html",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-order-plot-series.html",
    "title": "Custom sorting of plot series",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom pandas.api.types import CategoricalDtype\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_bar,\n    coord_flip,\n    labs,\n    scale_x_discrete\n)\nfrom plotnine.data import mpg"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-order-plot-series.html#bar-plot-of-manufacturer---default-output",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-order-plot-series.html#bar-plot-of-manufacturer---default-output",
    "title": "Custom sorting of plot series",
    "section": "Bar plot of manufacturer - Default Output",
    "text": "Bar plot of manufacturer - Default Output\n\n(ggplot(mpg)\n + aes(x='manufacturer') \n + geom_bar(size=20)\n + coord_flip()\n + labs(y='Count', x='Manufacturer', title='Number of Cars by Make')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-order-plot-series.html#bar-plot-of-manufacturer---ordered-by-count-categorical",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-order-plot-series.html#bar-plot-of-manufacturer---ordered-by-count-categorical",
    "title": "Custom sorting of plot series",
    "section": "Bar plot of manufacturer - Ordered by count (Categorical)",
    "text": "Bar plot of manufacturer - Ordered by count (Categorical)\nBy default the discrete values along axis are ordered alphabetically. If we want a specific ordering we use a pandas.Categorical variable with categories ordered to our preference.\n\n# Determine order and create a categorical type\n# Note that value_counts() is already sorted\nmanufacturer_list = mpg['manufacturer'].value_counts().index.tolist()\nmanufacturer_cat = pd.Categorical(mpg['manufacturer'], categories=manufacturer_list)\n\n# assign to a new column in the DataFrame\nmpg = mpg.assign(manufacturer_cat = manufacturer_cat)\n\n(ggplot(mpg)\n + aes(x='manufacturer_cat')\n + geom_bar(size=20)\n + coord_flip()\n + labs(y='Count', x='Manufacturer', title='Number of Cars by Make')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe could also modify the existing manufacturer category to set it as ordered instead of having to create a new CategoricalDtype and apply that to the data.\n\nmpg = mpg.assign(manufacturer_cat = \n  mpg['manufacturer'].cat.reorder_categories(manufacturer_list))"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-order-plot-series.html#bar-plot-of-manufacturer---ordered-by-count-limits",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-order-plot-series.html#bar-plot-of-manufacturer---ordered-by-count-limits",
    "title": "Custom sorting of plot series",
    "section": "Bar plot of manufacturer - Ordered by count (limits)",
    "text": "Bar plot of manufacturer - Ordered by count (limits)\nAnother method to quickly reorder a discrete axis without changing the data is to change it’s limits\n\n# Determine order and create a categorical type\n# Note that value_counts() is already sorted\nmanufacturer_list = mpg['manufacturer'].value_counts().index.tolist()\n\n(ggplot(mpg)\n + aes(x='manufacturer_cat')\n + geom_bar(size=20)\n + scale_x_discrete(limits=manufacturer_list)\n + coord_flip()\n + labs(y='Count', x='Manufacturer', title='Number of Cars by Make')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can ‘flip’ an axis (independent of limits) by reversing the order of the limits.\n\n# Determine order and create a categorical type\n# Note that value_counts() is already sorted\nmanufacturer_list = mpg['manufacturer'].value_counts().index.tolist()[::-1]\n\n(ggplot(mpg)\n + aes(x='manufacturer_cat')\n + geom_bar(size=20)\n + scale_x_discrete(limits=manufacturer_list)\n + coord_flip()\n + labs(y='Count', x='Manufacturer', title='Number of Cars by Make')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nFurther Reading\n\nPandas documentation of how to use categorical data in practice\nPandas API Reference for categorical\nPandas documentation of pd.Categorical"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-automatic-grouping-insufficient.html",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-automatic-grouping-insufficient.html",
    "title": "When the automatic groups are not sufficient",
    "section": "",
    "text": "import pandas as pd\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_col,\n    geom_line,\n    labs,\n    scale_color_hue\n)\n\nSome data to plot\n\ndf = pd.DataFrame({\n    'letter': ['Alpha', 'Beta', 'Delta', 'Gamma'],\n    'pos': [1, 2, 3, 4],\n    'num_of_letters': [5, 4, 5, 5]\n})\n\ndf\n\n\n\n\n\n\n\n\nletter\npos\nnum_of_letters\n\n\n\n\n0\nAlpha\n1\n5\n\n\n1\nBeta\n2\n4\n\n\n2\nDelta\n3\n5\n\n\n3\nGamma\n4\n5\n\n\n\n\n\n\n\n\n(ggplot(df)\n + geom_col(aes(x='letter', y='pos'))\n + geom_line(aes(x='letter', y='num_of_letters'))\n + labs(title='Greek Letter Analysis')\n)\n\n/Users/hassan/scm/python/plotnine/plotnine/geoms/geom_path.py:111: PlotnineWarning: geom_path: Each group consist of only one observation. Do you need to adjust the group aesthetic?\n\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe get a plot with a warning and no line(s). This is not what we expected.\nThe issue is we have 4 groups (Alpha, Beta, …) and each of those groups has a single point. This is a case where the automatic grouping is not sufficient (or just not what you expect). The solution is to manually set the group for geom_line so that all points belong to one group.\n\n(ggplot(df)\n + geom_col(aes(x='letter', y='pos'))\n + geom_line(aes(x='letter', y='num_of_letters'), group=1)\n + labs(title='Greek Letter Analysis')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat looks like it.\nTo understand why the behaviour behind the warning is not wrong, let us try a dataframe with 2 points per group.\n\ndf2 = pd.DataFrame({\n    'letter': ['Alpha', 'Beta', 'Delta', 'Gamma'] * 2,\n    'pos': [1, 2, 3, 4] * 2,\n    'num_of_letters': [5, 4, 5, 5] * 2\n})\n\ndf2.loc[4:, 'num_of_letters'] += 0.8\n\n(ggplot(df2)\n + geom_col(aes(x='letter', y='pos'))\n + geom_line(aes(x='letter', y='num_of_letters'))\n + labs(title='Greek Letter Analysis')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe get no warning and we get lines.\nWe can add some color to such a plot.\n\n(ggplot(df2)\n + geom_col(aes(x='letter',y='pos', fill='letter'))\n + geom_line(aes(x='letter', y='num_of_letters', color='letter'), size=1)\n + scale_color_hue(l=0.45)                                  # some contrast to make the lines stick out\n + labs(title='Greek Letter Analysis')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nCredit: github user @datavistics (derek) whose encounter with this issue motivated this example."
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-a-pyqt5-application.html",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-a-pyqt5-application.html",
    "title": "A PyQt5 Application",
    "section": "",
    "text": "import sys\nimport random\n\nfrom plotnine import ggplot, geom_point, aes, geom_line, theme\nimport pandas as pd\nimport numpy as np\n\nfrom PyQt5.QtWidgets import QApplication, QPushButton, QDialog, QVBoxLayout\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas\nfrom matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar\nfrom matplotlib.figure import Figure\nThis example applicate creates a gui windows with a canvas and a plot button which when pressed draws out a plot from random data.\ndpi = 72\nsize_inches = (11, 8)                                       # size in inches (for the plot)\nsize_px = int(size_inches[0]*dpi), int(size_inches[1]*dpi)  # For the canvas\n\nclass Window(QDialog):\n    def __init__(self, parent=None):\n        super(Window, self).__init__(parent)\n\n        self.figure = Figure()\n        self.canvas = FigureCanvas(self.figure)\n        self.toolbar = NavigationToolbar(self.canvas, self)\n\n        self.button = QPushButton('Plot')\n        self.button.clicked.connect(self.plot)\n        \n        self.canvas.setMinimumSize(*size_px)\n\n        layout = QVBoxLayout()\n        layout.addWidget(self.toolbar)\n        layout.addWidget(self.canvas)\n        layout.addWidget(self.button)\n        self.setLayout(layout)\n\n    def plot(self):\n        # generate some 'data' to plot\n        n = 100\n        x = np.linspace(0, 2 * np.pi, n)\n        df = pd.DataFrame({\n            'x': x,\n            'y1': np.random.rand(n),\n            'y2': np.sin(x),\n            'y3': np.cos(x) * np.sin(x)\n        })\n\n        # change the dependent variable and color each time this method is called\n        y = random.choice(['y1', 'y2', 'y3'])\n        color = random.choice(['blue', 'red', 'green'])\n\n        # specify the plot and get the figure object\n        ff = (ggplot(df, aes('x', y))\n              + geom_point(color=color)\n              + geom_line()\n              + theme(\n                  figure_size=size_inches,\n                  dpi=dpi\n              )\n             )\n        fig = ff.draw()\n\n        # update to the new figure\n        self.canvas.figure = fig\n\n        # refresh canvas\n        self.canvas.draw()\n\n        # close the figure so that we don't create too many figure instances\n        plt.close(fig)\n\n\n# To prevent random crashes when rerunning the code,\n# first check if there is instance of the app before creating another.\napp = QApplication.instance()\nif app is None:\n    app = QApplication(sys.argv)\n\nmain = Window()\nmain.show()\napp.exec_()\n\n0"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-a-pyqt5-application.html#the-application",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-a-pyqt5-application.html#the-application",
    "title": "A PyQt5 Application",
    "section": "The Application",
    "text": "The Application\n\n\n\nPyQT5 Application\n\n\nCredit: Brad Reisfeld (@breisfeld) for putting this workflow together."
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/stage.html",
    "href": "plotnine-examples/plotnine_examples/examples/stage.html",
    "title": "stage",
    "section": "",
    "text": "%load_ext autoreload\n%autoreload 2\n%aimport plotnine\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    stage,\n    geom_bar,\n    geom_text,\n    geom_bin_2d,\n    stat_bin_2d,\n)\ndf = pd.DataFrame({\n    'var1': list('abbcccddddeeeee'),\n    'cat': list('RSRSRSRRRSRSSRS')\n})\n\n(ggplot(df, aes('var1'))\n + geom_bar()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\nAdd the corresponding count on top of each bar.\n(ggplot(df, aes('var1'))\n + geom_bar()\n + geom_text(aes(label=after_stat('count')), stat='count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\nAdjust the y position so that the counts do not overlap the bars.\n(ggplot(df, aes('var1'))\n + geom_bar()\n + geom_text(aes(label=after_stat('count'), y=stage(after_stat='count', after_scale='y+.1')), stat='count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\nNote that this will work even nicely for stacked bars where adjustig the position with nudge_y=0.1 would not.\n(ggplot(df, aes('var1', fill='cat'))\n + geom_bar()\n + geom_text(aes(label=after_stat('count'), y=stage(after_stat='count', after_scale='y+.1')), stat='count', position='stack')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/stage.html#create-a-binned-2d-plot-with-counts",
    "href": "plotnine-examples/plotnine_examples/examples/stage.html#create-a-binned-2d-plot-with-counts",
    "title": "stage",
    "section": "Create a binned 2d plot with counts",
    "text": "Create a binned 2d plot with counts\n\nnp.random.seed(123)\ndf = pd.DataFrame({\n    'col_1': np.random.rand(1000),\n    'col_2': np.random.rand(1000)\n})\n\n\n(ggplot(df, aes(x='col_1', y='col_2'))\n + geom_bin_2d(position='identity', binwidth=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd counts to the bins. stat_bin_2d bins are specified using retangular minimum and maximum end-points for dimension; we use these values to compute the mid-points at which to place the counts.\nFirst x and y aesthetics are mapped to col_1 and col_2 variables, then after the statistic consumes them and creates xmin, xmax, ymin & ymax values for each bin along with associated count. After the statistic computation the x and y aesthetics do not exist, but we create meaningful values using the minimum and maximum end-points.\nNote that the binning parameters for the geom and stat combination must be the same. In this case it is the binwidth.\n\n(ggplot(df, aes(x='col_1', y='col_2'))\n + geom_bin_2d(position='identity', binwidth=0.1)\n + stat_bin_2d(\n     aes(\n         x=stage(start='col_1', after_stat='(xmin+xmax)/2'),\n         y=stage(start='col_2', after_stat='(ymin+ymax)/2'),\n         label=after_stat('count')\n     ),\n     binwidth=0.1,\n     geom='text',\n     format_string='{:.0f}',\n     size=10\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_vline.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_vline.html",
    "title": "Vertical line",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_vline,\n    facet_grid,\n    labs,\n)\nfrom plotnine.data import mpg\n\ngeom_vline() draws a vertical line, and is useful as a guide.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nIt’s useful to use geom_vline() with some data, so we start with a basic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd a vertical line to the scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=5) # add one vertical line\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add many vertical lines:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=[4,5,7]) # add many vertical lines using a list\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=[4,5,7],\n                 colour=['red','orange','green'],     # add colour\n                 size=[1,2,3],                          # set line thickness\n                 linetype='dotted'                      # set line type\n                ) \n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd vertical lines to a facet plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=5) # add a vertical line...\n    + facet_grid('drv ~ .')      # ... to a facet plot\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_tile.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_tile.html",
    "title": "Periodic Table of Elements",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_tile,\n    geom_text,\n    scale_y_reverse,\n    scale_y_discrete,\n    scale_fill_brewer,\n    scale_color_manual,\n    coord_equal,\n    theme,\n    theme_void,\n    element_blank,\n    element_rect,\n    element_text,\n)\n\nGraphing of highly organised tabular information\nRead the data.\n\nelements = pd.read_csv('data/elements.csv')\nelements.head()\n\n\n\n\n\n\n\n\natomic number\nsymbol\nname\natomic mass\nCPK\nelectronic configuration\nelectronegativity\natomic radius\nion radius\nvan der Waals radius\n...\nEA\nstandard state\nbonding type\nmelting point\nboiling point\ndensity\nmetal\nyear discovered\ngroup\nperiod\n\n\n\n\n0\n1\nH\nHydrogen\n1.00794\n#FFFFFF\n1s1\n2.20\n37.0\nNaN\n120.0\n...\n-73.0\ngas\ndiatomic\n14.0\n20.0\n0.00009\nnonmetal\n1766\n1\n1\n\n\n1\n2\nHe\nHelium\n4.002602\n#D9FFFF\n1s2\nNaN\n32.0\nNaN\n140.0\n...\n0.0\ngas\natomic\nNaN\n4.0\n0.00000\nnoble gas\n1868\n18\n1\n\n\n2\n3\nLi\nLithium\n6.941\n#CC80FF\n[He] 2s1\n0.98\n134.0\n76 (+1)\n182.0\n...\n-60.0\nsolid\nmetallic\n454.0\n1615.0\n0.54000\nalkali metal\n1817\n1\n2\n\n\n3\n4\nBe\nBeryllium\n9.012182\n#C2FF00\n[He] 2s2\n1.57\n90.0\n45 (+2)\nNaN\n...\n0.0\nsolid\nmetallic\n1560.0\n2743.0\n1.85000\nalkaline earth metal\n1798\n2\n2\n\n\n4\n5\nB\nBoron\n10.811\n#FFB5B5\n[He] 2s2 2p1\n2.04\n82.0\n27 (+3)\nNaN\n...\n-27.0\nsolid\ncovalent network\n2348.0\n4273.0\n2.46000\nmetalloid\n1807\n13\n2\n\n\n\n\n5 rows × 21 columns\n\n\n\nAlter the data types of the information that will be plotted. This makes it convenient to work with.\n\nelements['group'] = [-1 if g == '-' else int(g) for g in elements.group]\nelements['bonding type'] = elements['bonding type'].astype('category')\nelements['metal'] = elements['metal'].astype('category')\nelements['atomic_number'] = elements['atomic number'].astype(str)\n\nThe periodic table has two tables, a top and bottom. The elements in the top have groups, and those in the bottom have no groups. We make separate dataframes for both – they have different alignments.\n\ntop = elements.query('group != -1').copy()\nbottom = elements.query('group == -1').copy()\n\nThe top table is nice and well behaving. The x location of the elements indicate the group and the y locations the period.\n\ntop['x'] = top.group\ntop['y'] = top.period\n\nThe bottom table has 2 rows, with the atomic number increasing to the right. We create an x based on the atomic number and add a horizontal shift. As the dataframe is ordered by atomic number, the operation is easier. The bottom elements are labelled with a “period”. We add a vertical shift to give us a good y location that gives the appearance of two tables.\n\nnrows = 2\nhshift = 3.5\nvshift = 3\nbottom['x'] = np.tile(np.arange(len(bottom)//nrows), nrows) + hshift\nbottom['y'] = bottom.period + vshift\n\nWe will be plotting using tiles and we want to have some space between the tiles. We have set the x and y locations above to take up a unit of space. To get a good effect, the tile dimensions should be less than 1.\n\ntile_width = 0.95\ntile_height = 0.95\n\nFirst peak\n\n(ggplot(aes('x', 'y'))\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe table upside down. We could have been more careful when creating the y locations since the periods are drawn in descending order. But, we can fix that with a reverse scale.\n\n(ggplot(aes('x', 'y'))\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + scale_y_reverse() # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nLet us apply some color to it.\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')  # new\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + scale_y_reverse()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nNow for some trick\nGoal: To add text to the tiles\nThere are four pieces of text that we shall add to the tiles, that is 4 geom_text additions. As we have two tables, that comes to 8 geom_text additions. When any geom is added to a ggplot object, behind the scenes a layer is created and added. We can create a group of layers that can be added to a ggplot object in one go using a list.\nWe use a function that accepts a dataframe, and returns a list of geoms.\n\ndef inner_text(data):\n    layers = [geom_text(data, aes(label='atomic_number'), nudge_x=-0.40, nudge_y=0.40,\n                        ha='left', va='top', fontweight='normal', size=6),\n              geom_text(data, aes(label='symbol'), nudge_y=.1, size=9),\n              geom_text(data, aes(label='name'), nudge_y=-0.125, fontweight='normal', size=4.5),\n              geom_text(data, aes(label='atomic mass'), nudge_y=-.3, fontweight='normal', size=4.5)]\n    return layers\n\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)    # new\n + inner_text(bottom) # new\n + scale_y_reverse()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nIt is crowded in there and the tiles do not have equal dimentions. Use the theme create a larger figure. coord_equal give us equal units along the axes, this makes the tiles square.\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + scale_y_reverse()\n + coord_equal(expand=False)   # new\n + theme(figure_size=(12, 6))  # new\n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nIt is has all the information we want, except one for complication. Elements Lu and Lr also belong in the bottom table. One way to show this duality is to have tiles with two colors split horizontally.\nThe colors are determined by the metal field, and we know the x and y locations. We create a dataframe with this information to create a half-tile. A half-tile is centered at the quarter mark.\n\nsplit_df = pd.DataFrame({\n    'x': 3-tile_width/4,\n    'y': [6, 7],\n    'metal': pd.Categorical(['lanthanoid', 'actinoid'])\n})\n\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(split_df, aes(width=tile_width/2, height=tile_height))  # new\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + scale_y_reverse()\n + coord_equal(expand=False)\n + theme(figure_size=(12, 6))\n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nChange the fill color for a different look and use a theme that clears out all the clutter.\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(split_df, aes(width=tile_width/2, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + scale_y_reverse()\n + scale_fill_brewer(type='qual', palette=3)         # new\n + coord_equal(expand=False)\n + theme_void()                                      # new\n + theme(figure_size=(12, 6),\n         plot_background=element_rect(fill='white')) # new\n        \n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nAdd the group number along the top most row of each column, and period number along the left side of the top table.\nFor the period number, we set the breaks on the y scale.\n\n# The location of the group number is the top most (and therefore smallest period)\n# element with the group\ngroupdf = top.groupby(\n    'group'\n).agg(\n    y=('period', np.min)\n).reset_index()\n\nFinally,\n\n# Gallery Plot\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(split_df, aes(width=tile_width/2, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + geom_text(groupdf, aes('group', 'y', label='group'), color='gray', nudge_y=.525,\n             va='bottom',fontweight='normal', size=9, inherit_aes=False)    # new\n + scale_y_reverse(breaks=range(1, 8), limits=(0, 10.5))                    # modified\n + scale_fill_brewer(type='qual', palette=3) \n + coord_equal(expand=False)\n + theme_void()\n + theme(figure_size=(12, 6),\n         plot_background=element_rect(fill='white'),\n         axis_text_y=element_text(margin={'r': 5}, color='gray', size=9)    # new\n         )\n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nWhat we could have done different:\n\nAfter we set the x and y positions in th the top and bottom dataframes, we could have concatenated them back together. Then, that Layers trick would not save us much.\n\nPro tip: Save the plot as a pdf.\n\n\nAnnotated Heatmap\nConditinous data recorded at discrete time intervals over many cycles\nRead data\n\nflights = pd.read_csv('data/flights.csv')\nmonths = flights['month'].unique()  # Months ordered January, ..., December\nflights['month'] = pd.Categorical(flights['month'], categories=months)\nflights.head()\n\n\n\n\n\n\n\n\nyear\nmonth\npassengers\n\n\n\n\n0\n1949\nJanuary\n112\n\n\n1\n1949\nFebruary\n118\n\n\n2\n1949\nMarch\n132\n\n\n3\n1949\nApril\n129\n\n\n4\n1949\nMay\n121\n\n\n\n\n\n\n\n\n# We use 'factor(year)' -- a discrete -- instead of 'year' so that all the years\n# are displayed along the x-axis.\n# The .95s create spacing between the tiles.\n\n(ggplot(flights, aes('factor(year)', 'month', fill='passengers'))\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers'), size=9)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat looks like what we want, but it could do with a few tweaks. First the contrast between the tiles and the text is not good for the lower passenger numbers. We use pd.cut to partition the number of passengers into two discrete groups.\n\nflights['p_group'] = pd.cut(flights['passengers'], (0, 300, 1000), labels=(\"low\", 'high'))\nflights.head()\n\n\n\n\n\n\n\n\nyear\nmonth\npassengers\np_group\n\n\n\n\n0\n1949\nJanuary\n112\nlow\n\n\n1\n1949\nFebruary\n118\nlow\n\n\n2\n1949\nMarch\n132\nlow\n\n\n3\n1949\nApril\n129\nlow\n\n\n4\n1949\nMay\n121\nlow\n\n\n\n\n\n\n\n\n(ggplot(flights, aes('factor(year)', 'month', fill='passengers'))\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers', color='p_group'), size=9, show_legend=False)  # modified\n + scale_color_manual(['white', 'black']) # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nLast tweaks, put January at the top and remove the axis ticks and plot background.\n\n# Gallery Plot\n\n(ggplot(flights, aes('factor(year)', 'month', fill='passengers'))\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers', color='p_group'), size=9, show_legend=False)\n + scale_color_manual(['white', 'black']) # new\n + scale_y_discrete(limits=months[::-1])          # new\n + theme(                                         # new\n     axis_ticks=element_blank(),\n     panel_background=element_rect(fill='white')\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can get similar results if you replace\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers', color='p_group'), size=9, show_legend=False)\nwith\n+ geom_label(aes(label='passengers', color='p_group'), size=9, show_legend=False)\nCredit: This example is a recreation of this seaborn example."
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_smooth.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_smooth.html",
    "title": "Smoothed conditional means",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_smooth,\n    labs\n)\nfrom plotnine.data import mpg\n\nAids the eye in seeing patterns in the presence of overplotting.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nUse span to control the “wiggliness” of the default loess smoother. The span is the fraction of points used to fit each local regression: small numbers make a wigglier curve, larger numbers make a smoother curve.\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth(span=.3)\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can remove confidence interval around smooth with se=False:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth(span=.3, se=False)\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nInstead of a loess smooth, you can use any other modelling function:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth(method='lm')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n# Gallery Plot\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy', color='factor(drv)')) \n    + geom_point()\n    + geom_smooth(method='lm')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_point.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_point.html",
    "title": "Plotnine",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    scale_color_gradient\n)\nfrom plotnine.data import mpg\n\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nBasic scatter plot\n\np = ggplot(aes(x='displ', y='cty'), mpg)\np + geom_point()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAesthetic mappings\n\np + geom_point(aes(color='factor(cyl)'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\np + geom_point(aes(shape='factor(cyl)'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\np + geom_point(aes(color='hwy'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nModify the color scale\n\np + geom_point(aes(color='hwy')) + scale_color_gradient(low='blue', high='red')\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\np + geom_point(aes(size='hwy'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_map.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_map.html",
    "title": "The Political Territories of Westeros",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gp\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_map,\n    geom_text,\n    labs,\n    scale_fill_brewer,\n    scale_x_continuous,\n    scale_y_continuous,\n    scale_size_continuous,\n    coord_cartesian,\n    element_rect,\n    theme_void,\n    theme\n)\n\nLayering different features on a Map\nRead data and select features in Westeros only.\n\ncontinents = gp.read_file('data/lands-of-ice-and-fire/continents.shp')\nislands = gp.read_file('data/lands-of-ice-and-fire/islands.shp')\nlakes = gp.read_file('data/lands-of-ice-and-fire/lakes.shp')\nrivers = gp.read_file('data/lands-of-ice-and-fire/rivers.shp')\npolitical = gp.read_file('data/lands-of-ice-and-fire/political.shp')\nwall = gp.read_file('data/lands-of-ice-and-fire/wall.shp')\nroads = gp.read_file('data/lands-of-ice-and-fire/roads.shp')\nlocations = gp.read_file('data/lands-of-ice-and-fire/locations.shp')\n\nwesteros = continents.query('name==\"Westeros\"')\nislands = islands.query('continent==\"Westeros\" and name!=\"Summer Islands\"')\nlakes = lakes.query('continent==\"Westeros\"')\nrivers = rivers.query('continent==\"Westeros\"')\nroads = roads.query('continent==\"Westeros\"')\n\nwg = westeros.geometry[0]\nbool_idx = [wg.contains(g) for g in locations.geometry]\nwesteros_locations = locations[bool_idx]\ncities = westeros_locations[westeros_locations['type'] == 'City'].copy()\n\nCreate map by placing the features in layers in an order that limits obstraction.\nThe GeoDataFrame.geometry.centroid property has the center coordinates of polygons, we use these to place the labels of the political regions.\n\n# colors\nwater_color = '#a3ccff'\nwall_color = 'white'\nroad_color = 'brown'\n\n# Create label text by merging the territory name and\n# the claimant to the territory\ndef fmt_labels(names, claimants):\n    labels = []\n    for name, claimant in zip(names, claimants):\n        if name:\n            labels.append('{} ({})'.format(name, claimant))\n        else:\n            labels.append('({})'.format(claimant))\n    return labels\n\n\ndef calculate_center(df):\n    \"\"\"\n    Calculate the centre of a geometry\n    \n    This method first converts to a planar crs, gets the centroid\n    then converts back to the original crs. This gives a more\n    accurate\n    \"\"\"\n    original_crs = df.crs\n    planar_crs = 'EPSG:3857'\n    return df['geometry'].to_crs(planar_crs).centroid.to_crs(original_crs)\n\n\npolitical['center'] = calculate_center(political)\ncities['center'] = calculate_center(cities)\n\n# Gallery Plot\n\n(ggplot()\n + geom_map(westeros, fill=None)\n + geom_map(islands, fill=None)\n + geom_map(political, aes(fill='ClaimedBy'), color=None, show_legend=False)\n + geom_map(wall, color=wall_color, size=2)\n + geom_map(lakes, fill=water_color, color=None)\n + geom_map(rivers, aes(size='size'), color=water_color, show_legend=False)\n + geom_map(roads, aes(size='size'), color=road_color, alpha=0.5, show_legend=False)\n + geom_map(cities, size=1)\n + geom_text(\n     political,\n     aes('center.x', 'center.y', label='fmt_labels(name, ClaimedBy)'),\n     size=8,\n     fontweight='bold'\n )\n + geom_text(\n     cities,\n     aes('center.x', 'center.y', label='name'),\n     size=8,\n     ha='left',\n     nudge_x=.20\n )\n + labs(title=\"The Political Territories of Westeros\")\n + scale_fill_brewer(type='qual', palette=8)\n + scale_x_continuous(expand=(0, 0, 0, 1))\n + scale_y_continuous(expand=(0, 1, 0, 0))\n + scale_size_continuous(range=(0.4, 1))\n + coord_cartesian()\n + theme_void()\n + theme(figure_size=(8, 12), panel_background=element_rect(fill=water_color))\n)\n\n\n\n\n&lt;Figure Size: (800 x 1200)&gt;\n\n\nCredit: cadaei of the cartographersguild website forum."
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_hline.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_hline.html",
    "title": "Horizontal line",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_hline,\n    facet_grid,\n    labs\n)\nfrom plotnine.data import mpg\n\ngeom_hline() draws a vertical line, and is useful as a guide.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nIt’s useful to use geom_hline() with some data, so we start with a basic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nNow add a horizontal line to the scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = 25) # add one horizonal line\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add many horizontal lines:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = [25,35,45]) # add many horizontal lines using a list\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can change the look of the line:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = 25,\n                  color='yellow',    # set line colour\n                  size=2,            # set line thickness\n                  linetype=\"dashed\"  # set line type\n                 )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAnd you can add horizontal lines to a facet plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = 25) # add a vertical line...\n    + facet_grid('drv ~ .')      # ... to a facet plot\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_density.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_density.html",
    "title": "Density Plot",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    geom_density,\n    geom_histogram,\n    geom_vline,\n    geom_rect,\n    labs,\n    annotate,\n    theme_tufte\n)\nfrom plotnine.data import mpg\n\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nThe defaults are not exactly beautiful, but still quite clear.\n\n(ggplot(mpg, aes(x='cty'))\n + geom_density()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nPlotting multiple groups is straightforward, but as each group is plotted as an independent PDF summing to 1, the relative size of each group will be normalized.\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(alpha=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo plot multiple groups and scale them by their relative size, you can map the y aesthetic to 'count' (calculated by stat_density).\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(aes(y=after_stat('count')), alpha=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nDensity Plot + Histogram\nTo overlay a histogram onto the density, the y aesthetic of the density should be mapped to the 'count' scaled by the binwidth of the histograms.\nWhy?\nThe count calculated by stat_density is \\(count = density * n\\) where n is the number of points . The density curves have an area of 1 and have no information about the absolute frequency of the values along curve; only the relative frequencies. The count curve reveals the absolute frequencies. The scale of this count corresponds to the count calculated by the stat_bin for the histogram when the bins are 1 unit wide i.e. binwidth=1. The count * binwidth curve matches the scale of counts for the histogram for a give binwidth.\n\nbinwidth = 2  # The same for geom_density and geom_histogram\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(aes(y=after_stat('count*binwidth')), alpha=0.1)\n + geom_histogram(aes(fill='drv', y=after_stat('count')), binwidth=binwidth, color='none', alpha=0.5)\n \n # It is the histogram that gives us the meaningful y axis label\n # i.e. 'count' and not 'count*2'\n + labs(y='count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\nShading a Region under a Density Curve\nExtending geom_density to create an effect of a shaded region\nCreate some data and plot the density\n\nn = 101\ndf = pd.DataFrame({'x': np.arange(n)})\n\n(ggplot(df, aes('x'))\n + geom_density()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nSuppose we want to mark a region as special e.g. (40, 60), we can use vertical lines to annotate it.\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + annotate(geom_vline, xintercept=region)  #new line\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo make it standout more we can highlight. To do that, the first thought is to use a rectangle.\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + annotate(geom_rect, xmin=region[0], xmax=region[1], ymin=0, ymax=float('inf'), alpha=0.5) # new line\n + annotate(geom_vline, xintercept=region)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nSince y upper-bound varies along the curve, a rectangular highlight has to stretch up to the top of the panel.\nTo hightlight only within the density curve, we have to use a second density curve. We need to calculate the density as normal, but just before the curve & region are plotted, we should keep only the region we want.\nWe create our own geom_density_highlight and override the setup_data method. First, we override but do nothing, we only inspect the data to see what we have to work with.\n\n# new class\nclass geom_density_highlight(geom_density):\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        print(data)\n        return data\n\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + geom_density_highlight(fill='black', alpha=0.5)  # new line\n + annotate(geom_vline, xintercept=region)\n)\n\n      PANEL     count   density  group    n    scaled           x         y   \n0         1  0.519038  0.005139     -1  101  0.519039    0.000000  0.005139  \\\n1         1  0.522757  0.005176     -1  101  0.522758    0.097752  0.005176   \n2         1  0.526473  0.005213     -1  101  0.526474    0.195503  0.005213   \n3         1  0.530187  0.005249     -1  101  0.530188    0.293255  0.005249   \n4         1  0.533899  0.005286     -1  101  0.533900    0.391007  0.005286   \n...     ...       ...       ...    ...  ...       ...         ...       ...   \n1019      1  0.533899  0.005286     -1  101  0.533900   99.608993  0.005286   \n1020      1  0.530187  0.005249     -1  101  0.530188   99.706745  0.005249   \n1021      1  0.526473  0.005213     -1  101  0.526474   99.804497  0.005213   \n1022      1  0.522757  0.005176     -1  101  0.522758   99.902248  0.005176   \n1023      1  0.519038  0.005139     -1  101  0.519039  100.000000  0.005139   \n\n      ymin      ymax  \n0        0  0.005139  \n1        0  0.005176  \n2        0  0.005213  \n3        0  0.005249  \n4        0  0.005286  \n...    ...       ...  \n1019     0  0.005286  \n1020     0  0.005249  \n1021     0  0.005213  \n1022     0  0.005176  \n1023     0  0.005139  \n\n[1024 rows x 10 columns]\n\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe highlight has filled the whole region, but the printed data suggests that we can limit the rows to those where x column is within our region.\n\nclass geom_density_highlight(geom_density):\n    \n    # new method\n    def __init__(self, *args, region=(-np.inf, np.inf), **kwargs):\n        super().__init__(*args, **kwargs)\n        self.region = region\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        s = f'{self.region[0]} &lt;= x &lt;= {self.region[1]}'  # new line\n        data = data.query(s).reset_index(drop=True)       # new line\n        return data\n\n    \nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + geom_density_highlight(region=region, fill='black', alpha=0.5) # modified line\n + annotate(geom_vline, xintercept=region)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat is it, but we can make it look better.\n\nclass geom_density_highlight(geom_density):\n\n    def __init__(self, *args, region=(-np.inf, np.inf), **kwargs):\n        super().__init__(*args, **kwargs)\n        self.region = region\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        s = f'{self.region[0]} &lt;= x &lt;= {self.region[1]}'\n        data = data.query(s).reset_index(drop=True)\n        return data\n\n\nregion = (40, 60)\nteal = '#029386'\n\n# Gallery Plot\n\n(ggplot(df, aes('x'))\n + geom_density_highlight(region=region, fill=teal+'88', color='none')\n + geom_density(fill=teal+'44', color=teal, size=.7)\n + annotate(geom_vline, xintercept=region, color=teal, size=.7)\n + theme_tufte()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThis example was motivated by a question from github user Rishika-Ravindran."
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_col.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_col.html",
    "title": "Two Variable Bar Plot",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_col,\n    geom_text,\n    position_dodge,\n    lims,\n    theme,\n    element_text,\n    element_blank,\n    element_rect,\n    element_line,\n)\n\nVisualising on a single plot the values of a variable that has nested (and independent) variables\nCreate the data\n\ndf = pd.DataFrame({\n    'variable': ['gender', 'gender', 'age', 'age', 'age', 'income', 'income', 'income', 'income'],\n    'category': ['Female', 'Male', '1-24', '25-54', '55+', 'Lo', 'Lo-Med', 'Med', 'High'],\n    'value': [60, 40, 50, 30, 20, 10, 25, 25, 40],\n})\ndf['variable'] = pd.Categorical(df['variable'], categories=['gender', 'age', 'income'])\ndf['category'] = pd.Categorical(df['category'], categories=df['category'])\n\ndf\n\n\n\n\n\n\n\n\nvariable\ncategory\nvalue\n\n\n\n\n0\ngender\nFemale\n60\n\n\n1\ngender\nMale\n40\n\n\n2\nage\n1-24\n50\n\n\n3\nage\n25-54\n30\n\n\n4\nage\n55+\n20\n\n\n5\nincome\nLo\n10\n\n\n6\nincome\nLo-Med\n25\n\n\n7\nincome\nMed\n25\n\n\n8\nincome\nHigh\n40\n\n\n\n\n\n\n\nWe want to visualise this data and at a galance get an idea to how the value breaks down along the categorys for the different variable. Note that each variable has different categorys.\nFirst we make a simple plot with all this information and see what to draw from it.\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAll the values along each variable add up to 100, but stacked together the difference within and without the groups is not clear. The solution is to dodge the bars.\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge'))                     # modified\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThis is good, it gives us the plot we want but the legend is not great. Each variable has a different set of categorys, but the legend has them all clamped together. We cannot easily change the legend, but we can replicate it’s purpose by labelling the individual bars.\nTo do this, we create a geom_text with position_dodge(width=0.9) to match the ratio of the space taken up by each variable. If there was no spacing between the bars of different variables, we would have width=1.\nA minor quack, when text extends beyond the limits we have to manually make space or it would get clipped. Therefore we adjust the bottom y limits.\n\ndodge_text = position_dodge(width=0.9)                              # new\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)   # modified\n + geom_text(aes(y=-.5, label='category'),                          # new\n             position=dodge_text,\n             color='gray', size=8, angle=45, va='top')\n + lims(y=(-5, 60))                                                 # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWould it look too crowded if we add value labels on top of the bars?\n\ndodge_text = position_dodge(width=0.9)\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)\n + geom_text(aes(y=-.5, label='category'),\n             position=dodge_text,\n             color='gray', size=8, angle=45, va='top')\n + geom_text(aes(label='value'),                                    # new\n             position=dodge_text,\n             size=8, va='bottom', format_string='{}%')\n + lims(y=(-5, 60))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat looks okay. The values line up with the categorys because we used the same dodge parameters. For the final polish, we remove the y-axis, clear out the panel and make the variable and category labels have the same color.\n\ndodge_text = position_dodge(width=0.9)\nccolor = '#555555'\n\n# Gallery Plot\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)\n + geom_text(aes(y=-.5, label='category'),\n             position=dodge_text,\n             color=ccolor, size=8, angle=45, va='top')              # modified\n + geom_text(aes(label='value'),\n             position=dodge_text,\n             size=8, va='bottom', format_string='{}%')\n + lims(y=(-5, 60))\n + theme(panel_background=element_rect(fill='white'),               # new\n         axis_title_y=element_blank(),\n         axis_line_x=element_line(color='black'),\n         axis_line_y=element_blank(),\n         axis_text_y=element_blank(),\n         axis_text_x=element_text(color=ccolor),\n         axis_ticks_major_y=element_blank(),\n         panel_grid=element_blank(),\n         panel_border=element_blank())\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nCredit: I saved a plot this example is based on a while ago and forgot/misplaced the link to the source. The user considered it a minor coup."
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_bar.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_bar.html",
    "title": "Bar chart",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_bar,\n    coord_flip,\n    theme_classic\n)\nfrom plotnine.data import mpg\n\ngeom_bar() makes the height of the bar proportional to the number of cases in each group\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\nggplot(mpg) + geom_bar(aes(x='class'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nggplot(mpg) + geom_bar(aes(x='class', fill='drv'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(\n    ggplot(mpg) \n    + geom_bar(aes(x='class', fill='drv'))\n    + coord_flip()\n    + theme_classic()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/facet_wrap.html",
    "href": "plotnine-examples/plotnine_examples/examples/facet_wrap.html",
    "title": "Facet wrap",
    "section": "",
    "text": "import pandas as pd\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    labs,\n    facet_wrap,\n    theme,\n    element_text\n)\nfrom plotnine.data import mpg\n\nfacet_wrap() creates a collection of plots (facets), where each plot is differentiated by the faceting variable. These plots are wrapped into a certain number of columns or rows as specified by the user.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nBasic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet a discrete variable using facet_wrap():\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nControl the number of rows and columns with the options nrow and ncol:\n\n# Selecting the number of columns to display\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class',\n                 ncol = 4 # change the number of columns\n                )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n# Selecting the number of rows to display\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class', \n                 nrow = 4 # change the number of columns\n                )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo change the plot order of the facets, reorder the levels of the faceting variable in the data.\n\n# re-order categories\nmpg['class'] = mpg['class'].cat.reorder_categories(['pickup', 'suv','minivan','midsize','compact','subcompact','2seater'])\n\n\n# facet plot with reorded drv category\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nOrdinarily the facets are arranged horizontally (left-to-right from top to bottom). However if you would prefer a vertical layout (facets are arranged top-to-bottom, from left to right) use the dir option:\n\n# Facet plot with vertical layout\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class',\n                 dir = 'v' # change to a vertical layout\n                )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can choose if the scale of x- and y-axes are fixed or variable. Set the scales argument to free-y, free_x or free for a free scales on the y-axis, x-axis or both axes respectively. You may need to add spacing between the facets to ensure axis ticks and values are easy to read.\nA fixed scale is the default and does not need to be specified.\n\n# facet plot with free scales\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class'\n                , scales = 'free_y'           # set scales so y-scale varies with the data\n                )\n    + theme(subplots_adjust={'wspace': 0.25}) # add spaceing between facets to make y-axis ticks visible\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add additional information to your facet labels, by using the labeller argument within the facet_wrap() command. Below we use labeller = 'label_both' to include the column name in the facet label.\n\n# facet plot with labeller\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class', labeller='label_both')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add two discrete variables to a facet:\n\n# add additional column for plotting exercise\nmpg[\"transmission\"] = mpg['trans'].map(lambda x: \"auto\" if \"auto\" in x else \"man\" if \"man\" in x else \"\")\n\n\n# inspect new column transmission which identifies cars as having an automatic or manual transmission\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntransmission\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\nauto\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\nman\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\nman\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\nauto\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\nauto\n\n\n\n\n\n\n\n\n# facet plot with two variables on one facet\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap(['class', 'transmission']) # use ~ + to add additional faceting variables\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/after_stat.html",
    "href": "plotnine-examples/plotnine_examples/examples/after_stat.html",
    "title": "after_stat",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    geom_bar,\n    labs\n)\n\ngeom_bar uses stat_count which by default maps the y aesthetic to the count which is the number of observations at a position.\n\ndf = pd.DataFrame({\n    'var1': [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n})\n\n(ggplot(df, aes('var1'))\n + geom_bar()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nUsing the after_stat function, we can instead map to the prop which is the ratio of points in the panel at a position.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(y=after_stat('prop'))) # default is after_stat('count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWith after_stat you can used the variables calculated by the stat in expressions. For example we use the count to calculated the prop.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(y=after_stat('count / np.sum(count)')))\n + labs(y='prop')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nBy default geom_bar uses stat_count to compute a frequency table with the x aesthetic as the key column. As a result, any mapping (other than the x aesthetic is lost) to a continuous variable is lost (if you have a classroom and you compute a frequency table of the gender, you lose any other information like height of students).\nFor example, below fill='var1' has no effect, but the var1 variable has not been lost it has been turned into x aesthetic.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(fill='var1'))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe use after_stat to map fill to the x aesthetic after it has been computed.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(fill=after_stat('x')))\n + labs(fill='var1')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/aes.html",
    "href": "plotnine-examples/plotnine_examples/examples/aes.html",
    "title": "aes",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point\n)\n\nMapping variables to the visual properties of a plot.\n\ndf = pd.DataFrame({\n    'col1': np.arange(11),\n    'col2': np.arange(11)\n})\n\n(ggplot(df, aes(x='col1', y='col2'))\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(ggplot(df, aes(x='col1', y='col2 ** 2'))\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(ggplot(df, aes(x='col1', y='np.square(col2)'))\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe first two positional arguments are x and y aesthetics. Any other aesthetic must be mapped with a keyword argument.\n\n(ggplot(df, aes('col1', 'np.square(col2)', color='col2'))\n + geom_point(size=3)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "tutorials/index.html",
    "href": "tutorials/index.html",
    "title": "Tutorials",
    "section": "",
    "text": "Tutorials\n\na-pyqt5-application\naltering-colors\nautomatic-grouping-insufficient\nmanipulating-date-breaks-and-date-labels\norder-plot-series\nshow-counts-and-percentages-for-bar-plots\nshow-counts-on-a-stacked-bar-plot\nusing-letter-as-shapes\nusing-notebook-widgets"
  },
  {
    "objectID": "gallery/index.html",
    "href": "gallery/index.html",
    "title": "Gallery",
    "section": "",
    "text": "Spiral Animation\n\n\n\n\n\n\n\n\n\n\n\nTwo Variable Bar Plot\n\n\n\n\n\n\n\n\n\n\n\nShading a Region under a Density Curve\n\n\n\n\n\n\n\n\n\n\n\nThe Political Territories of Westeros\n\n\n\n\n\n\n\n\n\n\n\nRanges of Similar Variables\n\n\n\n\n\n\n\n\n\n\n\nChange in Rank\n\n\n\n\n\n\n\n\n\n\n\nSmoothed conditional means\n\n\n\n\n\n\n\n\n\n\n\nPeriodic Table of Elements\n\n\n\n\n\n\n\n\n\n\n\nAnnotated Heatmap\n\n\n\n\n\n\n\n\n\n\n\nViolins, Boxes, Points and Lines\n\n\n\n\n\n\n\n\n\n\n\nGuitar Neck"
  },
  {
    "objectID": "reference/ylim.html",
    "href": "reference/ylim.html",
    "title": "ylim",
    "section": "",
    "text": "scales.ylim()\nSet y-axis limits\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlimits\n\n\narray_like\n\n\nMin and max limits. Must be of size 2. You can also pass two values e.g ylim(40, 100)\n\n\nrequired\n\n\n\n\n\n\n\nIf the 2nd value of limits is less than the first, a reversed scale will be created."
  },
  {
    "objectID": "reference/ylim.html#parameters",
    "href": "reference/ylim.html#parameters",
    "title": "ylim",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlimits\n\n\narray_like\n\n\nMin and max limits. Must be of size 2. You can also pass two values e.g ylim(40, 100)\n\n\nrequired"
  },
  {
    "objectID": "reference/ylim.html#notes",
    "href": "reference/ylim.html#notes",
    "title": "ylim",
    "section": "",
    "text": "If the 2nd value of limits is less than the first, a reversed scale will be created."
  },
  {
    "objectID": "reference/xlim.html",
    "href": "reference/xlim.html",
    "title": "xlim",
    "section": "",
    "text": "scales.xlim()\nSet x-axis limits\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlimits\n\n\narray_like\n\n\nMin and max limits. Must be of size 2. You can also pass two values e.g xlim(40, 100)\n\n\nrequired"
  },
  {
    "objectID": "reference/xlim.html#parameters",
    "href": "reference/xlim.html#parameters",
    "title": "xlim",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlimits\n\n\narray_like\n\n\nMin and max limits. Must be of size 2. You can also pass two values e.g xlim(40, 100)\n\n\nrequired"
  },
  {
    "objectID": "reference/watermark.html",
    "href": "reference/watermark.html",
    "title": "watermark",
    "section": "",
    "text": "watermark(self, filename, xo=0, yo=0, alpha=None, **kwargs)\nAdd watermark to plot\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfilename\n\n\nstr | pathlib.Path\n\n\nImage file\n\n\nrequired\n\n\n\n\nxo\n\n\nint\n\n\nx position offset in pixels. Default is 0.\n\n\n0\n\n\n\n\nyo\n\n\nint\n\n\ny position offset in pixels. Default is 0.\n\n\n0\n\n\n\n\nalpha\n\n\nfloat\n\n\nAlpha blending value.\n\n\nNone\n\n\n\n\nkwargs\n\n\ndict\n\n\nAdditional parameters passed to matplotlib.figure.figimage.\n\n\n{}\n\n\n\n\n\n\n\nYou can add more than one watermark to a plot.\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndraw\nDraw watermark\n\n\n\n\n\nwatermark.draw(self, figure)\nDraw watermark\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfigure\n\n\nMatplotlib.figure.Figure\n\n\nMatplolib figure on which to draw\n\n\nrequired"
  },
  {
    "objectID": "reference/watermark.html#parameters",
    "href": "reference/watermark.html#parameters",
    "title": "watermark",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfilename\n\n\nstr | pathlib.Path\n\n\nImage file\n\n\nrequired\n\n\n\n\nxo\n\n\nint\n\n\nx position offset in pixels. Default is 0.\n\n\n0\n\n\n\n\nyo\n\n\nint\n\n\ny position offset in pixels. Default is 0.\n\n\n0\n\n\n\n\nalpha\n\n\nfloat\n\n\nAlpha blending value.\n\n\nNone\n\n\n\n\nkwargs\n\n\ndict\n\n\nAdditional parameters passed to matplotlib.figure.figimage.\n\n\n{}"
  },
  {
    "objectID": "reference/watermark.html#notes",
    "href": "reference/watermark.html#notes",
    "title": "watermark",
    "section": "",
    "text": "You can add more than one watermark to a plot."
  },
  {
    "objectID": "reference/watermark.html#methods",
    "href": "reference/watermark.html#methods",
    "title": "watermark",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndraw\nDraw watermark\n\n\n\n\n\nwatermark.draw(self, figure)\nDraw watermark\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfigure\n\n\nMatplotlib.figure.Figure\n\n\nMatplolib figure on which to draw\n\n\nrequired"
  },
  {
    "objectID": "reference/title.html",
    "href": "reference/title.html",
    "title": "title",
    "section": "",
    "text": "themes.themeable.title()\nAll titles on the plot\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/title.html#parameters",
    "href": "reference/title.html#parameters",
    "title": "title",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/theme_xkcd.html",
    "href": "reference/theme_xkcd.html",
    "title": "theme_xkcd",
    "section": "",
    "text": "themes.theme_xkcd(self, base_size=12, scale=1, length=100, randomness=2, stroke_size=4, stroke_color='white')\nxkcd theme\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 12.\n\n\n12\n\n\n\n\nscale\n\n\nfloat\n\n\nThe amplitude of the wiggle perpendicular to the line (in pixels). Default is 1.\n\n\n1\n\n\n\n\nlength\n\n\nfloat\n\n\nThe length of the wiggle along the line (in pixels). Default is 100.\n\n\n100\n\n\n\n\nrandomness\n\n\nfloat\n\n\nThe factor by which the length is randomly scaled. Default is 2.\n\n\n2\n\n\n\n\nstroke_size\n\n\nfloat\n\n\nSize of the stroke to apply to the lines and text paths. Default is 4.\n\n\n4\n\n\n\n\nstroke_color\n\n\nstr or tuple\n\n\nColor of the strokes. Default is white. For no color, use 'none'.\n\n\n'white'"
  },
  {
    "objectID": "reference/theme_xkcd.html#parameters",
    "href": "reference/theme_xkcd.html#parameters",
    "title": "theme_xkcd",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 12.\n\n\n12\n\n\n\n\nscale\n\n\nfloat\n\n\nThe amplitude of the wiggle perpendicular to the line (in pixels). Default is 1.\n\n\n1\n\n\n\n\nlength\n\n\nfloat\n\n\nThe length of the wiggle along the line (in pixels). Default is 100.\n\n\n100\n\n\n\n\nrandomness\n\n\nfloat\n\n\nThe factor by which the length is randomly scaled. Default is 2.\n\n\n2\n\n\n\n\nstroke_size\n\n\nfloat\n\n\nSize of the stroke to apply to the lines and text paths. Default is 4.\n\n\n4\n\n\n\n\nstroke_color\n\n\nstr or tuple\n\n\nColor of the strokes. Default is white. For no color, use 'none'.\n\n\n'white'"
  },
  {
    "objectID": "reference/theme_update.html",
    "href": "reference/theme_update.html",
    "title": "theme_update",
    "section": "",
    "text": "themes.theme_update(**kwargs)\nModify elements of the current theme\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nkwargs\n\n\ndict\n\n\nTheme elements\n\n\n{}"
  },
  {
    "objectID": "reference/theme_update.html#parameters",
    "href": "reference/theme_update.html#parameters",
    "title": "theme_update",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nkwargs\n\n\ndict\n\n\nTheme elements\n\n\n{}"
  },
  {
    "objectID": "reference/theme_set.html",
    "href": "reference/theme_set.html",
    "title": "theme_set",
    "section": "",
    "text": "themes.theme_set(new)\nChange the current(default) theme\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nnew\n\n\ntheme\n\n\nNew default theme\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\ntheme\n\n\nPrevious theme"
  },
  {
    "objectID": "reference/theme_set.html#parameters",
    "href": "reference/theme_set.html#parameters",
    "title": "theme_set",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nnew\n\n\ntheme\n\n\nNew default theme\n\n\nrequired"
  },
  {
    "objectID": "reference/theme_set.html#returns",
    "href": "reference/theme_set.html#returns",
    "title": "theme_set",
    "section": "",
    "text": "Type\n\n\nDescription\n\n\n\n\n\n\ntheme\n\n\nPrevious theme"
  },
  {
    "objectID": "reference/theme_minimal.html",
    "href": "reference/theme_minimal.html",
    "title": "theme_minimal",
    "section": "",
    "text": "themes.theme_minimal(self, base_size=11, base_family=None)\nA minimalistic theme with no background annotations\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_minimal.html#parameters",
    "href": "reference/theme_minimal.html#parameters",
    "title": "theme_minimal",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_linedraw.html",
    "href": "reference/theme_linedraw.html",
    "title": "theme_linedraw",
    "section": "",
    "text": "themes.theme_linedraw(self, base_size=11, base_family=None)\nA theme with only black lines of various widths on white backgrounds\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_linedraw.html#parameters",
    "href": "reference/theme_linedraw.html#parameters",
    "title": "theme_linedraw",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_grey.html",
    "href": "reference/theme_grey.html",
    "title": "theme_grey",
    "section": "",
    "text": "themes.theme_grey\n\n\nbase_size : int, optional Base font size. All text sizes are a scaled versions of the base font size. Default is 11. base_family : str, optional Base font family."
  },
  {
    "objectID": "reference/theme_grey.html#parameters",
    "href": "reference/theme_grey.html#parameters",
    "title": "theme_grey",
    "section": "",
    "text": "base_size : int, optional Base font size. All text sizes are a scaled versions of the base font size. Default is 11. base_family : str, optional Base font family."
  },
  {
    "objectID": "reference/theme_get.html",
    "href": "reference/theme_get.html",
    "title": "theme_get",
    "section": "",
    "text": "theme_get\nthemes.theme_get()\nReturn the default theme\nThe default theme is the one set (using theme_set) by the user. If none has been set, then theme_gray is the default."
  },
  {
    "objectID": "reference/theme_classic.html",
    "href": "reference/theme_classic.html",
    "title": "theme_classic",
    "section": "",
    "text": "themes.theme_classic(self, base_size=11, base_family=None)\nA classic-looking theme, with x & y axis lines and no gridlines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_classic.html#parameters",
    "href": "reference/theme_classic.html#parameters",
    "title": "theme_classic",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_538.html",
    "href": "reference/theme_538.html",
    "title": "theme_538",
    "section": "",
    "text": "themes.theme_538(self, base_size=11, base_family='DejaVu Sans')\nTheme in the likeness of fivethirtyeight.com plots\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\n'DejaVu Sans'"
  },
  {
    "objectID": "reference/theme_538.html#parameters",
    "href": "reference/theme_538.html#parameters",
    "title": "theme_538",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\n'DejaVu Sans'"
  },
  {
    "objectID": "reference/text.html",
    "href": "reference/text.html",
    "title": "text",
    "section": "",
    "text": "themes.themeable.text()\nAll text elements in the plot\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/text.html#parameters",
    "href": "reference/text.html#parameters",
    "title": "text",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_text_x.html",
    "href": "reference/strip_text_x.html",
    "title": "strip_text_x",
    "section": "",
    "text": "themes.themeable.strip_text_x()\nFacet labels along the horizontal axis\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_text_x.html#parameters",
    "href": "reference/strip_text_x.html#parameters",
    "title": "strip_text_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_background_y.html",
    "href": "reference/strip_background_y.html",
    "title": "strip_background_y",
    "section": "",
    "text": "themes.themeable.strip_background_y()\nVertical facet label background\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_background_y.html#parameters",
    "href": "reference/strip_background_y.html#parameters",
    "title": "strip_background_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_background.html",
    "href": "reference/strip_background.html",
    "title": "strip_background",
    "section": "",
    "text": "themes.themeable.strip_background()\nFacet label background\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_background.html#parameters",
    "href": "reference/strip_background.html#parameters",
    "title": "strip_background",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_align_x.html",
    "href": "reference/strip_align_x.html",
    "title": "strip_align_x",
    "section": "",
    "text": "themes.themeable.strip_align_x()\nVertical alignment of the strip & its background w.r.t the panel border\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue as a proportion of the strip size. A good value should be the range :math:[-1, 0.5]. A negative value puts the strip inside the axes. A positive value creates a margin between the strip and the axes. 0 puts the strip on top of the panels.\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_align_x.html#parameters",
    "href": "reference/strip_align_x.html#parameters",
    "title": "strip_align_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue as a proportion of the strip size. A good value should be the range :math:[-1, 0.5]. A negative value puts the strip inside the axes. A positive value creates a margin between the strip and the axes. 0 puts the strip on top of the panels.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_ydensity.html",
    "href": "reference/stat_ydensity.html",
    "title": "stat_ydensity",
    "section": "",
    "text": "stats.stat_ydensity()\nDensity estimate\nUsage\nstat_ydensity(mapping=None, data=None, geom='violin', position='dodge',\n              na_rm=False, kernel='gaussian', adjust=1, trim=True,\n              scale='area', n=1024, bw='nrd0', **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nweight\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_violin\nstatsmodels.nonparametric.kde.KDEUnivariate\nstatsmodels.nonparametric.kde.KDEUnivariate.fit"
  },
  {
    "objectID": "reference/stat_ydensity.html#parameters",
    "href": "reference/stat_ydensity.html#parameters",
    "title": "stat_ydensity",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nweight\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_ydensity.html#see-also",
    "href": "reference/stat_ydensity.html#see-also",
    "title": "stat_ydensity",
    "section": "",
    "text": "plotnine.geoms.geom_violin\nstatsmodels.nonparametric.kde.KDEUnivariate\nstatsmodels.nonparametric.kde.KDEUnivariate.fit"
  },
  {
    "objectID": "reference/stat_summary_bin.html",
    "href": "reference/stat_summary_bin.html",
    "title": "stat_summary_bin",
    "section": "",
    "text": "stats.stat_summary_bin()\nSummarise y values at x intervals\nUsage\nstat_summary_bin(mapping=None, data=None, geom='pointrange',\n                 position='identity', na_rm=False, fun_ymax=None,\n                 boundary=None, random_state=None, binwidth=None,\n                 fun_ymin=None, fun_data=None, fun_args=None, breaks=None,\n                 fun_y=None, bins=30, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\nThe binwidth, bins, breaks and bounary arguments can be a tuples with two values ((xaxis-value, yaxis-value)) of the required type.\n\n\n\n\nplotnine.geoms.geom_pointrange"
  },
  {
    "objectID": "reference/stat_summary_bin.html#parameters",
    "href": "reference/stat_summary_bin.html#parameters",
    "title": "stat_summary_bin",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_summary_bin.html#notes",
    "href": "reference/stat_summary_bin.html#notes",
    "title": "stat_summary_bin",
    "section": "",
    "text": "The binwidth, bins, breaks and bounary arguments can be a tuples with two values ((xaxis-value, yaxis-value)) of the required type."
  },
  {
    "objectID": "reference/stat_summary_bin.html#see-also",
    "href": "reference/stat_summary_bin.html#see-also",
    "title": "stat_summary_bin",
    "section": "",
    "text": "plotnine.geoms.geom_pointrange"
  },
  {
    "objectID": "reference/stat_sum.html",
    "href": "reference/stat_sum.html",
    "title": "stat_sum",
    "section": "",
    "text": "stats.stat_sum()\nSum unique values\nUseful for overplotting on scatterplots.\nUsage\nstat_sum(mapping=None, data=None, geom='point', position='identity',\n         na_rm=False, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nsize\n\n\nafter_stat(‘n’)\n\n\n\n\nweight\n\n\n1\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n.. rubric:: Options for computed aesthetics\n\n::\n\n    'n'     # Number of observations at a position\n    'prop'  # Ratio of points in that panel at a position\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_point) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values."
  },
  {
    "objectID": "reference/stat_sum.html#parameters",
    "href": "reference/stat_sum.html#parameters",
    "title": "stat_sum",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nsize\n\n\nafter_stat(‘n’)\n\n\n\n\nweight\n\n\n1\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n.. rubric:: Options for computed aesthetics\n\n::\n\n    'n'     # Number of observations at a position\n    'prop'  # Ratio of points in that panel at a position\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_point) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values."
  },
  {
    "objectID": "reference/stat_sina.html",
    "href": "reference/stat_sina.html",
    "title": "stat_sina",
    "section": "",
    "text": "stats.stat_sina()\nCompute Sina plot values\nUsage\nstat_sina(mapping=None, data=None, geom='sina', position='dodge', na_rm=False,\n          random_state=None, maxwidth=None, adjust=1, method='density',\n          binwidth=None, scale='area', bw='nrd0', bin_limit=1, bins=None,\n          **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nxend\n\n\nafter_stat(‘scaled’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_sina"
  },
  {
    "objectID": "reference/stat_sina.html#parameters",
    "href": "reference/stat_sina.html#parameters",
    "title": "stat_sina",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nxend\n\n\nafter_stat(‘scaled’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_sina.html#see-also",
    "href": "reference/stat_sina.html#see-also",
    "title": "stat_sina",
    "section": "",
    "text": "plotnine.geoms.geom_sina"
  },
  {
    "objectID": "reference/stat_qq_line.html",
    "href": "reference/stat_qq_line.html",
    "title": "stat_qq_line",
    "section": "",
    "text": "stats.stat_qq_line()\nCalculate line through quantile-quantile plot\nUsage\nstat_qq_line(mapping=None, data=None, geom='qq_line', position='identity',\n             na_rm=False, dparams={}, distribution='norm', alpha_beta=(0.375,\n             0.375), fullrange=False, quantiles=None, line_p=(0.25, 0.75),\n             **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nsample\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nscipy.stats.mstats.plotting_positions: Uses alpha_betato calculate the quantiles."
  },
  {
    "objectID": "reference/stat_qq_line.html#parameters",
    "href": "reference/stat_qq_line.html#parameters",
    "title": "stat_qq_line",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nsample\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_qq_line.html#see-also",
    "href": "reference/stat_qq_line.html#see-also",
    "title": "stat_qq_line",
    "section": "",
    "text": "scipy.stats.mstats.plotting_positions: Uses alpha_betato calculate the quantiles."
  },
  {
    "objectID": "reference/stat_identity.html",
    "href": "reference/stat_identity.html",
    "title": "stat_identity",
    "section": "",
    "text": "stats.stat_identity()\nIdentity (do nothing) statistic\nUsage\nstat_identity(mapping=None, data=None, geom='point', position='identity',\n              na_rm=False, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_point) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values."
  },
  {
    "objectID": "reference/stat_identity.html#parameters",
    "href": "reference/stat_identity.html#parameters",
    "title": "stat_identity",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_point) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values."
  },
  {
    "objectID": "reference/stat_function.html",
    "href": "reference/stat_function.html",
    "title": "stat_function",
    "section": "",
    "text": "stats.stat_function(self, mapping=None, data=None, **kwargs)\nSuperimpose a function onto a plot\nUsage\nstat_function(mapping=None, data=None, geom='path', position='identity',\n              na_rm=False, fun=None, args=None, xlim=None, n=101, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\ny\n\n\nafter_stat(‘fx’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\n.. rubric:: Options for computed aesthetics\n\n::\n\n    'x'   # x points at which the function is evaluated\n    'fx'  # points evaluated at each x\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_path) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values.\nfun : function Function to evaluate. n : int, optional (default: 101) Number of points at which to evaluate the function. xlim : tuple (default: None) x limits for the range. The default depends on the x aesthetic. There is not an x aesthetic then the xlim must be provided. args : tuple or dict (default: None) Arguments to pass to fun."
  },
  {
    "objectID": "reference/stat_function.html#parameters",
    "href": "reference/stat_function.html#parameters",
    "title": "stat_function",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\ny\n\n\nafter_stat(‘fx’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\n.. rubric:: Options for computed aesthetics\n\n::\n\n    'x'   # x points at which the function is evaluated\n    'fx'  # points evaluated at each x\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_path) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values.\nfun : function Function to evaluate. n : int, optional (default: 101) Number of points at which to evaluate the function. xlim : tuple (default: None) x limits for the range. The default depends on the x aesthetic. There is not an x aesthetic then the xlim must be provided. args : tuple or dict (default: None) Arguments to pass to fun."
  },
  {
    "objectID": "reference/stat_ecdf.html",
    "href": "reference/stat_ecdf.html",
    "title": "stat_ecdf",
    "section": "",
    "text": "stats.stat_ecdf()\nEmperical Cumulative Density Function\nUsage\nstat_ecdf(mapping=None, data=None, geom='step', position='identity',\n          na_rm=False, n=None, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\nafter_stat(‘ecdf’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_step"
  },
  {
    "objectID": "reference/stat_ecdf.html#parameters",
    "href": "reference/stat_ecdf.html#parameters",
    "title": "stat_ecdf",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\nafter_stat(‘ecdf’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_ecdf.html#see-also",
    "href": "reference/stat_ecdf.html#see-also",
    "title": "stat_ecdf",
    "section": "",
    "text": "plotnine.geoms.geom_step"
  },
  {
    "objectID": "reference/stat_density.html",
    "href": "reference/stat_density.html",
    "title": "stat_density",
    "section": "",
    "text": "stats.stat_density()\nCompute density estimate\nUsage\nstat_density(mapping=None, data=None, geom='density', position='stack',\n             na_rm=False, kernel='gaussian', clip=(-inf, inf), adjust=1,\n             gridsize=None, trim=False, cut=3, n=1024, bw='nrd0', **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\nafter_stat(‘density’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_density\nstatsmodels.nonparametric.kde.KDEUnivariate\nstatsmodels.nonparametric.kde.KDEUnivariate.fit"
  },
  {
    "objectID": "reference/stat_density.html#parameters",
    "href": "reference/stat_density.html#parameters",
    "title": "stat_density",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\nafter_stat(‘density’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_density.html#see-also",
    "href": "reference/stat_density.html#see-also",
    "title": "stat_density",
    "section": "",
    "text": "plotnine.geoms.geom_density\nstatsmodels.nonparametric.kde.KDEUnivariate\nstatsmodels.nonparametric.kde.KDEUnivariate.fit"
  },
  {
    "objectID": "reference/stat_boxplot.html",
    "href": "reference/stat_boxplot.html",
    "title": "stat_boxplot",
    "section": "",
    "text": "stats.stat_boxplot()\nCompute boxplot statistics\nUsage\nstat_boxplot(mapping=None, data=None, geom='boxplot', position='dodge',\n             na_rm=False, coef=1.5, width=None, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_boxplot"
  },
  {
    "objectID": "reference/stat_boxplot.html#parameters",
    "href": "reference/stat_boxplot.html#parameters",
    "title": "stat_boxplot",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_boxplot.html#see-also",
    "href": "reference/stat_boxplot.html#see-also",
    "title": "stat_boxplot",
    "section": "",
    "text": "plotnine.geoms.geom_boxplot"
  },
  {
    "objectID": "reference/stat_bin_2d.html",
    "href": "reference/stat_bin_2d.html",
    "title": "stat_bin_2d",
    "section": "",
    "text": "stats.stat_bin_2d()\n2 Dimensional bin counts\nUsage\nstat_bin_2d(mapping=None, data=None, geom='rect', position='identity',\n            na_rm=False, binwidth=None, drop=True, breaks=None, bins=30,\n            **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nfill\n\n\nafter_stat(‘count’)\n\n\n\n\nweight\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n.. rubric:: Options for computed aesthetics\n\n::\n\n    'xmin'    # x lower bound for the bin\n    'xmax'    # x upper bound for the bin\n    'ymin'    # y lower bound for the bin\n    'ymax'    # y upper bound for the bin\n    'count'   # number of points in bin\n    'density' # density of points in bin, scaled to integrate to 1\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_rect) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values.\nbins : int, optional (default: 30) Number of bins. Overridden by binwidth. breaks : array-like(s), optional (default: None) Bin boundaries. This supercedes the binwidth, bins, center and boundary. It can be an array_like or a list of two array_likes to provide distinct breaks for the x and y axes. binwidth : float, optional (default: None) The width of the bins. The default is to use bins bins that cover the range of the data. You should always override this value, exploring multiple widths to find the best to illustrate the stories in your data. drop : bool, optional (default: False) If True, removes all cells with zero counts."
  },
  {
    "objectID": "reference/stat_bin_2d.html#parameters",
    "href": "reference/stat_bin_2d.html#parameters",
    "title": "stat_bin_2d",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nfill\n\n\nafter_stat(‘count’)\n\n\n\n\nweight\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n.. rubric:: Options for computed aesthetics\n\n::\n\n    'xmin'    # x lower bound for the bin\n    'xmax'    # x upper bound for the bin\n    'ymin'    # y lower bound for the bin\n    'ymax'    # y upper bound for the bin\n    'count'   # number of points in bin\n    'density' # density of points in bin, scaled to integrate to 1\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_rect) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values.\nbins : int, optional (default: 30) Number of bins. Overridden by binwidth. breaks : array-like(s), optional (default: None) Bin boundaries. This supercedes the binwidth, bins, center and boundary. It can be an array_like or a list of two array_likes to provide distinct breaks for the x and y axes. binwidth : float, optional (default: None) The width of the bins. The default is to use bins bins that cover the range of the data. You should always override this value, exploring multiple widths to find the best to illustrate the stories in your data. drop : bool, optional (default: False) If True, removes all cells with zero counts."
  },
  {
    "objectID": "reference/stat.html",
    "href": "reference/stat.html",
    "title": "stat",
    "section": "",
    "text": "stats.stat\n\n\n\n\n\nName\nDescription\n\n\n\n\nstat\nBase class of all stats\n\n\n\n\n\nstats.stat.stat(self, mapping=None, data=None, **kwargs)\nBase class of all stats\n\n\n\n\n\nName\nDescription\n\n\n\n\nCREATES\nset() -&gt; new empty set object\n\n\nDEFAULT_AES\ndict() -&gt; new empty dictionary\n\n\nDEFAULT_PARAMS\ndict() -&gt; new empty dictionary\n\n\nNON_MISSING_AES\nset() -&gt; new empty set object\n\n\nREQUIRED_AES\nset() -&gt; new empty set object\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\naesthetics\nReturn a set of all non-computed aesthetics for this stat.\n\n\ncompute_group\nCalculate statistics for the group\n\n\ncompute_layer\nCalculate statistics for this layers\n\n\ncompute_panel\nCalculate the statistics for all the groups\n\n\nfinish_layer\nModify data after the aesthetics have been mapped\n\n\nfrom_geom\nReturn an instantiated stat object\n\n\nsetup_data\nOveride to modify data before compute_layer is called\n\n\nsetup_params\nOveride this to verify or adjust parameters\n\n\nto_layer\nMake a layer that represents this stat\n\n\nuse_defaults\nCombine data with defaults and set aesthetics from parameters\n\n\n\n\n\nstats.stat.stat.aesthetics(cls)\nReturn a set of all non-computed aesthetics for this stat.\nstats should not override this method.\n\n\n\nstats.stat.stat.compute_group(cls, data, scales, **params)\nCalculate statistics for the group\nAll stats should implement this method\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData for a group\n\n\nrequired\n\n\n\n\nscales\n\n\ntypes.SimpleNamespace\n\n\nx (scales.x) and y (scales.y) scale objects. The most likely reason to use scale information is to find out the physical size of a scale. e.g:: range_x = scales.x.dimension()\n\n\nrequired\n\n\n\n\nparams : dict Parameters\n\n\n\n\nstats.stat.stat.compute_layer(cls, data, params, layout)\nCalculate statistics for this layers\nThis is the top-most computation method for the stat. It does not do any computations, but it knows how to verify the data, partition it call the next computation method and merge results.\nstats should not override this method.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\npanda.DataFrame\n\n\nData points for all objects in a layer.\n\n\nrequired\n\n\n\n\nparams\n\n\ndict\n\n\nStat parameters\n\n\nrequired\n\n\n\n\nlayout\n\n\nplotnine.layout.Layout\n\n\nPanel layout information\n\n\nrequired\n\n\n\n\n\n\n\n\nstats.stat.stat.compute_panel(cls, data, scales, **params)\nCalculate the statistics for all the groups\nReturn the results in a single dataframe.\nThis is a default function that can be overriden by individual stats\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\ndata for the computing\n\n\nrequired\n\n\n\n\nscales\n\n\ndataclass\n\n\nx (scales.x) and y (scales.y) scale objects. The most likely reason to use scale information is to find out the physical size of a scale. e.g:: range_x = scales.x.dimension()\n\n\nrequired\n\n\n\n\nparams : dict The parameters for the stat. It includes default values if user did not set a particular parameter.\n\n\n\n\nstats.stat.stat.finish_layer(self, data, params)\nModify data after the aesthetics have been mapped\nThis can be used by stats that require access to the mapped values of the computed aesthetics, part 3 as shown below.\n1. stat computes and creates variables\n2. variables mapped to aesthetics\n3. stat sees and modifies data according to the\n   aesthetic values\nThe default to is to do nothing.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData for the layer\n\n\nrequired\n\n\n\n\nparams\n\n\ndict\n\n\nParemeters\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\ndataframe\n\n\nModified data\n\n\n\n\n\n\n\n\nstats.stat.stat.from_geom(geom)\nReturn an instantiated stat object\nstats should not override this method.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ngeom\n\n\ngeom\n\n\ngeom\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nstat\n\n\nA stat object\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nPlotnineError if unable to create a stat.\n\n\n\n\n\n\n\n\n\n\nstats.stat.stat.setup_data(self, data)\nOveride to modify data before compute_layer is called\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\ndataframe\n\n\nData\n\n\n\n\n\n\n\n\nstats.stat.stat.setup_params(self, data)\nOveride this to verify or adjust parameters\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\ndict\n\n\nParameters used by the stats.\n\n\n\n\n\n\n\n\nstats.stat.stat.to_layer(self)\nMake a layer that represents this stat\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nlayer\n\n\nLayer\n\n\n\n\n\n\n\n\nstats.stat.stat.use_defaults(self, data)\nCombine data with defaults and set aesthetics from parameters\nstats should not override this method.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData used for drawing the geom.\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\ndataframe\n\n\nData used for drawing the geom."
  },
  {
    "objectID": "reference/stat.html#classes",
    "href": "reference/stat.html#classes",
    "title": "stat",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nstat\nBase class of all stats\n\n\n\n\n\nstats.stat.stat(self, mapping=None, data=None, **kwargs)\nBase class of all stats\n\n\n\n\n\nName\nDescription\n\n\n\n\nCREATES\nset() -&gt; new empty set object\n\n\nDEFAULT_AES\ndict() -&gt; new empty dictionary\n\n\nDEFAULT_PARAMS\ndict() -&gt; new empty dictionary\n\n\nNON_MISSING_AES\nset() -&gt; new empty set object\n\n\nREQUIRED_AES\nset() -&gt; new empty set object\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\naesthetics\nReturn a set of all non-computed aesthetics for this stat.\n\n\ncompute_group\nCalculate statistics for the group\n\n\ncompute_layer\nCalculate statistics for this layers\n\n\ncompute_panel\nCalculate the statistics for all the groups\n\n\nfinish_layer\nModify data after the aesthetics have been mapped\n\n\nfrom_geom\nReturn an instantiated stat object\n\n\nsetup_data\nOveride to modify data before compute_layer is called\n\n\nsetup_params\nOveride this to verify or adjust parameters\n\n\nto_layer\nMake a layer that represents this stat\n\n\nuse_defaults\nCombine data with defaults and set aesthetics from parameters\n\n\n\n\n\nstats.stat.stat.aesthetics(cls)\nReturn a set of all non-computed aesthetics for this stat.\nstats should not override this method.\n\n\n\nstats.stat.stat.compute_group(cls, data, scales, **params)\nCalculate statistics for the group\nAll stats should implement this method\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData for a group\n\n\nrequired\n\n\n\n\nscales\n\n\ntypes.SimpleNamespace\n\n\nx (scales.x) and y (scales.y) scale objects. The most likely reason to use scale information is to find out the physical size of a scale. e.g:: range_x = scales.x.dimension()\n\n\nrequired\n\n\n\n\nparams : dict Parameters\n\n\n\n\nstats.stat.stat.compute_layer(cls, data, params, layout)\nCalculate statistics for this layers\nThis is the top-most computation method for the stat. It does not do any computations, but it knows how to verify the data, partition it call the next computation method and merge results.\nstats should not override this method.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\npanda.DataFrame\n\n\nData points for all objects in a layer.\n\n\nrequired\n\n\n\n\nparams\n\n\ndict\n\n\nStat parameters\n\n\nrequired\n\n\n\n\nlayout\n\n\nplotnine.layout.Layout\n\n\nPanel layout information\n\n\nrequired\n\n\n\n\n\n\n\n\nstats.stat.stat.compute_panel(cls, data, scales, **params)\nCalculate the statistics for all the groups\nReturn the results in a single dataframe.\nThis is a default function that can be overriden by individual stats\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\ndata for the computing\n\n\nrequired\n\n\n\n\nscales\n\n\ndataclass\n\n\nx (scales.x) and y (scales.y) scale objects. The most likely reason to use scale information is to find out the physical size of a scale. e.g:: range_x = scales.x.dimension()\n\n\nrequired\n\n\n\n\nparams : dict The parameters for the stat. It includes default values if user did not set a particular parameter.\n\n\n\n\nstats.stat.stat.finish_layer(self, data, params)\nModify data after the aesthetics have been mapped\nThis can be used by stats that require access to the mapped values of the computed aesthetics, part 3 as shown below.\n1. stat computes and creates variables\n2. variables mapped to aesthetics\n3. stat sees and modifies data according to the\n   aesthetic values\nThe default to is to do nothing.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData for the layer\n\n\nrequired\n\n\n\n\nparams\n\n\ndict\n\n\nParemeters\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\ndataframe\n\n\nModified data\n\n\n\n\n\n\n\n\nstats.stat.stat.from_geom(geom)\nReturn an instantiated stat object\nstats should not override this method.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ngeom\n\n\ngeom\n\n\ngeom\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nstat\n\n\nA stat object\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nPlotnineError if unable to create a stat.\n\n\n\n\n\n\n\n\n\n\nstats.stat.stat.setup_data(self, data)\nOveride to modify data before compute_layer is called\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\ndataframe\n\n\nData\n\n\n\n\n\n\n\n\nstats.stat.stat.setup_params(self, data)\nOveride this to verify or adjust parameters\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\ndict\n\n\nParameters used by the stats.\n\n\n\n\n\n\n\n\nstats.stat.stat.to_layer(self)\nMake a layer that represents this stat\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nlayer\n\n\nLayer\n\n\n\n\n\n\n\n\nstats.stat.stat.use_defaults(self, data)\nCombine data with defaults and set aesthetics from parameters\nstats should not override this method.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData used for drawing the geom.\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\ndataframe\n\n\nData used for drawing the geom."
  },
  {
    "objectID": "reference/set_option.html",
    "href": "reference/set_option.html",
    "title": "set_option",
    "section": "",
    "text": "options.set_option(name, value)\nSet package option\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nname\n\n\nstr\n\n\nName of the option\n\n\nrequired\n\n\n\n\nvalue\n\n\nobject\n\n\nNew value of the option\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nobject\n\n\nOld value of the option"
  },
  {
    "objectID": "reference/set_option.html#parameters",
    "href": "reference/set_option.html#parameters",
    "title": "set_option",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nname\n\n\nstr\n\n\nName of the option\n\n\nrequired\n\n\n\n\nvalue\n\n\nobject\n\n\nNew value of the option\n\n\nrequired"
  },
  {
    "objectID": "reference/set_option.html#returns",
    "href": "reference/set_option.html#returns",
    "title": "set_option",
    "section": "",
    "text": "Type\n\n\nDescription\n\n\n\n\n\n\nobject\n\n\nOld value of the option"
  },
  {
    "objectID": "reference/scale_y_timedelta.html",
    "href": "reference/scale_y_timedelta.html",
    "title": "scale_y_timedelta",
    "section": "",
    "text": "scales.scale_y_timedelta()\nContinuous y position for timedelta data points\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_timedelta.html#parameters",
    "href": "reference/scale_y_timedelta.html#parameters",
    "title": "scale_y_timedelta",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_reverse.html",
    "href": "reference/scale_y_reverse.html",
    "title": "scale_y_reverse",
    "section": "",
    "text": "scales.scale_y_reverse()\nContinuous y position reverse transformed scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_reverse.html#parameters",
    "href": "reference/scale_y_reverse.html#parameters",
    "title": "scale_y_reverse",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_discrete.html",
    "href": "reference/scale_y_discrete.html",
    "title": "scale_y_discrete",
    "section": "",
    "text": "scales.scale_y_discrete()\nDiscrete y position\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For discrete scale, these are the categories (unique values) of the variable. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_discrete.html#parameters",
    "href": "reference/scale_y_discrete.html#parameters",
    "title": "scale_y_discrete",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For discrete scale, these are the categories (unique values) of the variable. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_date.html",
    "href": "reference/scale_y_date.html",
    "title": "scale_y_date",
    "section": "",
    "text": "scales.scale_y_datetime()\nContinuous y position for datetime data points\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_date.html#parameters",
    "href": "reference/scale_y_date.html#parameters",
    "title": "scale_y_date",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_timedelta.html",
    "href": "reference/scale_x_timedelta.html",
    "title": "scale_x_timedelta",
    "section": "",
    "text": "scales.scale_x_timedelta()\nContinuous x position for timedelta data points\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_timedelta.html#parameters",
    "href": "reference/scale_x_timedelta.html#parameters",
    "title": "scale_x_timedelta",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_reverse.html",
    "href": "reference/scale_x_reverse.html",
    "title": "scale_x_reverse",
    "section": "",
    "text": "scales.scale_x_reverse()\nContinuous x position reverse transformed scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_reverse.html#parameters",
    "href": "reference/scale_x_reverse.html#parameters",
    "title": "scale_x_reverse",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_discrete.html",
    "href": "reference/scale_x_discrete.html",
    "title": "scale_x_discrete",
    "section": "",
    "text": "scales.scale_x_discrete()\nDiscrete x position\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For discrete scale, these are the categories (unique values) of the variable. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_discrete.html#parameters",
    "href": "reference/scale_x_discrete.html#parameters",
    "title": "scale_x_discrete",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For discrete scale, these are the categories (unique values) of the variable. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_date.html",
    "href": "reference/scale_x_date.html",
    "title": "scale_x_date",
    "section": "",
    "text": "scales.scale_x_datetime()\nContinuous x position for datetime data points\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_date.html#parameters",
    "href": "reference/scale_x_date.html#parameters",
    "title": "scale_x_date",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_radius.html",
    "href": "reference/scale_size_radius.html",
    "title": "scale_size_radius",
    "section": "",
    "text": "scales.scale_size_radius(self, range=(1, 6), **kwargs)\nContinuous radius size scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nMinimum and maximum radius of the plotting symbol. It must be of size 2.\n\n\n(1, 6)\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_radius.html#parameters",
    "href": "reference/scale_size_radius.html#parameters",
    "title": "scale_size_radius",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nMinimum and maximum radius of the plotting symbol. It must be of size 2.\n\n\n(1, 6)\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_identity.html",
    "href": "reference/scale_size_identity.html",
    "title": "scale_size_identity",
    "section": "",
    "text": "scales.scale_identity.scale_size_identity()\nNo size scaling\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_size_identity.html#parameters",
    "href": "reference/scale_size_identity.html#parameters",
    "title": "scale_size_identity",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_size_datetime.html",
    "href": "reference/scale_size_datetime.html",
    "title": "scale_size_datetime",
    "section": "",
    "text": "scales.scale_size_datetime(self, range=(1, 6), **kwargs)\nDatetime area-size scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nMinimum and maximum area of the plotting symbol. It must be of size 2.\n\n\n(1, 6)\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_datetime.html#parameters",
    "href": "reference/scale_size_datetime.html#parameters",
    "title": "scale_size_datetime",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nMinimum and maximum area of the plotting symbol. It must be of size 2.\n\n\n(1, 6)\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_area.html",
    "href": "reference/scale_size_area.html",
    "title": "scale_size_area",
    "section": "",
    "text": "scales.scale_size_area(self, max_size=6, **kwargs)\nContinuous area size scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmax_size\n\n\nfloat\n\n\nMaximum size of the plotting symbol.\n\n\n6\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_area.html#parameters",
    "href": "reference/scale_size_area.html#parameters",
    "title": "scale_size_area",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmax_size\n\n\nfloat\n\n\nMaximum size of the plotting symbol.\n\n\n6\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_shape_manual.html",
    "href": "reference/scale_shape_manual.html",
    "title": "scale_shape_manual",
    "section": "",
    "text": "scales.scale_shape_manual()\nCustom discrete shape scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nShapes that make up the palette. See matplotlib.markers. for list of all possible shapes. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to shapes.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\n\n\n\n\nmatplotlib.markers"
  },
  {
    "objectID": "reference/scale_shape_manual.html#parameters",
    "href": "reference/scale_shape_manual.html#parameters",
    "title": "scale_shape_manual",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nShapes that make up the palette. See matplotlib.markers. for list of all possible shapes. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to shapes.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_shape_manual.html#see-also",
    "href": "reference/scale_shape_manual.html#see-also",
    "title": "scale_shape_manual",
    "section": "",
    "text": "matplotlib.markers"
  },
  {
    "objectID": "reference/scale_shape_discrete.html",
    "href": "reference/scale_shape_discrete.html",
    "title": "scale_shape_discrete",
    "section": "",
    "text": "scales.scale_shape_discrete(self, unfilled=False, **kwargs)\nScale for shapes\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nunfilled\n\n\nbool\n\n\nIf True, then all shapes will have no interiors that can be a filled.\n\n\nFalse\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_shape_discrete.html#parameters",
    "href": "reference/scale_shape_discrete.html#parameters",
    "title": "scale_shape_discrete",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nunfilled\n\n\nbool\n\n\nIf True, then all shapes will have no interiors that can be a filled.\n\n\nFalse\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_linetype_manual.html",
    "href": "reference/scale_linetype_manual.html",
    "title": "scale_linetype_manual",
    "section": "",
    "text": "scales.scale_linetype_manual()\nCustom discrete linetype scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\nlist - like | dict\n\n\nLinetypes that make up the palette. Possible values of the list are: 1. Strings like :: ‘solid’ # solid line ‘dashed’ # dashed line ‘dashdot’ # dash-dotted line ‘dotted’ # dotted line ‘None’ or ’ ’ or ’’ # draw nothing 2. Tuples of the form (offset, (on, off, on, off, ….)) e.g. (0, (1, 1)), (1, (2, 2)), (2, (5, 3, 1, 3)) The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to linetypes.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\n\n\n\n\nmatplotlib.markers"
  },
  {
    "objectID": "reference/scale_linetype_manual.html#parameters",
    "href": "reference/scale_linetype_manual.html#parameters",
    "title": "scale_linetype_manual",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\nlist - like | dict\n\n\nLinetypes that make up the palette. Possible values of the list are: 1. Strings like :: ‘solid’ # solid line ‘dashed’ # dashed line ‘dashdot’ # dash-dotted line ‘dotted’ # dotted line ‘None’ or ’ ’ or ’’ # draw nothing 2. Tuples of the form (offset, (on, off, on, off, ….)) e.g. (0, (1, 1)), (1, (2, 2)), (2, (5, 3, 1, 3)) The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to linetypes.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_linetype_manual.html#see-also",
    "href": "reference/scale_linetype_manual.html#see-also",
    "title": "scale_linetype_manual",
    "section": "",
    "text": "matplotlib.markers"
  },
  {
    "objectID": "reference/scale_linetype_discrete.html",
    "href": "reference/scale_linetype_discrete.html",
    "title": "scale_linetype_discrete",
    "section": "",
    "text": "scales.scale_linetype_discrete(self, **kwargs)\nScale for line patterns\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\n\n\n\nThe available linetypes are 'solid', 'dashed', 'dashdot', 'dotted' If you need more custom linetypes, use scale_linetype_manual"
  },
  {
    "objectID": "reference/scale_linetype_discrete.html#parameters",
    "href": "reference/scale_linetype_discrete.html#parameters",
    "title": "scale_linetype_discrete",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_linetype_discrete.html#notes",
    "href": "reference/scale_linetype_discrete.html#notes",
    "title": "scale_linetype_discrete",
    "section": "",
    "text": "The available linetypes are 'solid', 'dashed', 'dashdot', 'dotted' If you need more custom linetypes, use scale_linetype_manual"
  },
  {
    "objectID": "reference/scale_fill_manual.html",
    "href": "reference/scale_fill_manual.html",
    "title": "scale_fill_manual",
    "section": "",
    "text": "scales.scale_fill_manual()\nCustom discrete fill scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nColors that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to colors.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_manual.html#parameters",
    "href": "reference/scale_fill_manual.html#parameters",
    "title": "scale_fill_manual",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nColors that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to colors.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_hue.html",
    "href": "reference/scale_fill_hue.html",
    "title": "scale_fill_hue",
    "section": "",
    "text": "scales.scale_fill_hue()\nQualitative color scale with evenly spaced hues\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nh\n\n\nfloat\n\n\nfirst hue. Must be in the range [0, 1] Default is 0.01\n\n\nrequired\n\n\n\n\nl\n\n\nfloat\n\n\nlightness. Must be in the range [0, 1] Default is 0.6\n\n\nrequired\n\n\n\n\ns\n\n\nfloat\n\n\nsaturation. Must be in the range [0, 1] Default is 0.65\n\n\nrequired\n\n\n\n\ncolorspace\n\n\nstr in ['hls', 'husl']\n\n\nColor space to use. hls &lt;https://en.wikipedia.org/wiki/HSL_and_HSV&gt;_ husl &lt;http://www.husl-colors.org/&gt;_\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is '#7F7F7F'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_hue.html#parameters",
    "href": "reference/scale_fill_hue.html#parameters",
    "title": "scale_fill_hue",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nh\n\n\nfloat\n\n\nfirst hue. Must be in the range [0, 1] Default is 0.01\n\n\nrequired\n\n\n\n\nl\n\n\nfloat\n\n\nlightness. Must be in the range [0, 1] Default is 0.6\n\n\nrequired\n\n\n\n\ns\n\n\nfloat\n\n\nsaturation. Must be in the range [0, 1] Default is 0.65\n\n\nrequired\n\n\n\n\ncolorspace\n\n\nstr in ['hls', 'husl']\n\n\nColor space to use. hls &lt;https://en.wikipedia.org/wiki/HSL_and_HSV&gt;_ husl &lt;http://www.husl-colors.org/&gt;_\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is '#7F7F7F'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_gray.html",
    "href": "reference/scale_fill_gray.html",
    "title": "scale_fill_gray",
    "section": "",
    "text": "scales.scale_fill_grey()\nSequential grey color scale.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstart\n\n\nfloat\n\n\ngrey value at low end of palette. Default is 0.2\n\n\nrequired\n\n\n\n\nend\n\n\nfloat\n\n\ngrey value at high end of palette Default is 0.8\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_gray.html#parameters",
    "href": "reference/scale_fill_gray.html#parameters",
    "title": "scale_fill_gray",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstart\n\n\nfloat\n\n\ngrey value at low end of palette. Default is 0.2\n\n\nrequired\n\n\n\n\nend\n\n\nfloat\n\n\ngrey value at high end of palette Default is 0.8\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_gradient2.html",
    "href": "reference/scale_fill_gradient2.html",
    "title": "scale_fill_gradient2",
    "section": "",
    "text": "scales.scale_fill_gradient2()\nCreate a 3 point diverging color gradient\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlow\n\n\nstr\n\n\nlow color\n\n\nrequired\n\n\n\n\nmid\n\n\nstr\n\n\nmid point color\n\n\nrequired\n\n\n\n\nhigh\n\n\nstr\n\n\nhigh color\n\n\nrequired\n\n\n\n\nmidpoint\n\n\nfloat, optional (Default: 0)\n\n\nMid point of the input data range.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_gradient2.html#parameters",
    "href": "reference/scale_fill_gradient2.html#parameters",
    "title": "scale_fill_gradient2",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlow\n\n\nstr\n\n\nlow color\n\n\nrequired\n\n\n\n\nmid\n\n\nstr\n\n\nmid point color\n\n\nrequired\n\n\n\n\nhigh\n\n\nstr\n\n\nhigh color\n\n\nrequired\n\n\n\n\nmidpoint\n\n\nfloat, optional (Default: 0)\n\n\nMid point of the input data range.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_distiller.html",
    "href": "reference/scale_fill_distiller.html",
    "title": "scale_fill_distiller",
    "section": "",
    "text": "scales.scale_fill_distiller()\nSequential, diverging continuous color scales\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntype\n\n\nstr in ['seq', 'div']\n\n\nType of data. Sequential, diverging or qualitative\n\n\nrequired\n\n\n\n\npalette\n\n\nint | str\n\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type. Default is 1\n\n\nrequired\n\n\n\n\nvalues\n\n\nlist\n\n\nlist of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors\n\n\nrequired\n\n\n\n\ndirection\n\n\n\n\nSets the order of colors in the scale. If 1 colors are as output by mizani.palettes.brewer_pal(). If -1, the default, the order of colors is reversed.\n\n\nrequired\n\n\n\n\ncolors\n\n\nlist\n\n\nlist of colors\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_distiller.html#parameters",
    "href": "reference/scale_fill_distiller.html#parameters",
    "title": "scale_fill_distiller",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntype\n\n\nstr in ['seq', 'div']\n\n\nType of data. Sequential, diverging or qualitative\n\n\nrequired\n\n\n\n\npalette\n\n\nint | str\n\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type. Default is 1\n\n\nrequired\n\n\n\n\nvalues\n\n\nlist\n\n\nlist of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors\n\n\nrequired\n\n\n\n\ndirection\n\n\n\n\nSets the order of colors in the scale. If 1 colors are as output by mizani.palettes.brewer_pal(). If -1, the default, the order of colors is reversed.\n\n\nrequired\n\n\n\n\ncolors\n\n\nlist\n\n\nlist of colors\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_desaturate.html",
    "href": "reference/scale_fill_desaturate.html",
    "title": "scale_fill_desaturate",
    "section": "",
    "text": "scales.scale_fill_desaturate()\nCreate a desaturated color gradient\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncolor\n\n\nstr, optional (Default: ‘red’)\n\n\nColor to desaturate\n\n\nrequired\n\n\n\n\nprop\n\n\nfloat, optional (Default: 0)\n\n\nSaturation channel of color will be multiplied by this value.\n\n\nrequired\n\n\n\n\nreverse\n\n\nbool, optional (Default: False)\n\n\nWhether to go from color to desaturated color or desaturated color to color.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_desaturate.html#parameters",
    "href": "reference/scale_fill_desaturate.html#parameters",
    "title": "scale_fill_desaturate",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncolor\n\n\nstr, optional (Default: ‘red’)\n\n\nColor to desaturate\n\n\nrequired\n\n\n\n\nprop\n\n\nfloat, optional (Default: 0)\n\n\nSaturation channel of color will be multiplied by this value.\n\n\nrequired\n\n\n\n\nreverse\n\n\nbool, optional (Default: False)\n\n\nWhether to go from color to desaturated color or desaturated color to color.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_continuous.html",
    "href": "reference/scale_fill_continuous.html",
    "title": "scale_fill_continuous",
    "section": "",
    "text": "scales.scale_fill_cmap()\nCreate color scales using Matplotlib colormaps\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\nrequired\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_continuous.html#parameters",
    "href": "reference/scale_fill_continuous.html#parameters",
    "title": "scale_fill_continuous",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\nrequired\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_brewer.html",
    "href": "reference/scale_fill_brewer.html",
    "title": "scale_fill_brewer",
    "section": "",
    "text": "scales.scale_fill_brewer()\nSequential, diverging and qualitative color scales\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntype\n\n\nstr in ['seq', 'div', 'qual']\n\n\nType of data. Sequential, diverging or qualitative\n\n\nrequired\n\n\n\n\npalette\n\n\nint | str\n\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type. Default is 1\n\n\nrequired\n\n\n\n\ndirection\n\n\n\n\nSets the order of colors in the scale. If 1, the default, colors are as output by mizani.palettes.brewer_pal(). If -1, the order of colors is reversed.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_brewer.html#parameters",
    "href": "reference/scale_fill_brewer.html#parameters",
    "title": "scale_fill_brewer",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntype\n\n\nstr in ['seq', 'div', 'qual']\n\n\nType of data. Sequential, diverging or qualitative\n\n\nrequired\n\n\n\n\npalette\n\n\nint | str\n\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type. Default is 1\n\n\nrequired\n\n\n\n\ndirection\n\n\n\n\nSets the order of colors in the scale. If 1, the default, colors are as output by mizani.palettes.brewer_pal(). If -1, the order of colors is reversed.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_datetime.html",
    "href": "reference/scale_datetime.html",
    "title": "scale_datetime",
    "section": "",
    "text": "scales.scale_datetime.scale_datetime(self, **kwargs)\nBase class for all date/datetime scales\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_datetime.html#parameters",
    "href": "reference/scale_datetime.html#parameters",
    "title": "scale_datetime",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_colour_manual.html",
    "href": "reference/scale_colour_manual.html",
    "title": "scale_colour_manual",
    "section": "",
    "text": "scales.scale_colour_manual()\nCustom discrete color scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nColors that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to colors.\n\n\nrequired\n\n\n\n\nbreaks : array_like or callable, optional Major break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks. expand : tuple, optional Multiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order::\n    (mul, add)\n    (mul_low, add_low, mul_high, add_high)\n\nFor example,\n\n    - ``(0, 0)`` - Do not expand.\n    - ``(0, 1)`` - Expand lower and upper limits by 1 unit.\n    - ``(1, 0)`` - Expand lower and upper limits by 100%.\n    - ``(0, 0, 0, 0)`` - Do not expand, as ``(0, 0)``.\n    - ``(0, 0, 0, 1)`` - Expand upper limit by 1 unit.\n    - ``(0, 1, 0.1, 0)`` - Expand lower limit by 1 unit and\n      upper limit by 10%.\n    - ``(0, 0, 0.1, 2)`` - Expand upper limit by 10% plus\n      2 units.\n\nIf not specified, suitable defaults are chosen.\nname : str, optional Name used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale. labels : list or callable, optional List of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings. palette : callable, optional Function to map data points onto the scale. Most scales define their own palettes. aesthetics : list, optional list of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun. limits : array_like, optional Limits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value. drop : bool Whether to drop unused categories from the scale na_translate : bool If True translate missing values and show them. If False remove missing values. Default value is True na_value : object If na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right."
  },
  {
    "objectID": "reference/scale_colour_manual.html#parameters",
    "href": "reference/scale_colour_manual.html#parameters",
    "title": "scale_colour_manual",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nColors that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to colors.\n\n\nrequired\n\n\n\n\nbreaks : array_like or callable, optional Major break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks. expand : tuple, optional Multiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order::\n    (mul, add)\n    (mul_low, add_low, mul_high, add_high)\n\nFor example,\n\n    - ``(0, 0)`` - Do not expand.\n    - ``(0, 1)`` - Expand lower and upper limits by 1 unit.\n    - ``(1, 0)`` - Expand lower and upper limits by 100%.\n    - ``(0, 0, 0, 0)`` - Do not expand, as ``(0, 0)``.\n    - ``(0, 0, 0, 1)`` - Expand upper limit by 1 unit.\n    - ``(0, 1, 0.1, 0)`` - Expand lower limit by 1 unit and\n      upper limit by 10%.\n    - ``(0, 0, 0.1, 2)`` - Expand upper limit by 10% plus\n      2 units.\n\nIf not specified, suitable defaults are chosen.\nname : str, optional Name used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale. labels : list or callable, optional List of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings. palette : callable, optional Function to map data points onto the scale. Most scales define their own palettes. aesthetics : list, optional list of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun. limits : array_like, optional Limits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value. drop : bool Whether to drop unused categories from the scale na_translate : bool If True translate missing values and show them. If False remove missing values. Default value is True na_value : object If na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right."
  },
  {
    "objectID": "reference/scale_color_manual.html",
    "href": "reference/scale_color_manual.html",
    "title": "scale_color_manual",
    "section": "",
    "text": "scales.scale_color_manual()\nCustom discrete color scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nColors that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to colors.\n\n\nrequired\n\n\n\n\nbreaks : array_like or callable, optional Major break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks. expand : tuple, optional Multiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order::\n    (mul, add)\n    (mul_low, add_low, mul_high, add_high)\n\nFor example,\n\n    - ``(0, 0)`` - Do not expand.\n    - ``(0, 1)`` - Expand lower and upper limits by 1 unit.\n    - ``(1, 0)`` - Expand lower and upper limits by 100%.\n    - ``(0, 0, 0, 0)`` - Do not expand, as ``(0, 0)``.\n    - ``(0, 0, 0, 1)`` - Expand upper limit by 1 unit.\n    - ``(0, 1, 0.1, 0)`` - Expand lower limit by 1 unit and\n      upper limit by 10%.\n    - ``(0, 0, 0.1, 2)`` - Expand upper limit by 10% plus\n      2 units.\n\nIf not specified, suitable defaults are chosen.\nname : str, optional Name used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale. labels : list or callable, optional List of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings. palette : callable, optional Function to map data points onto the scale. Most scales define their own palettes. aesthetics : list, optional list of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun. limits : array_like, optional Limits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value. drop : bool Whether to drop unused categories from the scale na_translate : bool If True translate missing values and show them. If False remove missing values. Default value is True na_value : object If na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right."
  },
  {
    "objectID": "reference/scale_color_manual.html#parameters",
    "href": "reference/scale_color_manual.html#parameters",
    "title": "scale_color_manual",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nColors that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to colors.\n\n\nrequired\n\n\n\n\nbreaks : array_like or callable, optional Major break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks. expand : tuple, optional Multiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order::\n    (mul, add)\n    (mul_low, add_low, mul_high, add_high)\n\nFor example,\n\n    - ``(0, 0)`` - Do not expand.\n    - ``(0, 1)`` - Expand lower and upper limits by 1 unit.\n    - ``(1, 0)`` - Expand lower and upper limits by 100%.\n    - ``(0, 0, 0, 0)`` - Do not expand, as ``(0, 0)``.\n    - ``(0, 0, 0, 1)`` - Expand upper limit by 1 unit.\n    - ``(0, 1, 0.1, 0)`` - Expand lower limit by 1 unit and\n      upper limit by 10%.\n    - ``(0, 0, 0.1, 2)`` - Expand upper limit by 10% plus\n      2 units.\n\nIf not specified, suitable defaults are chosen.\nname : str, optional Name used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale. labels : list or callable, optional List of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings. palette : callable, optional Function to map data points onto the scale. Most scales define their own palettes. aesthetics : list, optional list of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun. limits : array_like, optional Limits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value. drop : bool Whether to drop unused categories from the scale na_translate : bool If True translate missing values and show them. If False remove missing values. Default value is True na_value : object If na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right."
  },
  {
    "objectID": "reference/scale_color_hue.html",
    "href": "reference/scale_color_hue.html",
    "title": "scale_color_hue",
    "section": "",
    "text": "scales.scale_color_hue(self, h=0.01, l=0.6, s=0.65, color_space='hls', **kwargs)\nQualitative color scale with evenly spaced hues\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nh\n\n\nfloat\n\n\nfirst hue. Must be in the range [0, 1] Default is 0.01\n\n\n0.01\n\n\n\n\nl\n\n\nfloat\n\n\nlightness. Must be in the range [0, 1] Default is 0.6\n\n\n0.6\n\n\n\n\ns\n\n\nfloat\n\n\nsaturation. Must be in the range [0, 1] Default is 0.65\n\n\n0.65\n\n\n\n\ncolorspace\n\n\nstr in ['hls', 'husl']\n\n\nColor space to use. hls &lt;https://en.wikipedia.org/wiki/HSL_and_HSV&gt;_ husl &lt;http://www.husl-colors.org/&gt;_\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is '#7F7F7F'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_hue.html#parameters",
    "href": "reference/scale_color_hue.html#parameters",
    "title": "scale_color_hue",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nh\n\n\nfloat\n\n\nfirst hue. Must be in the range [0, 1] Default is 0.01\n\n\n0.01\n\n\n\n\nl\n\n\nfloat\n\n\nlightness. Must be in the range [0, 1] Default is 0.6\n\n\n0.6\n\n\n\n\ns\n\n\nfloat\n\n\nsaturation. Must be in the range [0, 1] Default is 0.65\n\n\n0.65\n\n\n\n\ncolorspace\n\n\nstr in ['hls', 'husl']\n\n\nColor space to use. hls &lt;https://en.wikipedia.org/wiki/HSL_and_HSV&gt;_ husl &lt;http://www.husl-colors.org/&gt;_\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is '#7F7F7F'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_gray.html",
    "href": "reference/scale_color_gray.html",
    "title": "scale_color_gray",
    "section": "",
    "text": "scales.scale_color_grey(self, start=0.2, end=0.8, **kwargs)\nSequential grey color scale.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstart\n\n\nfloat\n\n\ngrey value at low end of palette. Default is 0.2\n\n\n0.2\n\n\n\n\nend\n\n\nfloat\n\n\ngrey value at high end of palette Default is 0.8\n\n\n0.8\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_gray.html#parameters",
    "href": "reference/scale_color_gray.html#parameters",
    "title": "scale_color_gray",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstart\n\n\nfloat\n\n\ngrey value at low end of palette. Default is 0.2\n\n\n0.2\n\n\n\n\nend\n\n\nfloat\n\n\ngrey value at high end of palette Default is 0.8\n\n\n0.8\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_gradient2.html",
    "href": "reference/scale_color_gradient2.html",
    "title": "scale_color_gradient2",
    "section": "",
    "text": "scales.scale_color_gradient2(self, low='#832424', mid='#FFFFFF', high='#3A3A98', midpoint=0, **kwargs)\nCreate a 3 point diverging color gradient\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlow\n\n\nstr\n\n\nlow color\n\n\n'#832424'\n\n\n\n\nmid\n\n\nstr\n\n\nmid point color\n\n\n'#FFFFFF'\n\n\n\n\nhigh\n\n\nstr\n\n\nhigh color\n\n\n'#3A3A98'\n\n\n\n\nmidpoint\n\n\nfloat, optional (Default: 0)\n\n\nMid point of the input data range.\n\n\n0\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired\n\n\n\n\n\n\n\n\n.scale_color_gradient\n.scale_color_gradientn"
  },
  {
    "objectID": "reference/scale_color_gradient2.html#parameters",
    "href": "reference/scale_color_gradient2.html#parameters",
    "title": "scale_color_gradient2",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlow\n\n\nstr\n\n\nlow color\n\n\n'#832424'\n\n\n\n\nmid\n\n\nstr\n\n\nmid point color\n\n\n'#FFFFFF'\n\n\n\n\nhigh\n\n\nstr\n\n\nhigh color\n\n\n'#3A3A98'\n\n\n\n\nmidpoint\n\n\nfloat, optional (Default: 0)\n\n\nMid point of the input data range.\n\n\n0\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_gradient2.html#see-also",
    "href": "reference/scale_color_gradient2.html#see-also",
    "title": "scale_color_gradient2",
    "section": "",
    "text": ".scale_color_gradient\n.scale_color_gradientn"
  },
  {
    "objectID": "reference/scale_color_distiller.html",
    "href": "reference/scale_color_distiller.html",
    "title": "scale_color_distiller",
    "section": "",
    "text": "scales.scale_color_distiller(self, type='seq', palette=1, values=None, direction=-1, **kwargs)\nSequential and diverging continuous color scales\nThis is a convinience scale around .scale_color_gradientn with colors from colorbrewer.org &lt;http://colorbrewer2.org/&gt;_. It smoothly interpolates 7 colors from a brewer palette to create a continuous palette.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntype\n\n\nstr in ['seq', 'div']\n\n\nType of data. Sequential, diverging or qualitative\n\n\n'seq'\n\n\n\n\npalette\n\n\nint | str\n\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type. Default is 1\n\n\n1\n\n\n\n\nvalues\n\n\nlist\n\n\nlist of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors\n\n\nNone\n\n\n\n\ndirection\n\n\ntyping.Literal[1, -1]\n\n\nSets the order of colors in the scale. If 1 colors are as output by mizani.palettes.brewer_pal(). If -1, the default, the order of colors is reversed.\n\n\n-1\n\n\n\n\ncolors\n\n\nlist\n\n\nlist of colors\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_distiller.html#parameters",
    "href": "reference/scale_color_distiller.html#parameters",
    "title": "scale_color_distiller",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntype\n\n\nstr in ['seq', 'div']\n\n\nType of data. Sequential, diverging or qualitative\n\n\n'seq'\n\n\n\n\npalette\n\n\nint | str\n\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type. Default is 1\n\n\n1\n\n\n\n\nvalues\n\n\nlist\n\n\nlist of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors\n\n\nNone\n\n\n\n\ndirection\n\n\ntyping.Literal[1, -1]\n\n\nSets the order of colors in the scale. If 1 colors are as output by mizani.palettes.brewer_pal(). If -1, the default, the order of colors is reversed.\n\n\n-1\n\n\n\n\ncolors\n\n\nlist\n\n\nlist of colors\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_desaturate.html",
    "href": "reference/scale_color_desaturate.html",
    "title": "scale_color_desaturate",
    "section": "",
    "text": "scales.scale_color_desaturate(self, color='red', prop=0, reverse=False, **kwargs)\nCreate a desaturated color gradient\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncolor\n\n\nstr, optional (Default: ‘red’)\n\n\nColor to desaturate\n\n\n'red'\n\n\n\n\nprop\n\n\nfloat, optional (Default: 0)\n\n\nSaturation channel of color will be multiplied by this value.\n\n\n0\n\n\n\n\nreverse\n\n\nbool, optional (Default: False)\n\n\nWhether to go from color to desaturated color or desaturated color to color.\n\n\nFalse\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_desaturate.html#parameters",
    "href": "reference/scale_color_desaturate.html#parameters",
    "title": "scale_color_desaturate",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncolor\n\n\nstr, optional (Default: ‘red’)\n\n\nColor to desaturate\n\n\n'red'\n\n\n\n\nprop\n\n\nfloat, optional (Default: 0)\n\n\nSaturation channel of color will be multiplied by this value.\n\n\n0\n\n\n\n\nreverse\n\n\nbool, optional (Default: False)\n\n\nWhether to go from color to desaturated color or desaturated color to color.\n\n\nFalse\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_continuous.html",
    "href": "reference/scale_color_continuous.html",
    "title": "scale_color_continuous",
    "section": "",
    "text": "scales.scale_color_cmap(self, cmap_name='viridis', **kwargs)\nCreate color scales using Matplotlib colormaps\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\n'viridis'\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired\n\n\n\n\n\n\n\n\nmatplotlib.cm\nmatplotlib.colors"
  },
  {
    "objectID": "reference/scale_color_continuous.html#parameters",
    "href": "reference/scale_color_continuous.html#parameters",
    "title": "scale_color_continuous",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\n'viridis'\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_continuous.html#see-also",
    "href": "reference/scale_color_continuous.html#see-also",
    "title": "scale_color_continuous",
    "section": "",
    "text": "matplotlib.cm\nmatplotlib.colors"
  },
  {
    "objectID": "reference/scale_color_brewer.html",
    "href": "reference/scale_color_brewer.html",
    "title": "scale_color_brewer",
    "section": "",
    "text": "scales.scale_color_brewer(self, type='seq', palette=1, direction=1, **kwargs)\nSequential, diverging and qualitative discrete color scales\nSee colorbrewer.org &lt;http://colorbrewer2.org/&gt;_\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntype\n\n\nstr in ['seq', 'div', 'qual']\n\n\nType of data. Sequential, diverging or qualitative\n\n\n'seq'\n\n\n\n\npalette\n\n\nint | str\n\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type. Default is 1\n\n\n1\n\n\n\n\ndirection\n\n\ntyping.Literal[1, -1]\n\n\nSets the order of colors in the scale. If 1, the default, colors are as output by mizani.palettes.brewer_pal(). If -1, the order of colors is reversed.\n\n\n1\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_brewer.html#parameters",
    "href": "reference/scale_color_brewer.html#parameters",
    "title": "scale_color_brewer",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntype\n\n\nstr in ['seq', 'div', 'qual']\n\n\nType of data. Sequential, diverging or qualitative\n\n\n'seq'\n\n\n\n\npalette\n\n\nint | str\n\n\nIf a string, will use that named palette. If a number, will index into the list of palettes of appropriate type. Default is 1\n\n\n1\n\n\n\n\ndirection\n\n\ntyping.Literal[1, -1]\n\n\nSets the order of colors in the scale. If 1, the default, colors are as output by mizani.palettes.brewer_pal(). If -1, the order of colors is reversed.\n\n\n1\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_alpha_identity.html",
    "href": "reference/scale_alpha_identity.html",
    "title": "scale_alpha_identity",
    "section": "",
    "text": "scales.scale_identity.scale_alpha_identity()\nNo alpha scaling\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_alpha_identity.html#parameters",
    "href": "reference/scale_alpha_identity.html#parameters",
    "title": "scale_alpha_identity",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_alpha_datetime.html",
    "href": "reference/scale_alpha_datetime.html",
    "title": "scale_alpha_datetime",
    "section": "",
    "text": "scales.scale_alpha.scale_alpha_datetime(self, range=(0.1, 1), **kwargs)\nDatetime Alpha Scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1. Default is (0.1, 1)\n\n\n(0.1, 1)\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_alpha_datetime.html#parameters",
    "href": "reference/scale_alpha_datetime.html#parameters",
    "title": "scale_alpha_datetime",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1. Default is (0.1, 1)\n\n\n(0.1, 1)\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_alpha.html",
    "href": "reference/scale_alpha.html",
    "title": "scale_alpha",
    "section": "",
    "text": "scales.scale_alpha.scale_alpha(self, range=(0.1, 1), **kwargs)\nContinuous Alpha Scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1. Default is (0.1, 1)\n\n\n(0.1, 1)\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_alpha.html#parameters",
    "href": "reference/scale_alpha.html#parameters",
    "title": "scale_alpha",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1. Default is (0.1, 1)\n\n\n(0.1, 1)\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/save_as_pdf_pages.html",
    "href": "reference/save_as_pdf_pages.html",
    "title": "save_as_pdf_pages",
    "section": "",
    "text": "save_as_pdf_pages(plots, filename=None, path=None, verbose=True, **kwargs)\nSave multiple ggplot objects to a PDF file, one per page.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nplots\n\n\ncollection or generator of ggplot\n\n\nPlot objects to write to file. plots may be either a collection such as a list or set: &gt;&gt;&gt; base_plot = ggplot(…) &gt;&gt;&gt; plots = [base_plot + ggtitle(‘%d of 3’ % i) for i in range(1, 3)] &gt;&gt;&gt; save_as_pdf_pages(plots) or, a generator that yields ggplot objects: &gt;&gt;&gt; def myplots(): &gt;&gt;&gt; for i in range(1, 3): &gt;&gt;&gt; yield ggplot(…) + ggtitle(‘%d of 3’ % i) &gt;&gt;&gt; save_as_pdf_pages(myplots())\n\n\nrequired\n\n\n\n\n\n\n\nUsing pandas’ groupby methods, tidy data can be “faceted” across pages:\n\n\n\nfrom plotnine.data import mtcars def facet_pages(column) base_plot = [ aes(x=‘wt’, y=‘mpg’, label=‘name’), geom_text(), ] for label, group_data in mtcars.groupby(column): yield ggplot(group_data) + base_plot + ggtitle(label) save_as_pdf_pages(facet_pages(‘cyl’))\n\n\n\nUnlike ggplot.save, save_as_pdf_pages does not process arguments for height or width. To set the figure size, add figure_size to the theme for some or all of the objects in plots:\n\n\n\nplot = ggplot(…) # The following are equivalent plot.save(‘filename.pdf’, height=6, width=8) save_as_pdf_pages([plot + theme(figure_size=(8, 6))])"
  },
  {
    "objectID": "reference/save_as_pdf_pages.html#parameters",
    "href": "reference/save_as_pdf_pages.html#parameters",
    "title": "save_as_pdf_pages",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nplots\n\n\ncollection or generator of ggplot\n\n\nPlot objects to write to file. plots may be either a collection such as a list or set: &gt;&gt;&gt; base_plot = ggplot(…) &gt;&gt;&gt; plots = [base_plot + ggtitle(‘%d of 3’ % i) for i in range(1, 3)] &gt;&gt;&gt; save_as_pdf_pages(plots) or, a generator that yields ggplot objects: &gt;&gt;&gt; def myplots(): &gt;&gt;&gt; for i in range(1, 3): &gt;&gt;&gt; yield ggplot(…) + ggtitle(‘%d of 3’ % i) &gt;&gt;&gt; save_as_pdf_pages(myplots())\n\n\nrequired"
  },
  {
    "objectID": "reference/save_as_pdf_pages.html#notes",
    "href": "reference/save_as_pdf_pages.html#notes",
    "title": "save_as_pdf_pages",
    "section": "",
    "text": "Using pandas’ groupby methods, tidy data can be “faceted” across pages:\n\n\n\nfrom plotnine.data import mtcars def facet_pages(column) base_plot = [ aes(x=‘wt’, y=‘mpg’, label=‘name’), geom_text(), ] for label, group_data in mtcars.groupby(column): yield ggplot(group_data) + base_plot + ggtitle(label) save_as_pdf_pages(facet_pages(‘cyl’))\n\n\n\nUnlike ggplot.save, save_as_pdf_pages does not process arguments for height or width. To set the figure size, add figure_size to the theme for some or all of the objects in plots:\n\n\n\nplot = ggplot(…) # The following are equivalent plot.save(‘filename.pdf’, height=6, width=8) save_as_pdf_pages([plot + theme(figure_size=(8, 6))])"
  },
  {
    "objectID": "reference/qplot.html",
    "href": "reference/qplot.html",
    "title": "qplot",
    "section": "",
    "text": "qplot(x=None, y=None, data=None, facets='', margins=False, geom='auto', xlim=None, ylim=None, log=None, main=None, xlab=None, ylab=None, asp=None, **kwargs)\nQuick plot\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nstr | array_like\n\n\nx aesthetic\n\n\nNone\n\n\n\n\ny\n\n\nstr | array_like\n\n\ny aesthetic\n\n\nNone\n\n\n\n\ndata\n\n\ndataframe\n\n\nData frame to use (optional). If not specified, will create one, extracting arrays from the current environment.\n\n\nNone\n\n\n\n\ngeom\n\n\nstr | list\n\n\ngeom(s) to do the drawing. If auto, defaults to ‘point’ if x and y are specified or ‘histogram’ if only x is specified.\n\n\n'auto'\n\n\n\n\nfacets\n\n\nstr\n\n\nFacets\n\n\n''\n\n\n\n\nmargins\n\n\nbool | list[str]\n\n\nvariable names to compute margins for. True will compute all possible margins. Depends on the facetting.\n\n\nFalse\n\n\n\n\nxlim\n\n\ntuple\n\n\nx-axis limits\n\n\nNone\n\n\n\n\nylim\n\n\ntuple\n\n\ny-axis limits\n\n\nNone\n\n\n\n\nlog\n\n\nstr in {'x', 'y', 'xy'}\n\n\nWhich (if any) variables to log transform.\n\n\nNone\n\n\n\n\nmain\n\n\nstr\n\n\nPlot title\n\n\nNone\n\n\n\n\nxlab\n\n\nstr\n\n\nx-axis label\n\n\nNone\n\n\n\n\nylab\n\n\nstr\n\n\ny-axis label\n\n\nNone\n\n\n\n\nasp\n\n\nstr | float\n\n\nThe y/x aspect ratio.\n\n\nNone\n\n\n\n\n**kwargs\n\n\ndict\n\n\nArguments passed on to the geom.\n\n\n{}\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nggplot\n\n\nggplot object"
  },
  {
    "objectID": "reference/qplot.html#parameters",
    "href": "reference/qplot.html#parameters",
    "title": "qplot",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nstr | array_like\n\n\nx aesthetic\n\n\nNone\n\n\n\n\ny\n\n\nstr | array_like\n\n\ny aesthetic\n\n\nNone\n\n\n\n\ndata\n\n\ndataframe\n\n\nData frame to use (optional). If not specified, will create one, extracting arrays from the current environment.\n\n\nNone\n\n\n\n\ngeom\n\n\nstr | list\n\n\ngeom(s) to do the drawing. If auto, defaults to ‘point’ if x and y are specified or ‘histogram’ if only x is specified.\n\n\n'auto'\n\n\n\n\nfacets\n\n\nstr\n\n\nFacets\n\n\n''\n\n\n\n\nmargins\n\n\nbool | list[str]\n\n\nvariable names to compute margins for. True will compute all possible margins. Depends on the facetting.\n\n\nFalse\n\n\n\n\nxlim\n\n\ntuple\n\n\nx-axis limits\n\n\nNone\n\n\n\n\nylim\n\n\ntuple\n\n\ny-axis limits\n\n\nNone\n\n\n\n\nlog\n\n\nstr in {'x', 'y', 'xy'}\n\n\nWhich (if any) variables to log transform.\n\n\nNone\n\n\n\n\nmain\n\n\nstr\n\n\nPlot title\n\n\nNone\n\n\n\n\nxlab\n\n\nstr\n\n\nx-axis label\n\n\nNone\n\n\n\n\nylab\n\n\nstr\n\n\ny-axis label\n\n\nNone\n\n\n\n\nasp\n\n\nstr | float\n\n\nThe y/x aspect ratio.\n\n\nNone\n\n\n\n\n**kwargs\n\n\ndict\n\n\nArguments passed on to the geom.\n\n\n{}"
  },
  {
    "objectID": "reference/qplot.html#returns",
    "href": "reference/qplot.html#returns",
    "title": "qplot",
    "section": "",
    "text": "Type\n\n\nDescription\n\n\n\n\n\n\nggplot\n\n\nggplot object"
  },
  {
    "objectID": "reference/position_stack.html",
    "href": "reference/position_stack.html",
    "title": "position_stack",
    "section": "",
    "text": "position_stack\npositions.position_stack(self, vjust=1, reverse=False)\nStack plotted objects on top of each other\nThe objects to stack are those that have an overlapping x range."
  },
  {
    "objectID": "reference/position_jitterdodge.html",
    "href": "reference/position_jitterdodge.html",
    "title": "position_jitterdodge",
    "section": "",
    "text": "positions.position_jitterdodge(self, jitter_width=None, jitter_height=0, dodge_width=0.75, random_state=None)\nDodge and jitter to minimise overlap\nUseful when aligning points generated through geom_point with dodged a geom_boxplot.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\njitter_width\n\n\nfloat\n\n\nProportion to jitter in horizontal direction. Default is 0.4 of the resolution of the data.\n\n\nNone\n\n\n\n\njitter_height\n\n\nfloat\n\n\nProportion to jitter in vertical direction. Default is 0.0 of the resolution of the data.\n\n\n0\n\n\n\n\ndodge_width\n\n\nfloat\n\n\nAmount to dodge in horizontal direction. Default is 0.75\n\n\n0.75\n\n\n\n\nrandom_state\n\n\nint or ~numpy.random.RandomState\n\n\nSeed or Random number generator to use. If None, then numpy global generator numpy.random is used.\n\n\nNone"
  },
  {
    "objectID": "reference/position_jitterdodge.html#parameters",
    "href": "reference/position_jitterdodge.html#parameters",
    "title": "position_jitterdodge",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\njitter_width\n\n\nfloat\n\n\nProportion to jitter in horizontal direction. Default is 0.4 of the resolution of the data.\n\n\nNone\n\n\n\n\njitter_height\n\n\nfloat\n\n\nProportion to jitter in vertical direction. Default is 0.0 of the resolution of the data.\n\n\n0\n\n\n\n\ndodge_width\n\n\nfloat\n\n\nAmount to dodge in horizontal direction. Default is 0.75\n\n\n0.75\n\n\n\n\nrandom_state\n\n\nint or ~numpy.random.RandomState\n\n\nSeed or Random number generator to use. If None, then numpy global generator numpy.random is used.\n\n\nNone"
  },
  {
    "objectID": "reference/position_identity.html",
    "href": "reference/position_identity.html",
    "title": "position_identity",
    "section": "",
    "text": "position_identity\npositions.position_identity()\nDo not adjust the position"
  },
  {
    "objectID": "reference/position_dodge2.html",
    "href": "reference/position_dodge2.html",
    "title": "position_dodge2",
    "section": "",
    "text": "positions.position_dodge2(self, width=None, preserve='total', padding=0.1, reverse=False)\nDodge overlaps and place objects side-by-side\nThis is an enhanced version of position_dodge that can deal with rectangular overlaps that do not share a lower x border.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nwidth\n\n\n\n\nDodging width, when different to the width of the individual elements. This is useful when you want to align narrow geoms with wider geoms\n\n\nNone\n\n\n\n\npreserve\n\n\n\n\nShould dodging preserve the total width of all elements at a position, or the width of a single element?\n\n\n'total'\n\n\n\n\npadding\n\n\nfloat\n\n\nPadding between elements at the same position. Elements are shrunk by this proportion to allow space between them (Default: 0.1)\n\n\n0.1\n\n\n\n\nreverse\n\n\nbool\n\n\nReverse the default ordering of the groups. This is useful if you’re rotating both the plot and legend. (Default: False)\n\n\nFalse"
  },
  {
    "objectID": "reference/position_dodge2.html#parameters",
    "href": "reference/position_dodge2.html#parameters",
    "title": "position_dodge2",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nwidth\n\n\n\n\nDodging width, when different to the width of the individual elements. This is useful when you want to align narrow geoms with wider geoms\n\n\nNone\n\n\n\n\npreserve\n\n\n\n\nShould dodging preserve the total width of all elements at a position, or the width of a single element?\n\n\n'total'\n\n\n\n\npadding\n\n\nfloat\n\n\nPadding between elements at the same position. Elements are shrunk by this proportion to allow space between them (Default: 0.1)\n\n\n0.1\n\n\n\n\nreverse\n\n\nbool\n\n\nReverse the default ordering of the groups. This is useful if you’re rotating both the plot and legend. (Default: False)\n\n\nFalse"
  },
  {
    "objectID": "reference/plot_title.html",
    "href": "reference/plot_title.html",
    "title": "plot_title",
    "section": "",
    "text": "themes.themeable.plot_title()\nPlot title\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/plot_title.html#parameters",
    "href": "reference/plot_title.html#parameters",
    "title": "plot_title",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/plot_background.html",
    "href": "reference/plot_background.html",
    "title": "plot_background",
    "section": "",
    "text": "themes.themeable.plot_background()\nPlot background\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/plot_background.html#parameters",
    "href": "reference/plot_background.html#parameters",
    "title": "plot_background",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_spacing_x.html",
    "href": "reference/panel_spacing_x.html",
    "title": "panel_spacing_x",
    "section": "",
    "text": "themes.themeable.panel_spacing_x()\nHorizontal spacing between the facet panels\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize as a fraction of the figure width.\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_spacing_x.html#parameters",
    "href": "reference/panel_spacing_x.html#parameters",
    "title": "panel_spacing_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize as a fraction of the figure width.\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_ontop.html",
    "href": "reference/panel_ontop.html",
    "title": "panel_ontop",
    "section": "",
    "text": "themes.themeable.panel_ontop()\nPlace panel background & gridlines over/under the data layers\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nbool\n\n\nDefault is False.\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_ontop.html#parameters",
    "href": "reference/panel_ontop.html#parameters",
    "title": "panel_ontop",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nbool\n\n\nDefault is False.\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_minor_x.html",
    "href": "reference/panel_grid_minor_x.html",
    "title": "panel_grid_minor_x",
    "section": "",
    "text": "themes.themeable.panel_grid_minor_x()\nVertical minor grid lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_minor_x.html#parameters",
    "href": "reference/panel_grid_minor_x.html#parameters",
    "title": "panel_grid_minor_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_major_y.html",
    "href": "reference/panel_grid_major_y.html",
    "title": "panel_grid_major_y",
    "section": "",
    "text": "themes.themeable.panel_grid_major_y()\nHorizontal major grid lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_major_y.html#parameters",
    "href": "reference/panel_grid_major_y.html#parameters",
    "title": "panel_grid_major_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_major.html",
    "href": "reference/panel_grid_major.html",
    "title": "panel_grid_major",
    "section": "",
    "text": "themes.themeable.panel_grid_major()\nMajor grid lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_major.html#parameters",
    "href": "reference/panel_grid_major.html#parameters",
    "title": "panel_grid_major",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_border.html",
    "href": "reference/panel_border.html",
    "title": "panel_border",
    "section": "",
    "text": "themes.themeable.panel_border()\nPanel border\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_border.html#parameters",
    "href": "reference/panel_border.html#parameters",
    "title": "panel_border",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/pageviews.html",
    "href": "reference/pageviews.html",
    "title": "pageviews",
    "section": "",
    "text": "pageviews\ndata.pageviews"
  },
  {
    "objectID": "reference/msleep.html",
    "href": "reference/msleep.html",
    "title": "msleep",
    "section": "",
    "text": "msleep\ndata.msleep\nAn updated and expanded version of the mammals sleep dataset.\n.. rubric:: Description\nThis is an updated and expanded version of the mammals sleep dataset. Updated sleep times and weights were taken from V. M. Savage and G. B. West. A quantitative, theoretical framework for understanding mammalian sleep. Proceedings of the National Academy of Sciences, 104 (3):1051-1056, 2007.\n.. rubric:: Format\nA data frame with 83 rows and 11 variables\n============= ===================================== Column Description ============= ===================================== name common name genus vore carnivore, omnivore or herbivore? order conservation the conservation status of the animal sleep_total total amount of sleep, in hours sleep_rem rem sleep, in hours sleep_cycle length of sleep cycle, in hours awake amount of time spent awake, in hours brainwt brain weight in kilograms bodywt body weight in kilograms ============= =====================================\n.. rubric:: Details\nAdditional variables order, conservation status and vore were added from wikipedia."
  },
  {
    "objectID": "reference/midwest.html",
    "href": "reference/midwest.html",
    "title": "midwest",
    "section": "",
    "text": "midwest\ndata.midwest\nMidwest demographics.\n.. rubric:: Description\nDemographic information of midwest counties\n.. rubric:: Format\nA data frame with 437 rows and 28 variables\n===================== ============================ Column Description ===================== ============================ PID county state area poptotal Total population popdensity Population density popwhite Number of whites popblack Number of blacks popamerindian Number of American Indians popasian Number of Asians popother Number of other races percwhite Percent white percblack Percent black percamerindan Percent American Indian percasian Percent Asian percother Percent other races popadults Number of adults perchsd percollege Percent college educated percprof Percent profession poppovertyknown percpovertyknown percbelowpoverty percchildbelowpovert percadultpoverty percelderlypoverty inmetro In a metro area category ===================== ============================"
  },
  {
    "objectID": "reference/luv_colours.html",
    "href": "reference/luv_colours.html",
    "title": "luv_colours",
    "section": "",
    "text": "luv_colours\ndata.luv_colours\ncolors in Luv space.\n.. rubric:: Description\nNamed colors translated into Luv colour space.\nluv_colours .. rubric:: Format\nA data frame with 657 observations and 4 variables:\n====== ============================ Column Description ====== ============================ L L position in Luv colour space u u position in Luv colour space v v position in Luv colour space col Colour name ====== ============================"
  },
  {
    "objectID": "reference/lims.html",
    "href": "reference/lims.html",
    "title": "lims",
    "section": "",
    "text": "scales.lims(self, **kwargs)\nSet aesthetic limits\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nkwargs\n\n\ndict\n\n\nAesthetic and the values of the limits. e.g x=(40, 100)\n\n\n{}\n\n\n\n\n\n\n\nIf the 2nd value of limits is less than the first, a reversed scale will be created."
  },
  {
    "objectID": "reference/lims.html#parameters",
    "href": "reference/lims.html#parameters",
    "title": "lims",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nkwargs\n\n\ndict\n\n\nAesthetic and the values of the limits. e.g x=(40, 100)\n\n\n{}"
  },
  {
    "objectID": "reference/lims.html#notes",
    "href": "reference/lims.html#notes",
    "title": "lims",
    "section": "",
    "text": "If the 2nd value of limits is less than the first, a reversed scale will be created."
  },
  {
    "objectID": "reference/legend_title.html",
    "href": "reference/legend_title.html",
    "title": "legend_title",
    "section": "",
    "text": "themes.themeable.legend_title()\nLegend title\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_title.html#parameters",
    "href": "reference/legend_title.html#parameters",
    "title": "legend_title",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_text_colorbar.html",
    "href": "reference/legend_text_colorbar.html",
    "title": "legend_text_colorbar",
    "section": "",
    "text": "themes.themeable.legend_text_colorbar()\nColorbar text\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired\n\n\n\n\n\n\n\nThis themeable exists mainly to cater for differences in how the text is aligned compared to the entry based legend. Unless you experience those alignment issues (i.e when using parameters va or ha), you should use legend_text."
  },
  {
    "objectID": "reference/legend_text_colorbar.html#parameters",
    "href": "reference/legend_text_colorbar.html#parameters",
    "title": "legend_text_colorbar",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_text_colorbar.html#notes",
    "href": "reference/legend_text_colorbar.html#notes",
    "title": "legend_text_colorbar",
    "section": "",
    "text": "This themeable exists mainly to cater for differences in how the text is aligned compared to the entry based legend. Unless you experience those alignment issues (i.e when using parameters va or ha), you should use legend_text."
  },
  {
    "objectID": "reference/legend_spacing.html",
    "href": "reference/legend_spacing.html",
    "title": "legend_spacing",
    "section": "",
    "text": "themes.themeable.legend_spacing()\nSpacing between two adjacent legends\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_spacing.html#parameters",
    "href": "reference/legend_spacing.html#parameters",
    "title": "legend_spacing",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_margin.html",
    "href": "reference/legend_margin.html",
    "title": "legend_margin",
    "section": "",
    "text": "themes.themeable.legend_margin()\nPadding between the legend and the inner box\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_margin.html#parameters",
    "href": "reference/legend_margin.html#parameters",
    "title": "legend_margin",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_key_size.html",
    "href": "reference/legend_key_size.html",
    "title": "legend_key_size",
    "section": "",
    "text": "themes.themeable.legend_key_size()\nLegend key background width and height\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_key_size.html#parameters",
    "href": "reference/legend_key_size.html#parameters",
    "title": "legend_key_size",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_key.html",
    "href": "reference/legend_key.html",
    "title": "legend_key",
    "section": "",
    "text": "themes.themeable.legend_key()\nLegend key background\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_key.html#parameters",
    "href": "reference/legend_key.html#parameters",
    "title": "legend_key",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_entry_spacing_x.html",
    "href": "reference/legend_entry_spacing_x.html",
    "title": "legend_entry_spacing_x",
    "section": "",
    "text": "themes.themeable.legend_entry_spacing_x()\nHorizontal spacing between two entries in a legend\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize in points\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_entry_spacing_x.html#parameters",
    "href": "reference/legend_entry_spacing_x.html#parameters",
    "title": "legend_entry_spacing_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize in points\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_direction.html",
    "href": "reference/legend_direction.html",
    "title": "legend_direction",
    "section": "",
    "text": "themes.themeable.legend_direction()\nLayout items in the legend\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr in ['vertical', 'horizontal']\n\n\nVertically or horizontally\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_direction.html#parameters",
    "href": "reference/legend_direction.html#parameters",
    "title": "legend_direction",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr in ['vertical', 'horizontal']\n\n\nVertically or horizontally\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_box_margin.html",
    "href": "reference/legend_box_margin.html",
    "title": "legend_box_margin",
    "section": "",
    "text": "themes.themeable.legend_box_margin()\nPadding between the legends and the box\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nint\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_box_margin.html#parameters",
    "href": "reference/legend_box_margin.html#parameters",
    "title": "legend_box_margin",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nint\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_box_background.html",
    "href": "reference/legend_box_background.html",
    "title": "legend_box_background",
    "section": "",
    "text": "themes.themeable.legend_box_background()\nLegend box background\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired\n\n\n\n\n\n\n\nNot Implemented. We would have to place the outermost VPacker/HPacker boxes that hold the individual legends onto an object that has a patch."
  },
  {
    "objectID": "reference/legend_box_background.html#parameters",
    "href": "reference/legend_box_background.html#parameters",
    "title": "legend_box_background",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_box_background.html#notes",
    "href": "reference/legend_box_background.html#notes",
    "title": "legend_box_background",
    "section": "",
    "text": "Not Implemented. We would have to place the outermost VPacker/HPacker boxes that hold the individual legends onto an object that has a patch."
  },
  {
    "objectID": "reference/legend_background.html",
    "href": "reference/legend_background.html",
    "title": "legend_background",
    "section": "",
    "text": "themes.themeable.legend_background()\nLegend background\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_background.html#parameters",
    "href": "reference/legend_background.html#parameters",
    "title": "legend_background",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/labs.html",
    "href": "reference/labs.html",
    "title": "labs",
    "section": "",
    "text": "labels.labs(self, **kwargs)\nAdd labels for aesthetics and/or title\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nkwargs\n\n\ndict\n\n\nAesthetics (with scales) to be renamed. You can also set the title and caption.\n\n\n{}"
  },
  {
    "objectID": "reference/labs.html#parameters",
    "href": "reference/labs.html#parameters",
    "title": "labs",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nkwargs\n\n\ndict\n\n\nAesthetics (with scales) to be renamed. You can also set the title and caption.\n\n\n{}"
  },
  {
    "objectID": "reference/labelling.label_value.html",
    "href": "reference/labelling.label_value.html",
    "title": "labelling.label_value",
    "section": "",
    "text": "facets.labelling.label_value(label_info, multi_line=True)\nKeep value as the label\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlabel_info\n\n\nstrip_label_details\n\n\nLabel information whose values will be returned\n\n\nrequired\n\n\n\n\nmulti_line\n\n\nbool\n\n\nWhether to place each variable on a separate line\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nstrip_label_details\n\n\nLabel text strings"
  },
  {
    "objectID": "reference/labelling.label_value.html#parameters",
    "href": "reference/labelling.label_value.html#parameters",
    "title": "labelling.label_value",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlabel_info\n\n\nstrip_label_details\n\n\nLabel information whose values will be returned\n\n\nrequired\n\n\n\n\nmulti_line\n\n\nbool\n\n\nWhether to place each variable on a separate line\n\n\nTrue"
  },
  {
    "objectID": "reference/labelling.label_value.html#returns",
    "href": "reference/labelling.label_value.html#returns",
    "title": "labelling.label_value",
    "section": "",
    "text": "Type\n\n\nDescription\n\n\n\n\n\n\nstrip_label_details\n\n\nLabel text strings"
  },
  {
    "objectID": "reference/labelling.label_both.html",
    "href": "reference/labelling.label_both.html",
    "title": "labelling.label_both",
    "section": "",
    "text": "facets.labelling.label_both(label_info, multi_line=True, sep=': ')\nConcatenate the facet variable with the value\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlabel_info\n\n\nstrip_label_details\n\n\nLabel information to be modified.\n\n\nrequired\n\n\n\n\nmulti_line\n\n\nbool\n\n\nWhether to place each variable on a separate line\n\n\nTrue\n\n\n\n\nsep\n\n\nstr\n\n\nSeparation between variable name and value\n\n\n': '\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nstrip_label_details\n\n\nLabel information"
  },
  {
    "objectID": "reference/labelling.label_both.html#parameters",
    "href": "reference/labelling.label_both.html#parameters",
    "title": "labelling.label_both",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlabel_info\n\n\nstrip_label_details\n\n\nLabel information to be modified.\n\n\nrequired\n\n\n\n\nmulti_line\n\n\nbool\n\n\nWhether to place each variable on a separate line\n\n\nTrue\n\n\n\n\nsep\n\n\nstr\n\n\nSeparation between variable name and value\n\n\n': '"
  },
  {
    "objectID": "reference/labelling.label_both.html#returns",
    "href": "reference/labelling.label_both.html#returns",
    "title": "labelling.label_both",
    "section": "",
    "text": "Type\n\n\nDescription\n\n\n\n\n\n\nstrip_label_details\n\n\nLabel information"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "ggplot\nCreate a new ggplot object\n\n\nqplot\nQuick plot\n\n\nwatermark\nAdd watermark to plot\n\n\nlayer\n\n\n\nPlotnineAnimation\nAnimation using ggplot objects\n\n\nsave_as_pdf_pages\nSave multiple :class:ggplot objects to a PDF file, one per page.\n\n\n\n\n\n\nAesthetics are the visual properties of a plot. The following functions control how the data (and calculations based on the data) is mapped to the aesthetics.\n\n\n\naes\nCreate aesthetic mappings\n\n\nafter_stat\nEvaluate mapping after statistic has been calculated\n\n\nafter_scale\nEvaluate mapping after variable has been mapped to the scale\n\n\nstage\nStage allows you evaluating mapping at more than one stage\n\n\n\n\n\n\nGeometric objects (geoms) are responsible for the visual representation of data points. geom_* classes determine the kind of geometric objects and every plot must have at least one geom added to it. The distinct visual aspects of the representation are controlled by the aes mapping.\n\n\n\ngeom\nBase class of all Geoms\n\n\n\n\n\n\ngeom_abline\nLines specified by slope and intercept\n\n\ngeom_area\nArea plot\n\n\ngeom_bar\nBar plot\n\n\ngeom_blank\nAn empty plot\n\n\ngeom_boxplot\nBox and whiskers plot\n\n\ngeom_col\nBar plot with base on the x-axis\n\n\ngeom_count\nPlot overlapping points\n\n\ngeom_crossbar\nVertical interval represented by a crossbar\n\n\ngeom_density\nSmooth density estimate\n\n\ngeom_density_2d\n2D density estimate\n\n\ngeom_dotplot\nDot plot\n\n\ngeom_errorbar\nVertical interval represented as an errorbar\n\n\ngeom_errorbarh\nHorizontal interval represented as an errorbar\n\n\ngeom_freqpoly\nFrequency polygon\n\n\ngeom_bin_2d\nHeatmap of 2d bin counts\n\n\ngeom_histogram\nHistogram\n\n\ngeom_hline\nHorizontal line\n\n\ngeom_jitter\nScatter plot with points jittered to reduce overplotting\n\n\ngeom_label\nTextual annotations with a background\n\n\ngeom_line\nConnected points\n\n\ngeom_linerange\nVertical interval represented by lines\n\n\ngeom_map\nDraw map feature\n\n\ngeom_path\nConnected points\n\n\ngeom_point\nPlot points (Scatter plot)\n\n\ngeom_pointdensity\nScatterplot with density estimation at each point\n\n\ngeom_pointrange\nVertical interval represented by a line with a point\n\n\ngeom_polygon\nPolygon, a filled path\n\n\ngeom_quantile\nQuantile lines from a quantile regression\n\n\ngeom_qq\nQuantile-Quantile plot\n\n\ngeom_qq_line\nQuantile-Quantile Line plot\n\n\ngeom_raster\nRasterized Rectangles specified using center points\n\n\ngeom_rect\nRectangles\n\n\ngeom_ribbon\nRibbon plot\n\n\ngeom_rug\nMarginal rug plot\n\n\ngeom_segment\nLine segments\n\n\ngeom_sina\nDraw a sina plot\n\n\ngeom_smooth\nA smoothed conditional mean\n\n\ngeom_spoke\nLine segment parameterised by location, direction and distance\n\n\ngeom_step\nStepped connected points\n\n\ngeom_text\nTextual annotations\n\n\ngeom_tile\nRectangles specified using a center points\n\n\ngeom_violin\nViolin Plot\n\n\ngeom_vline\nVertical line\n\n\n\n\n\n\n\n\nannotate\nCreate an annotation layer\n\n\nannotation_logticks\nMarginal log ticks.\n\n\nannotation_stripes\nAlternating stripes, centered around each label.\n\n\ngeom_path:arrow\nDefine arrow (actually an arrowhead)\n\n\n\n\n\n\n\n\n\nlabs\nAdd labels for aesthetics and/or title\n\n\nxlab\nCreate x-axis label\n\n\nylab\nCreate y-axis label\n\n\nggtitle\nCreate plot title\n\n\n\n\n\n\n\nStatistical transformations (stats) do aggregations and other computations on data before it is drawn out. stat_* determine the type of computation done on the data. Different types of computations yield varied results, so a stat must be paired with a geom that can represent all or some of the computations.\n\n\n\nstat\n\n\n\n\n\n\n\nstat_bin\nCount cases in each interval\n\n\nstat_bin_2d\n2 Dimensional bin counts\n\n\nstat_bindot\nBinning for a dot plot\n\n\nstat_boxplot\nCompute boxplot statistics\n\n\nstat_count\nCounts the number of cases at each x position\n\n\nstat_density\nCompute density estimate\n\n\nstat_density_2d\nCompute 2D kernel density estimation\n\n\nstat_ecdf\nEmperical Cumulative Density Function\n\n\nstat_ellipse\nCalculate normal confidence interval ellipse\n\n\nstat_function\nSuperimpose a function onto a plot\n\n\nstat_hull\n2 Dimensional Convex Hull\n\n\nstat_identity\nIdentity (do nothing) statistic\n\n\nstat_qq\nCalculation for quantile-quantile plot\n\n\nstat_qq_line\nCalculate line through quantile-quantile plot\n\n\nstat_quantile\nCompute quantile regression lines\n\n\nstat_sina\nCompute Sina plot values\n\n\nstat_smooth\nCalculate a smoothed conditional mean\n\n\nstat_sum\nSum unique values\n\n\nstat_summary\nCalculate summary statistics depending on x\n\n\nstat_summary_bin\nSummarise y values at x intervals\n\n\nstat_unique\nRemove duplicates\n\n\nstat_ydensity\nDensity estimate\n\n\n\n\n\n\nFaceting is a way to subset data and plot it on different panels.\n\n\n\nfacet\n\n\n\n\n\n\n\nfacet_grid\nWrap 1D Panels onto 2D surface\n\n\nfacet_null\nA single Panel\n\n\nfacet_wrap\nWrap 1D Panels onto 2D surface\n\n\nlabelling.labeller\nFacet Strip Labelling\n\n\nlabelling.as_labeller\nCoerse to labeller\n\n\nlabelling.label_value\nKeep value as the label\n\n\nlabelling.label_both\nConcatenate the facet variable with the value\n\n\nlabelling.label_context\nCreate an unabiguous label string\n\n\n\n\n\n\nScales control the mapping from data to aesthetics. They take data and adjust it to fit the different aspects of the visual sense i.e. length, colour, size and shape.\n\n\n\n\n\nscale\nBase class for all scales\n\n\nscale_discrete\nBase class for all discrete scales\n\n\nscale_continuous\nBase class for all continuous scales\n\n\nscale_datetime\nBase class for all date/datetime scales\n\n\n\n\n\n\n\n\n\nscale_alpha\nContinuous Alpha Scale\n\n\nscale_alpha_discrete\nDiscrete Alpha Scale\n\n\nscale_alpha_continuous\nContinuous Alpha Scale\n\n\nscale_alpha_datetime\nDatetime Alpha Scale\n\n\n\n\n\n\n\n\n\nscale_alpha_identity\nNo alpha scaling\n\n\nscale_color_identity\nNo color scaling\n\n\nscale_colour_identity\nNo color scaling\n\n\nscale_fill_identity\nNo color scaling\n\n\nscale_linetype_identity\nNo linetype scaling\n\n\nscale_shape_identity\nNo shape scaling\n\n\nscale_size_identity\nNo size scaling\n\n\n\n\n\n\n\n\n\nscale_color_brewer\nSequential, diverging and qualitative discrete color scales\n\n\nscale_color_continuous\nCreate color scales using Matplotlib colormaps\n\n\nscale_color_cmap\nCreate color scales using Matplotlib colormaps\n\n\nscale_color_desaturate\nCreate a desaturated color gradient\n\n\nscale_color_datetime\nDatetime color scale\n\n\nscale_color_discrete\nQualitative color scale with evenly spaced hues\n\n\nscale_color_distiller\nSequential and diverging continuous color scales\n\n\nscale_color_gradient\nCreate a 2 point color gradient\n\n\nscale_color_gradient2\nCreate a 3 point diverging color gradient\n\n\nscale_color_gradientn\nCreate a n color gradient\n\n\nscale_color_gray\nSequential grey color scale.\n\n\nscale_color_grey\nSequential grey color scale.\n\n\nscale_color_hue\nQualitative color scale with evenly spaced hues\n\n\nscale_fill_brewer\nSequential, diverging and qualitative color scales\n\n\nscale_fill_cmap\nCreate color scales using Matplotlib colormaps\n\n\nscale_fill_continuous\nCreate color scales using Matplotlib colormaps\n\n\nscale_fill_datetime\nDatetime fill scale\n\n\nscale_fill_desaturate\nCreate a desaturated color gradient\n\n\nscale_fill_discrete\nQualitative color scale with evenly spaced hues\n\n\nscale_fill_distiller\nSequential, diverging continuous color scales\n\n\nscale_fill_gradient\nCreate a 2 point color gradient\n\n\nscale_fill_gradient2\nCreate a 3 point diverging color gradient\n\n\nscale_fill_gradientn\nCreate a n color gradient\n\n\nscale_fill_gray\nSequential grey color scale.\n\n\nscale_fill_grey\nSequential grey color scale.\n\n\nscale_fill_hue\nQualitative color scale with evenly spaced hues\n\n\n\n\n\n\n\n\n\nscale_alpha_manual\nCustom discrete alpha scale\n\n\nscale_color_manual\nCustom discrete color scale\n\n\nscale_colour_manual\nCustom discrete color scale\n\n\nscale_fill_manual\nCustom discrete fill scale\n\n\nscale_linetype_manual\nCustom discrete linetype scale\n\n\nscale_shape_manual\nCustom discrete shape scale\n\n\nscale_size_manual\nCustom discrete size scale\n\n\n\n\n\n\n\n\n\nscale_linetype\nScale for line patterns\n\n\nscale_linetype_discrete\nScale for line patterns\n\n\n\n\n\n\n\n\n\nscale_shape\nScale for shapes\n\n\nscale_shape_discrete\nScale for shapes\n\n\n\n\n\n\n\n\n\nscale_size\nContinuous area size scale\n\n\nscale_size_area\nContinuous area size scale\n\n\nscale_size_continuous\nContinuous area size scale\n\n\nscale_size_discrete\nDiscrete area size scale\n\n\nscale_size_radius\nContinuous radius size scale\n\n\nscale_size_datetime\nDatetime area-size scale\n\n\n\n\n\n\n\n\n\nscale_x_continuous\nContinuous x position\n\n\nscale_x_date\nContinuous x position for datetime data points\n\n\nscale_x_datetime\nContinuous x position for datetime data points\n\n\nscale_x_discrete\nDiscrete x position\n\n\nscale_x_log10\nContinuous x position log10 transformed scale\n\n\nscale_x_reverse\nContinuous x position reverse transformed scale\n\n\nscale_x_sqrt\nContinuous x position sqrt transformed scale\n\n\nscale_x_timedelta\nContinuous x position for timedelta data points\n\n\nscale_y_continuous\nContinuous y position\n\n\nscale_y_date\nContinuous y position for datetime data points\n\n\nscale_y_datetime\nContinuous y position for datetime data points\n\n\nscale_y_discrete\nDiscrete y position\n\n\nscale_y_log10\nContinuous y position log10 transformed scale\n\n\nscale_y_reverse\nContinuous y position reverse transformed scale\n\n\nscale_y_sqrt\nContinuous y position sqrt transformed scale\n\n\nscale_y_timedelta\nContinuous y position for timedelta data points\n\n\n\n\n\n\n\n\n\nlims\nSet aesthetic limits\n\n\nxlim\nSet x-axis limits\n\n\nylim\nSet y-axis limits\n\n\nexpand_limits\nExpand the limits any aesthetic using data\n\n\n\n\n\n\n\n\n\nguides\nGuides for each scale\n\n\nguide\n\n\n\nguide_legend\nLegend guide\n\n\nguide_colorbar\nGuide colorbar\n\n\n\n\n\n\n\nOverlapping objects can be visualized better if their positions are adjusted. That is what the position_* class do. Each geom is associated with one position adjustment class.\n\n\n\nposition_dodge\nDodge overlaps and place objects side-by-side\n\n\nposition_dodge2\nDodge overlaps and place objects side-by-side\n\n\nposition_fill\nNormalise stacked objects to unit height\n\n\nposition_identity\nDo not adjust the position\n\n\nposition_jitter\nJitter points to avoid overplotting\n\n\nposition_jitterdodge\nDodge and jitter to minimise overlap\n\n\nposition_nudge\nNudge points\n\n\nposition_stack\nStack plotted objects on top of each other\n\n\n\n\n\n\nThemes control the visual appearance of the non-data elements the plot.\n\n\n\ntheme\nBase class for themes\n\n\ntheme_538\nTheme in the likeness of fivethirtyeight.com plots\n\n\ntheme_bw\nWhite background with black gridlines\n\n\ntheme_classic\nA classic-looking theme, with x & y axis lines and no gridlines\n\n\ntheme_dark\nThe dark cousin of :class:theme_light\n\n\ntheme_gray\nA gray background with white gridlines.\n\n\ntheme_grey\nA gray background with white gridlines.\n\n\ntheme_light\nA theme similar to :class:theme_linedraw\n\n\ntheme_linedraw\nA theme with only black lines of various widths on white backgrounds\n\n\ntheme_matplotlib\nThe default matplotlib look and feel.\n\n\ntheme_minimal\nA minimalistic theme with no background annotations\n\n\ntheme_seaborn\nTheme for seaborn.\n\n\ntheme_tufte\nTufte Maximal Data, Minimal Ink Theme\n\n\ntheme_void\nA classic-looking theme, with x & y axis lines and\n\n\ntheme_xkcd\nxkcd theme\n\n\n\n\n\nThese define aspects of a plot that can be themed. They can be used to create a new theme or modify an existing theme. They define the keyword arguments to theme. Users should never create instances of themeable.\n\n\n\naspect_ratio\nAspect ratio of the panel(s)\n\n\naxis_line\nx & y axis lines\n\n\naxis_line_x\nx-axis line\n\n\naxis_line_y\ny-axis line\n\n\naxis_text\nAxis tick labels\n\n\naxis_text_x\nx-axis tick labels\n\n\naxis_text_y\ny-axis tick labels\n\n\naxis_ticks\nx & y major and minor axis tick lines\n\n\naxis_ticks_direction\naxis tick direction\n\n\naxis_ticks_direction_x\nx-axis tick direction\n\n\naxis_ticks_direction_y\ny-axis tick direction\n\n\naxis_ticks_length\nAxis tick length\n\n\naxis_ticks_length_major\nAxis major-tick length\n\n\naxis_ticks_length_minor\nAxis minor-tick length\n\n\naxis_ticks_major\nx & y axis major tick lines\n\n\naxis_line\nx & y axis lines\n\n\naxis_line_x\nx-axis line\n\n\naxis_line_y\ny-axis line\n\n\naxis_text\nAxis tick labels\n\n\naxis_text_x\nx-axis tick labels\n\n\naxis_text_y\ny-axis tick labels\n\n\naxis_ticks\nx & y major and minor axis tick lines\n\n\naxis_ticks_direction\naxis tick direction\n\n\naxis_ticks_direction_x\nx-axis tick direction\n\n\naxis_ticks_direction_y\ny-axis tick direction\n\n\naxis_ticks_length\nAxis tick length\n\n\naxis_ticks_length_major\nAxis major-tick length\n\n\naxis_ticks_length_minor\nAxis minor-tick length\n\n\naxis_ticks_major\nx & y axis major tick lines\n\n\naxis_ticks_major_x\nx-axis major tick lines\n\n\naxis_ticks_major_y\ny-axis major tick lines\n\n\naxis_ticks_minor\nx & y axis minor tick lines\n\n\naxis_ticks_minor_x\nx-axis tick lines\n\n\naxis_ticks_minor_y\ny-axis minor tick lines\n\n\naxis_ticks_pad\nAxis tick padding\n\n\naxis_ticks_pad_major\nAxis major-tick padding\n\n\naxis_ticks_pad_minor\nAxis minor-tick padding\n\n\naxis_title\nAxis labels\n\n\naxis_title_x\nx axis label\n\n\naxis_title_y\ny axis label\n\n\ndpi\nDPI with which to draw/save the figure\n\n\nfigure_size\nFigure size in inches\n\n\nlegend_background\nLegend background\n\n\nlegend_box\nHow to box up multiple legends\n\n\nlegend_box_background\nLegend box background\n\n\nlegend_box_just\nJustification of legend boxes\n\n\nlegend_box_margin\nPadding between the legends and the box\n\n\nlegend_box_spacing\nSpacing between the legend and the plotting area\n\n\nlegend_direction\nLayout items in the legend\n\n\nlegend_entry_spacing\nSpacing between two entries in a legend\n\n\nlegend_entry_spacing_x\nHorizontal spacing between two entries in a legend\n\n\nlegend_entry_spacing_y\nVertical spacing between two entries in a legend\n\n\nlegend_key\nLegend key background\n\n\nlegend_key_height\nLegend key background height\n\n\nlegend_key_size\nLegend key background width and height\n\n\nlegend_key_width\nLegend key background width\n\n\nlegend_margin\nPadding between the legend and the inner box\n\n\nlegend_position\nLocation of legend\n\n\nlegend_spacing\nSpacing between two adjacent legends\n\n\nlegend_text\nLegend text\n\n\nlegend_text_colorbar\nColorbar text\n\n\nlegend_text_legend\nLegend text for the common legend\n\n\nlegend_title\nLegend title\n\n\nlegend_title_align\nAlignment of legend title\n\n\nline\nAll line elements\n\n\npanel_background\nPanel background\n\n\npanel_border\nPanel border\n\n\npanel_grid\nGrid lines\n\n\npanel_grid_major\nMajor grid lines\n\n\npanel_grid_major_x\nVertical major grid lines\n\n\npanel_grid_major_y\nHorizontal major grid lines\n\n\npanel_grid_minor\nMinor grid lines\n\n\npanel_grid_minor_x\nVertical minor grid lines\n\n\npanel_grid_minor_y\nHorizontal minor grid lines\n\n\npanel_ontop\nPlace panel background & gridlines over/under the data layers\n\n\npanel_spacing\nSpacing between the facet panels\n\n\npanel_spacing_x\nHorizontal spacing between the facet panels\n\n\npanel_spacing_y\nVertical spacing between the facet panels\n\n\nplot_background\nPlot background\n\n\nplot_margin\nPlot Margin\n\n\nplot_title\nPlot title\n\n\nrect\nAll rectangle elements\n\n\nstrip_background\nFacet label background\n\n\nstrip_background_x\nHorizontal facet label background\n\n\nstrip_background_y\nVertical facet label background\n\n\nstrip_align\nAlignment of the strip & its background w.r.t the panel border\n\n\nstrip_align_x\nVertical alignment of the strip & its background w.r.t the panel border\n\n\nstrip_align_y\nHorizontal alignment of the strip & its background w.r.t the panel border\n\n\nstrip_text\nFacet labels along both axes\n\n\nstrip_text_x\nFacet labels along the horizontal axis\n\n\nstrip_text_y\nFacet labels along the vertical axis\n\n\ntext\nAll text elements in the plot\n\n\ntitle\nAll titles on the plot\n\n\nthemeable\nAbstract class of things that can be themed.\n\n\n\n\n\n\n\n\n\ntheme_set\nChange the current(default) theme\n\n\ntheme_get\nReturn the default theme\n\n\ntheme_update\nModify elements of the current theme\n\n\nelement_line\ntheme element: line\n\n\nelement_rect\nTheme element: Rectangle\n\n\nelement_text\nTheme element: Text\n\n\n\n\n\n\n\nCoordinate systems put together the two position scales to produce a 2d location.\n\n\n\ncoord_cartesian\nCartesian coordinate system\n\n\ncoord_equal\nCartesian coordinates with fixed relationship between x and y scales\n\n\ncoord_fixed\nCartesian coordinates with fixed relationship between x and y scales\n\n\ncoord_flip\nFlipped cartesian coordinates\n\n\ncoord_trans\nTransformed cartesian coordinate system\n\n\n\n\n\n\nWhen working interactively, some of the options make it convenient to create plots that have a common look and feel. Another way to do it, to set a default theme using theme_set().\n\n\n\naspect_ratio\n\n\n\nbase_family\n\n\n\nbase_margin\n\n\n\nclose_all_figures\n\n\n\ncurrent_theme\n\n\n\ndpi\n\n\n\nfigure_size\n\n\n\nget_option\nGet package option\n\n\nset_option\nSet package option\n\n\n\n\n\n\nThese datasets ship with the plotnine and you can import them with from the plotnine.data sub-package.\n\n\n\ndiamonds\nPrices of 50,000 round cut diamonds\n\n\neconomics\nUS economic time series.\n\n\neconomics_long\nUS economic time series.\n\n\nfaithful\nOld Faithful Geyser Data\n\n\nfaithfuld\nOld Faithful Geyser Data\n\n\nhuron\nLevel of Lake Huron 1875–1972\n\n\nluv_colours\ncolors in Luv space.\n\n\nmeat\n\n\n\nmidwest\nMidwest demographics.\n\n\nmpg\nFuel economy data from 1999 and 2008 for 38 popular models of car\n\n\nmsleep\nAn updated and expanded version of the mammals sleep dataset.\n\n\nmtcars\nMotor Trend Car Road Tests\n\n\npageviews\n\n\n\npresidential\nTerms of 11 presidents from Eisenhower to Obama.\n\n\nseals\nVector field of seal movements.\n\n\ntxhousing\nHousing sales in TX."
  },
  {
    "objectID": "reference/index.html#plot-creation",
    "href": "reference/index.html#plot-creation",
    "title": "Function reference",
    "section": "",
    "text": "ggplot\nCreate a new ggplot object\n\n\nqplot\nQuick plot\n\n\nwatermark\nAdd watermark to plot\n\n\nlayer\n\n\n\nPlotnineAnimation\nAnimation using ggplot objects\n\n\nsave_as_pdf_pages\nSave multiple :class:ggplot objects to a PDF file, one per page."
  },
  {
    "objectID": "reference/index.html#mapping-aesthetics",
    "href": "reference/index.html#mapping-aesthetics",
    "title": "Function reference",
    "section": "",
    "text": "Aesthetics are the visual properties of a plot. The following functions control how the data (and calculations based on the data) is mapped to the aesthetics.\n\n\n\naes\nCreate aesthetic mappings\n\n\nafter_stat\nEvaluate mapping after statistic has been calculated\n\n\nafter_scale\nEvaluate mapping after variable has been mapped to the scale\n\n\nstage\nStage allows you evaluating mapping at more than one stage"
  },
  {
    "objectID": "reference/index.html#geoms",
    "href": "reference/index.html#geoms",
    "title": "Function reference",
    "section": "",
    "text": "Geometric objects (geoms) are responsible for the visual representation of data points. geom_* classes determine the kind of geometric objects and every plot must have at least one geom added to it. The distinct visual aspects of the representation are controlled by the aes mapping.\n\n\n\ngeom\nBase class of all Geoms\n\n\n\n\n\n\ngeom_abline\nLines specified by slope and intercept\n\n\ngeom_area\nArea plot\n\n\ngeom_bar\nBar plot\n\n\ngeom_blank\nAn empty plot\n\n\ngeom_boxplot\nBox and whiskers plot\n\n\ngeom_col\nBar plot with base on the x-axis\n\n\ngeom_count\nPlot overlapping points\n\n\ngeom_crossbar\nVertical interval represented by a crossbar\n\n\ngeom_density\nSmooth density estimate\n\n\ngeom_density_2d\n2D density estimate\n\n\ngeom_dotplot\nDot plot\n\n\ngeom_errorbar\nVertical interval represented as an errorbar\n\n\ngeom_errorbarh\nHorizontal interval represented as an errorbar\n\n\ngeom_freqpoly\nFrequency polygon\n\n\ngeom_bin_2d\nHeatmap of 2d bin counts\n\n\ngeom_histogram\nHistogram\n\n\ngeom_hline\nHorizontal line\n\n\ngeom_jitter\nScatter plot with points jittered to reduce overplotting\n\n\ngeom_label\nTextual annotations with a background\n\n\ngeom_line\nConnected points\n\n\ngeom_linerange\nVertical interval represented by lines\n\n\ngeom_map\nDraw map feature\n\n\ngeom_path\nConnected points\n\n\ngeom_point\nPlot points (Scatter plot)\n\n\ngeom_pointdensity\nScatterplot with density estimation at each point\n\n\ngeom_pointrange\nVertical interval represented by a line with a point\n\n\ngeom_polygon\nPolygon, a filled path\n\n\ngeom_quantile\nQuantile lines from a quantile regression\n\n\ngeom_qq\nQuantile-Quantile plot\n\n\ngeom_qq_line\nQuantile-Quantile Line plot\n\n\ngeom_raster\nRasterized Rectangles specified using center points\n\n\ngeom_rect\nRectangles\n\n\ngeom_ribbon\nRibbon plot\n\n\ngeom_rug\nMarginal rug plot\n\n\ngeom_segment\nLine segments\n\n\ngeom_sina\nDraw a sina plot\n\n\ngeom_smooth\nA smoothed conditional mean\n\n\ngeom_spoke\nLine segment parameterised by location, direction and distance\n\n\ngeom_step\nStepped connected points\n\n\ngeom_text\nTextual annotations\n\n\ngeom_tile\nRectangles specified using a center points\n\n\ngeom_violin\nViolin Plot\n\n\ngeom_vline\nVertical line\n\n\n\n\n\n\n\n\nannotate\nCreate an annotation layer\n\n\nannotation_logticks\nMarginal log ticks.\n\n\nannotation_stripes\nAlternating stripes, centered around each label.\n\n\ngeom_path:arrow\nDefine arrow (actually an arrowhead)\n\n\n\n\n\n\n\n\n\nlabs\nAdd labels for aesthetics and/or title\n\n\nxlab\nCreate x-axis label\n\n\nylab\nCreate y-axis label\n\n\nggtitle\nCreate plot title"
  },
  {
    "objectID": "reference/index.html#stats",
    "href": "reference/index.html#stats",
    "title": "Function reference",
    "section": "",
    "text": "Statistical transformations (stats) do aggregations and other computations on data before it is drawn out. stat_* determine the type of computation done on the data. Different types of computations yield varied results, so a stat must be paired with a geom that can represent all or some of the computations.\n\n\n\nstat\n\n\n\n\n\n\n\nstat_bin\nCount cases in each interval\n\n\nstat_bin_2d\n2 Dimensional bin counts\n\n\nstat_bindot\nBinning for a dot plot\n\n\nstat_boxplot\nCompute boxplot statistics\n\n\nstat_count\nCounts the number of cases at each x position\n\n\nstat_density\nCompute density estimate\n\n\nstat_density_2d\nCompute 2D kernel density estimation\n\n\nstat_ecdf\nEmperical Cumulative Density Function\n\n\nstat_ellipse\nCalculate normal confidence interval ellipse\n\n\nstat_function\nSuperimpose a function onto a plot\n\n\nstat_hull\n2 Dimensional Convex Hull\n\n\nstat_identity\nIdentity (do nothing) statistic\n\n\nstat_qq\nCalculation for quantile-quantile plot\n\n\nstat_qq_line\nCalculate line through quantile-quantile plot\n\n\nstat_quantile\nCompute quantile regression lines\n\n\nstat_sina\nCompute Sina plot values\n\n\nstat_smooth\nCalculate a smoothed conditional mean\n\n\nstat_sum\nSum unique values\n\n\nstat_summary\nCalculate summary statistics depending on x\n\n\nstat_summary_bin\nSummarise y values at x intervals\n\n\nstat_unique\nRemove duplicates\n\n\nstat_ydensity\nDensity estimate"
  },
  {
    "objectID": "reference/index.html#facets",
    "href": "reference/index.html#facets",
    "title": "Function reference",
    "section": "",
    "text": "Faceting is a way to subset data and plot it on different panels.\n\n\n\nfacet\n\n\n\n\n\n\n\nfacet_grid\nWrap 1D Panels onto 2D surface\n\n\nfacet_null\nA single Panel\n\n\nfacet_wrap\nWrap 1D Panels onto 2D surface\n\n\nlabelling.labeller\nFacet Strip Labelling\n\n\nlabelling.as_labeller\nCoerse to labeller\n\n\nlabelling.label_value\nKeep value as the label\n\n\nlabelling.label_both\nConcatenate the facet variable with the value\n\n\nlabelling.label_context\nCreate an unabiguous label string"
  },
  {
    "objectID": "reference/index.html#scales",
    "href": "reference/index.html#scales",
    "title": "Function reference",
    "section": "",
    "text": "Scales control the mapping from data to aesthetics. They take data and adjust it to fit the different aspects of the visual sense i.e. length, colour, size and shape.\n\n\n\n\n\nscale\nBase class for all scales\n\n\nscale_discrete\nBase class for all discrete scales\n\n\nscale_continuous\nBase class for all continuous scales\n\n\nscale_datetime\nBase class for all date/datetime scales\n\n\n\n\n\n\n\n\n\nscale_alpha\nContinuous Alpha Scale\n\n\nscale_alpha_discrete\nDiscrete Alpha Scale\n\n\nscale_alpha_continuous\nContinuous Alpha Scale\n\n\nscale_alpha_datetime\nDatetime Alpha Scale\n\n\n\n\n\n\n\n\n\nscale_alpha_identity\nNo alpha scaling\n\n\nscale_color_identity\nNo color scaling\n\n\nscale_colour_identity\nNo color scaling\n\n\nscale_fill_identity\nNo color scaling\n\n\nscale_linetype_identity\nNo linetype scaling\n\n\nscale_shape_identity\nNo shape scaling\n\n\nscale_size_identity\nNo size scaling\n\n\n\n\n\n\n\n\n\nscale_color_brewer\nSequential, diverging and qualitative discrete color scales\n\n\nscale_color_continuous\nCreate color scales using Matplotlib colormaps\n\n\nscale_color_cmap\nCreate color scales using Matplotlib colormaps\n\n\nscale_color_desaturate\nCreate a desaturated color gradient\n\n\nscale_color_datetime\nDatetime color scale\n\n\nscale_color_discrete\nQualitative color scale with evenly spaced hues\n\n\nscale_color_distiller\nSequential and diverging continuous color scales\n\n\nscale_color_gradient\nCreate a 2 point color gradient\n\n\nscale_color_gradient2\nCreate a 3 point diverging color gradient\n\n\nscale_color_gradientn\nCreate a n color gradient\n\n\nscale_color_gray\nSequential grey color scale.\n\n\nscale_color_grey\nSequential grey color scale.\n\n\nscale_color_hue\nQualitative color scale with evenly spaced hues\n\n\nscale_fill_brewer\nSequential, diverging and qualitative color scales\n\n\nscale_fill_cmap\nCreate color scales using Matplotlib colormaps\n\n\nscale_fill_continuous\nCreate color scales using Matplotlib colormaps\n\n\nscale_fill_datetime\nDatetime fill scale\n\n\nscale_fill_desaturate\nCreate a desaturated color gradient\n\n\nscale_fill_discrete\nQualitative color scale with evenly spaced hues\n\n\nscale_fill_distiller\nSequential, diverging continuous color scales\n\n\nscale_fill_gradient\nCreate a 2 point color gradient\n\n\nscale_fill_gradient2\nCreate a 3 point diverging color gradient\n\n\nscale_fill_gradientn\nCreate a n color gradient\n\n\nscale_fill_gray\nSequential grey color scale.\n\n\nscale_fill_grey\nSequential grey color scale.\n\n\nscale_fill_hue\nQualitative color scale with evenly spaced hues\n\n\n\n\n\n\n\n\n\nscale_alpha_manual\nCustom discrete alpha scale\n\n\nscale_color_manual\nCustom discrete color scale\n\n\nscale_colour_manual\nCustom discrete color scale\n\n\nscale_fill_manual\nCustom discrete fill scale\n\n\nscale_linetype_manual\nCustom discrete linetype scale\n\n\nscale_shape_manual\nCustom discrete shape scale\n\n\nscale_size_manual\nCustom discrete size scale\n\n\n\n\n\n\n\n\n\nscale_linetype\nScale for line patterns\n\n\nscale_linetype_discrete\nScale for line patterns\n\n\n\n\n\n\n\n\n\nscale_shape\nScale for shapes\n\n\nscale_shape_discrete\nScale for shapes\n\n\n\n\n\n\n\n\n\nscale_size\nContinuous area size scale\n\n\nscale_size_area\nContinuous area size scale\n\n\nscale_size_continuous\nContinuous area size scale\n\n\nscale_size_discrete\nDiscrete area size scale\n\n\nscale_size_radius\nContinuous radius size scale\n\n\nscale_size_datetime\nDatetime area-size scale\n\n\n\n\n\n\n\n\n\nscale_x_continuous\nContinuous x position\n\n\nscale_x_date\nContinuous x position for datetime data points\n\n\nscale_x_datetime\nContinuous x position for datetime data points\n\n\nscale_x_discrete\nDiscrete x position\n\n\nscale_x_log10\nContinuous x position log10 transformed scale\n\n\nscale_x_reverse\nContinuous x position reverse transformed scale\n\n\nscale_x_sqrt\nContinuous x position sqrt transformed scale\n\n\nscale_x_timedelta\nContinuous x position for timedelta data points\n\n\nscale_y_continuous\nContinuous y position\n\n\nscale_y_date\nContinuous y position for datetime data points\n\n\nscale_y_datetime\nContinuous y position for datetime data points\n\n\nscale_y_discrete\nDiscrete y position\n\n\nscale_y_log10\nContinuous y position log10 transformed scale\n\n\nscale_y_reverse\nContinuous y position reverse transformed scale\n\n\nscale_y_sqrt\nContinuous y position sqrt transformed scale\n\n\nscale_y_timedelta\nContinuous y position for timedelta data points\n\n\n\n\n\n\n\n\n\nlims\nSet aesthetic limits\n\n\nxlim\nSet x-axis limits\n\n\nylim\nSet y-axis limits\n\n\nexpand_limits\nExpand the limits any aesthetic using data\n\n\n\n\n\n\n\n\n\nguides\nGuides for each scale\n\n\nguide\n\n\n\nguide_legend\nLegend guide\n\n\nguide_colorbar\nGuide colorbar"
  },
  {
    "objectID": "reference/index.html#positions",
    "href": "reference/index.html#positions",
    "title": "Function reference",
    "section": "",
    "text": "Overlapping objects can be visualized better if their positions are adjusted. That is what the position_* class do. Each geom is associated with one position adjustment class.\n\n\n\nposition_dodge\nDodge overlaps and place objects side-by-side\n\n\nposition_dodge2\nDodge overlaps and place objects side-by-side\n\n\nposition_fill\nNormalise stacked objects to unit height\n\n\nposition_identity\nDo not adjust the position\n\n\nposition_jitter\nJitter points to avoid overplotting\n\n\nposition_jitterdodge\nDodge and jitter to minimise overlap\n\n\nposition_nudge\nNudge points\n\n\nposition_stack\nStack plotted objects on top of each other"
  },
  {
    "objectID": "reference/index.html#themes",
    "href": "reference/index.html#themes",
    "title": "Function reference",
    "section": "",
    "text": "Themes control the visual appearance of the non-data elements the plot.\n\n\n\ntheme\nBase class for themes\n\n\ntheme_538\nTheme in the likeness of fivethirtyeight.com plots\n\n\ntheme_bw\nWhite background with black gridlines\n\n\ntheme_classic\nA classic-looking theme, with x & y axis lines and no gridlines\n\n\ntheme_dark\nThe dark cousin of :class:theme_light\n\n\ntheme_gray\nA gray background with white gridlines.\n\n\ntheme_grey\nA gray background with white gridlines.\n\n\ntheme_light\nA theme similar to :class:theme_linedraw\n\n\ntheme_linedraw\nA theme with only black lines of various widths on white backgrounds\n\n\ntheme_matplotlib\nThe default matplotlib look and feel.\n\n\ntheme_minimal\nA minimalistic theme with no background annotations\n\n\ntheme_seaborn\nTheme for seaborn.\n\n\ntheme_tufte\nTufte Maximal Data, Minimal Ink Theme\n\n\ntheme_void\nA classic-looking theme, with x & y axis lines and\n\n\ntheme_xkcd\nxkcd theme\n\n\n\n\n\nThese define aspects of a plot that can be themed. They can be used to create a new theme or modify an existing theme. They define the keyword arguments to theme. Users should never create instances of themeable.\n\n\n\naspect_ratio\nAspect ratio of the panel(s)\n\n\naxis_line\nx & y axis lines\n\n\naxis_line_x\nx-axis line\n\n\naxis_line_y\ny-axis line\n\n\naxis_text\nAxis tick labels\n\n\naxis_text_x\nx-axis tick labels\n\n\naxis_text_y\ny-axis tick labels\n\n\naxis_ticks\nx & y major and minor axis tick lines\n\n\naxis_ticks_direction\naxis tick direction\n\n\naxis_ticks_direction_x\nx-axis tick direction\n\n\naxis_ticks_direction_y\ny-axis tick direction\n\n\naxis_ticks_length\nAxis tick length\n\n\naxis_ticks_length_major\nAxis major-tick length\n\n\naxis_ticks_length_minor\nAxis minor-tick length\n\n\naxis_ticks_major\nx & y axis major tick lines\n\n\naxis_line\nx & y axis lines\n\n\naxis_line_x\nx-axis line\n\n\naxis_line_y\ny-axis line\n\n\naxis_text\nAxis tick labels\n\n\naxis_text_x\nx-axis tick labels\n\n\naxis_text_y\ny-axis tick labels\n\n\naxis_ticks\nx & y major and minor axis tick lines\n\n\naxis_ticks_direction\naxis tick direction\n\n\naxis_ticks_direction_x\nx-axis tick direction\n\n\naxis_ticks_direction_y\ny-axis tick direction\n\n\naxis_ticks_length\nAxis tick length\n\n\naxis_ticks_length_major\nAxis major-tick length\n\n\naxis_ticks_length_minor\nAxis minor-tick length\n\n\naxis_ticks_major\nx & y axis major tick lines\n\n\naxis_ticks_major_x\nx-axis major tick lines\n\n\naxis_ticks_major_y\ny-axis major tick lines\n\n\naxis_ticks_minor\nx & y axis minor tick lines\n\n\naxis_ticks_minor_x\nx-axis tick lines\n\n\naxis_ticks_minor_y\ny-axis minor tick lines\n\n\naxis_ticks_pad\nAxis tick padding\n\n\naxis_ticks_pad_major\nAxis major-tick padding\n\n\naxis_ticks_pad_minor\nAxis minor-tick padding\n\n\naxis_title\nAxis labels\n\n\naxis_title_x\nx axis label\n\n\naxis_title_y\ny axis label\n\n\ndpi\nDPI with which to draw/save the figure\n\n\nfigure_size\nFigure size in inches\n\n\nlegend_background\nLegend background\n\n\nlegend_box\nHow to box up multiple legends\n\n\nlegend_box_background\nLegend box background\n\n\nlegend_box_just\nJustification of legend boxes\n\n\nlegend_box_margin\nPadding between the legends and the box\n\n\nlegend_box_spacing\nSpacing between the legend and the plotting area\n\n\nlegend_direction\nLayout items in the legend\n\n\nlegend_entry_spacing\nSpacing between two entries in a legend\n\n\nlegend_entry_spacing_x\nHorizontal spacing between two entries in a legend\n\n\nlegend_entry_spacing_y\nVertical spacing between two entries in a legend\n\n\nlegend_key\nLegend key background\n\n\nlegend_key_height\nLegend key background height\n\n\nlegend_key_size\nLegend key background width and height\n\n\nlegend_key_width\nLegend key background width\n\n\nlegend_margin\nPadding between the legend and the inner box\n\n\nlegend_position\nLocation of legend\n\n\nlegend_spacing\nSpacing between two adjacent legends\n\n\nlegend_text\nLegend text\n\n\nlegend_text_colorbar\nColorbar text\n\n\nlegend_text_legend\nLegend text for the common legend\n\n\nlegend_title\nLegend title\n\n\nlegend_title_align\nAlignment of legend title\n\n\nline\nAll line elements\n\n\npanel_background\nPanel background\n\n\npanel_border\nPanel border\n\n\npanel_grid\nGrid lines\n\n\npanel_grid_major\nMajor grid lines\n\n\npanel_grid_major_x\nVertical major grid lines\n\n\npanel_grid_major_y\nHorizontal major grid lines\n\n\npanel_grid_minor\nMinor grid lines\n\n\npanel_grid_minor_x\nVertical minor grid lines\n\n\npanel_grid_minor_y\nHorizontal minor grid lines\n\n\npanel_ontop\nPlace panel background & gridlines over/under the data layers\n\n\npanel_spacing\nSpacing between the facet panels\n\n\npanel_spacing_x\nHorizontal spacing between the facet panels\n\n\npanel_spacing_y\nVertical spacing between the facet panels\n\n\nplot_background\nPlot background\n\n\nplot_margin\nPlot Margin\n\n\nplot_title\nPlot title\n\n\nrect\nAll rectangle elements\n\n\nstrip_background\nFacet label background\n\n\nstrip_background_x\nHorizontal facet label background\n\n\nstrip_background_y\nVertical facet label background\n\n\nstrip_align\nAlignment of the strip & its background w.r.t the panel border\n\n\nstrip_align_x\nVertical alignment of the strip & its background w.r.t the panel border\n\n\nstrip_align_y\nHorizontal alignment of the strip & its background w.r.t the panel border\n\n\nstrip_text\nFacet labels along both axes\n\n\nstrip_text_x\nFacet labels along the horizontal axis\n\n\nstrip_text_y\nFacet labels along the vertical axis\n\n\ntext\nAll text elements in the plot\n\n\ntitle\nAll titles on the plot\n\n\nthemeable\nAbstract class of things that can be themed.\n\n\n\n\n\n\n\n\n\ntheme_set\nChange the current(default) theme\n\n\ntheme_get\nReturn the default theme\n\n\ntheme_update\nModify elements of the current theme\n\n\nelement_line\ntheme element: line\n\n\nelement_rect\nTheme element: Rectangle\n\n\nelement_text\nTheme element: Text"
  },
  {
    "objectID": "reference/index.html#coordinates",
    "href": "reference/index.html#coordinates",
    "title": "Function reference",
    "section": "",
    "text": "Coordinate systems put together the two position scales to produce a 2d location.\n\n\n\ncoord_cartesian\nCartesian coordinate system\n\n\ncoord_equal\nCartesian coordinates with fixed relationship between x and y scales\n\n\ncoord_fixed\nCartesian coordinates with fixed relationship between x and y scales\n\n\ncoord_flip\nFlipped cartesian coordinates\n\n\ncoord_trans\nTransformed cartesian coordinate system"
  },
  {
    "objectID": "reference/index.html#options",
    "href": "reference/index.html#options",
    "title": "Function reference",
    "section": "",
    "text": "When working interactively, some of the options make it convenient to create plots that have a common look and feel. Another way to do it, to set a default theme using theme_set().\n\n\n\naspect_ratio\n\n\n\nbase_family\n\n\n\nbase_margin\n\n\n\nclose_all_figures\n\n\n\ncurrent_theme\n\n\n\ndpi\n\n\n\nfigure_size\n\n\n\nget_option\nGet package option\n\n\nset_option\nSet package option"
  },
  {
    "objectID": "reference/index.html#datasets",
    "href": "reference/index.html#datasets",
    "title": "Function reference",
    "section": "",
    "text": "These datasets ship with the plotnine and you can import them with from the plotnine.data sub-package.\n\n\n\ndiamonds\nPrices of 50,000 round cut diamonds\n\n\neconomics\nUS economic time series.\n\n\neconomics_long\nUS economic time series.\n\n\nfaithful\nOld Faithful Geyser Data\n\n\nfaithfuld\nOld Faithful Geyser Data\n\n\nhuron\nLevel of Lake Huron 1875–1972\n\n\nluv_colours\ncolors in Luv space.\n\n\nmeat\n\n\n\nmidwest\nMidwest demographics.\n\n\nmpg\nFuel economy data from 1999 and 2008 for 38 popular models of car\n\n\nmsleep\nAn updated and expanded version of the mammals sleep dataset.\n\n\nmtcars\nMotor Trend Car Road Tests\n\n\npageviews\n\n\n\npresidential\nTerms of 11 presidents from Eisenhower to Obama.\n\n\nseals\nVector field of seal movements.\n\n\ntxhousing\nHousing sales in TX."
  },
  {
    "objectID": "reference/guides.html",
    "href": "reference/guides.html",
    "title": "guides",
    "section": "",
    "text": "guides.guides(self, **kwargs)\nGuides for each scale\nUsed to assign a particular guide to an aesthetic(s).\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nkwargs\n\n\ndict\n\n\naesthetic - guide pairings. e.g color=guide_colorbar()\n\n\n{}"
  },
  {
    "objectID": "reference/guides.html#parameters",
    "href": "reference/guides.html#parameters",
    "title": "guides",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nkwargs\n\n\ndict\n\n\naesthetic - guide pairings. e.g color=guide_colorbar()\n\n\n{}"
  },
  {
    "objectID": "reference/guide_colorbar.html",
    "href": "reference/guide_colorbar.html",
    "title": "guide_colorbar",
    "section": "",
    "text": "guides.guide_colorbar()\nGuide colorbar\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbarwidth\n\n\nfloat\n\n\nWidth (in pixels) of the colorbar.\n\n\nrequired\n\n\n\n\nbarheight\n\n\nfloat\n\n\nHeight (in pixels) of the colorbar. The height is multiplied by a factor of 5.\n\n\nrequired\n\n\n\n\nnbin\n\n\nint\n\n\nNumber of bins for drawing a colorbar. A larger value yields a smoother colorbar. Default is 20.\n\n\nrequired\n\n\n\n\nraster\n\n\nbool\n\n\nWhether to render the colorbar as a raster object.\n\n\nrequired\n\n\n\n\nticks\n\n\nbool\n\n\nWhether tick marks on colorbar should be visible.\n\n\nrequired\n\n\n\n\ndraw_ulim\n\n\nbool\n\n\nWhether to show the upper limit tick marks.\n\n\nrequired\n\n\n\n\ndraw_llim\n\n\nbool\n\n\nWhether to show the lower limit tick marks.\n\n\nrequired\n\n\n\n\ndirection\n\n\nstr in ['horizontal', 'vertical']\n\n\nDirection of the guide.\n\n\nrequired\n\n\n\n\nkwargs\n\n\ndict\n\n\nParameters passed on to .guide\n\n\nrequired"
  },
  {
    "objectID": "reference/guide_colorbar.html#parameters",
    "href": "reference/guide_colorbar.html#parameters",
    "title": "guide_colorbar",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbarwidth\n\n\nfloat\n\n\nWidth (in pixels) of the colorbar.\n\n\nrequired\n\n\n\n\nbarheight\n\n\nfloat\n\n\nHeight (in pixels) of the colorbar. The height is multiplied by a factor of 5.\n\n\nrequired\n\n\n\n\nnbin\n\n\nint\n\n\nNumber of bins for drawing a colorbar. A larger value yields a smoother colorbar. Default is 20.\n\n\nrequired\n\n\n\n\nraster\n\n\nbool\n\n\nWhether to render the colorbar as a raster object.\n\n\nrequired\n\n\n\n\nticks\n\n\nbool\n\n\nWhether tick marks on colorbar should be visible.\n\n\nrequired\n\n\n\n\ndraw_ulim\n\n\nbool\n\n\nWhether to show the upper limit tick marks.\n\n\nrequired\n\n\n\n\ndraw_llim\n\n\nbool\n\n\nWhether to show the lower limit tick marks.\n\n\nrequired\n\n\n\n\ndirection\n\n\nstr in ['horizontal', 'vertical']\n\n\nDirection of the guide.\n\n\nrequired\n\n\n\n\nkwargs\n\n\ndict\n\n\nParameters passed on to .guide\n\n\nrequired"
  },
  {
    "objectID": "reference/ggtitle.html",
    "href": "reference/ggtitle.html",
    "title": "ggtitle",
    "section": "",
    "text": "labels.ggtitle(self, title)\nCreate plot title\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntitle\n\n\nstr\n\n\nPlot title\n\n\nrequired"
  },
  {
    "objectID": "reference/ggtitle.html#parameters",
    "href": "reference/ggtitle.html#parameters",
    "title": "ggtitle",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntitle\n\n\nstr\n\n\nPlot title\n\n\nrequired"
  },
  {
    "objectID": "reference/get_option.html",
    "href": "reference/get_option.html",
    "title": "get_option",
    "section": "",
    "text": "options.get_option(name)\nGet package option\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nname\n\n\nstr\n\n\nName of the option\n\n\nrequired"
  },
  {
    "objectID": "reference/get_option.html#parameters",
    "href": "reference/get_option.html#parameters",
    "title": "get_option",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nname\n\n\nstr\n\n\nName of the option\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_violin.html",
    "href": "reference/geom_violin.html",
    "title": "geom_violin",
    "section": "",
    "text": "geoms.geom_violin(self, mapping=None, data=None, **kwargs)\nViolin Plot\nUsage\ngeom_violin(mapping=None, data=None, stat='ydensity', position='dodge',\n            na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n            width=None, trim=True, draw_quantiles=None, scale='area',\n            style='full', **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n#333333\n\n\n\n\nfill\n\n\nwhite\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nweight\n\n\n1\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_ydensity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_dodge) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\ndraw_quantiles : float or [float] draw horizontal lines at the given quantiles (0..1) of the density estimate. style : str, optional (default: ‘full’) The type of violin plot to draw. The options are:\n::\n   'full'        # Regular (2 sided violins)\n   'left'        # Left-sided half violins\n   'right'       # Right-sided half violins\n   'left-right'  # Alternate (left first) half violins by the group\n   'right-left'  # Alternate (right first) half violins by the group\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\nimport pandas.api.types as pdtypes\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    stage,\n    geom_violin,\n    geom_point,\n    geom_line,\n    geom_boxplot,\n    scale_fill_manual,\n    theme,\n    theme_classic\n)\n\n\n\nComparing repeated measurements and their summaries\nSuppose you have two sets of related data and each point in the first set maps onto a point in the second set. e.g. they could represent a transition from one state to another for example two measurements of the height of pupils in different years.\nFor demonstration we shall generate data with a before measurement and an after measurement.\n\nnp.random.seed(123)\nn = 20\nmu = (1, 2.3)\nsigma = (1, 1.6)\n\nbefore = np.random.normal(loc=mu[0], scale=sigma[0], size=n)\nafter = np.random.normal(loc=mu[1], scale=sigma[1], size=n)\n\ndf = pd.DataFrame({\n    'value': np.hstack([before, after]),\n    'when': np.repeat(['before', 'after'], n),\n    'id': np.hstack([range(n), range(n)])\n})\n\ndf['when'] = df['when'].astype(pdtypes.CategoricalDtype(categories=['before', 'after']))\ndf.head()\n\n\n\n\n\n\n\n\nvalue\nwhen\nid\n\n\n\n\n0\n-0.085631\nbefore\n0\n\n\n1\n1.997345\nbefore\n1\n\n\n2\n1.282978\nbefore\n2\n\n\n3\n-0.506295\nbefore\n3\n\n\n4\n0.421400\nbefore\n4\n\n\n\n\n\n\n\nA basic violin plot shows distributions of the two sets of data.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd the original data in form of points.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df)\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe violins are symmetrical about the vertical axis and half a violin has the same information as the full violin. We cut (style) the violins in half and choose to alternate with the left half for the first one and the right half for the second.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df, style='left-right') # changed\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nLink up the points to get a sense of how the data the moves.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df, style='left-right') # changed\n + geom_point()\n + geom_line(aes(group='id'))          # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nMake gap between the points and the violions. i.e. shift the violins outward and the points & lines inward. We used stage mapping to get it done. For example\nx=stage('when', after_scale='x+shift*alt_sign(x)')\nsays, map the xaesthetic to the ‘when’ column/variable and after the scale computed the x locations add a shift to them. The calculated x locations of a discrete scale are consecutive numbers 1, 2, 3, ..., so we use that move objects of adjacent groups in opposite directions i.e $(-1)^1, (-1)^2, (-1)^3 … = -1, 1, -1… $\n\n# How much to shift the violin, points and lines\n# 0.1 is 10% of the allocated space for the category\nshift = 0.1\n\ndef alt_sign(x):\n    \"Alternate +1/-1 if x is even/odd\"\n    return (-1) ** x\n\nm1 = aes(x=stage('when', after_scale='x+shift*alt_sign(x)'))              # shift outward\nm2 = aes(x=stage('when', after_scale='x-shift*alt_sign(x)'), group='id')  # shift inward\n         \n(ggplot(df, aes('when', 'value'))\n + geom_violin(m1, style='left-right') # changed\n + geom_point(m2)                      # changed\n + geom_line(m2)                       # changed\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd a boxplot in the gap. The space between the flat edge of the violin and the center of the points is 2 * shift, so we can use the shift to control the width of the boxplot.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(m1, style='left-right')\n + geom_point(m2)\n + geom_line(m2)\n + geom_boxplot(width=shift)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFinall, style it up.\n\n# Gallery Plot\nlsize = 0.65\nfill_alpha = 0.7\n\n(ggplot(df, aes('when', 'value', fill='when'))\n + geom_violin(m1, style='left-right', alpha=fill_alpha, size=lsize, show_legend=False)\n + geom_point(m2, color='none', alpha=fill_alpha, size=2, show_legend=False)\n + geom_line(m2, color='gray', size=lsize, alpha=0.6)\n + geom_boxplot(width=shift, alpha=fill_alpha, size=lsize, show_legend=False)\n + scale_fill_manual(values=['dodgerblue', 'darkorange'])\n + theme_classic()\n + theme(figure_size=(8, 6))\n)\n\n\n\n\n&lt;Figure Size: (800 x 600)&gt;\n\n\nCredit: This is example is motivated by the work of Jordy van Langen (@jorvlan) at https://github.com/jorvlan/open-visualizations.\n\nSource: Violins, Boxes, Points and Lines"
  },
  {
    "objectID": "reference/geom_violin.html#parameters",
    "href": "reference/geom_violin.html#parameters",
    "title": "geom_violin",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n#333333\n\n\n\n\nfill\n\n\nwhite\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nweight\n\n\n1\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_ydensity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_dodge) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\ndraw_quantiles : float or [float] draw horizontal lines at the given quantiles (0..1) of the density estimate. style : str, optional (default: ‘full’) The type of violin plot to draw. The options are:\n::\n   'full'        # Regular (2 sided violins)\n   'left'        # Left-sided half violins\n   'right'       # Right-sided half violins\n   'left-right'  # Alternate (left first) half violins by the group\n   'right-left'  # Alternate (right first) half violins by the group"
  },
  {
    "objectID": "reference/geom_violin.html#examples",
    "href": "reference/geom_violin.html#examples",
    "title": "geom_violin",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport pandas.api.types as pdtypes\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    stage,\n    geom_violin,\n    geom_point,\n    geom_line,\n    geom_boxplot,\n    scale_fill_manual,\n    theme,\n    theme_classic\n)\n\n\n\nComparing repeated measurements and their summaries\nSuppose you have two sets of related data and each point in the first set maps onto a point in the second set. e.g. they could represent a transition from one state to another for example two measurements of the height of pupils in different years.\nFor demonstration we shall generate data with a before measurement and an after measurement.\n\nnp.random.seed(123)\nn = 20\nmu = (1, 2.3)\nsigma = (1, 1.6)\n\nbefore = np.random.normal(loc=mu[0], scale=sigma[0], size=n)\nafter = np.random.normal(loc=mu[1], scale=sigma[1], size=n)\n\ndf = pd.DataFrame({\n    'value': np.hstack([before, after]),\n    'when': np.repeat(['before', 'after'], n),\n    'id': np.hstack([range(n), range(n)])\n})\n\ndf['when'] = df['when'].astype(pdtypes.CategoricalDtype(categories=['before', 'after']))\ndf.head()\n\n\n\n\n\n\n\n\nvalue\nwhen\nid\n\n\n\n\n0\n-0.085631\nbefore\n0\n\n\n1\n1.997345\nbefore\n1\n\n\n2\n1.282978\nbefore\n2\n\n\n3\n-0.506295\nbefore\n3\n\n\n4\n0.421400\nbefore\n4\n\n\n\n\n\n\n\nA basic violin plot shows distributions of the two sets of data.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd the original data in form of points.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df)\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe violins are symmetrical about the vertical axis and half a violin has the same information as the full violin. We cut (style) the violins in half and choose to alternate with the left half for the first one and the right half for the second.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df, style='left-right') # changed\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nLink up the points to get a sense of how the data the moves.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df, style='left-right') # changed\n + geom_point()\n + geom_line(aes(group='id'))          # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nMake gap between the points and the violions. i.e. shift the violins outward and the points & lines inward. We used stage mapping to get it done. For example\nx=stage('when', after_scale='x+shift*alt_sign(x)')\nsays, map the xaesthetic to the ‘when’ column/variable and after the scale computed the x locations add a shift to them. The calculated x locations of a discrete scale are consecutive numbers 1, 2, 3, ..., so we use that move objects of adjacent groups in opposite directions i.e $(-1)^1, (-1)^2, (-1)^3 … = -1, 1, -1… $\n\n# How much to shift the violin, points and lines\n# 0.1 is 10% of the allocated space for the category\nshift = 0.1\n\ndef alt_sign(x):\n    \"Alternate +1/-1 if x is even/odd\"\n    return (-1) ** x\n\nm1 = aes(x=stage('when', after_scale='x+shift*alt_sign(x)'))              # shift outward\nm2 = aes(x=stage('when', after_scale='x-shift*alt_sign(x)'), group='id')  # shift inward\n         \n(ggplot(df, aes('when', 'value'))\n + geom_violin(m1, style='left-right') # changed\n + geom_point(m2)                      # changed\n + geom_line(m2)                       # changed\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd a boxplot in the gap. The space between the flat edge of the violin and the center of the points is 2 * shift, so we can use the shift to control the width of the boxplot.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(m1, style='left-right')\n + geom_point(m2)\n + geom_line(m2)\n + geom_boxplot(width=shift)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFinall, style it up.\n\n# Gallery Plot\nlsize = 0.65\nfill_alpha = 0.7\n\n(ggplot(df, aes('when', 'value', fill='when'))\n + geom_violin(m1, style='left-right', alpha=fill_alpha, size=lsize, show_legend=False)\n + geom_point(m2, color='none', alpha=fill_alpha, size=2, show_legend=False)\n + geom_line(m2, color='gray', size=lsize, alpha=0.6)\n + geom_boxplot(width=shift, alpha=fill_alpha, size=lsize, show_legend=False)\n + scale_fill_manual(values=['dodgerblue', 'darkorange'])\n + theme_classic()\n + theme(figure_size=(8, 6))\n)\n\n\n\n\n&lt;Figure Size: (800 x 600)&gt;\n\n\nCredit: This is example is motivated by the work of Jordy van Langen (@jorvlan) at https://github.com/jorvlan/open-visualizations.\n\nSource: Violins, Boxes, Points and Lines"
  },
  {
    "objectID": "reference/geom_text.html",
    "href": "reference/geom_text.html",
    "title": "geom_text",
    "section": "",
    "text": "geoms.geom_text(self, mapping=None, data=None, **kwargs)\nTextual annotations\nUsage\ngeom_text(mapping=None, data=None, stat='identity', position='identity',\n          na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n          nudge_x=0, fontweight='normal', parse=False, format_string=None,\n          fontstyle='normal', path_effects=None, nudge_y=0, adjust_text=None,\n          family=None, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nlabel\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\nangle\n\n\n0\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nha\n\n\ncenter\n\n\n\n\nlineheight\n\n\n1.2\n\n\n\n\nsize\n\n\n11\n\n\n\n\nva\n\n\ncenter\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_label\nmatplotlib.text.Text\nmatplotlib.patheffects"
  },
  {
    "objectID": "reference/geom_text.html#parameters",
    "href": "reference/geom_text.html#parameters",
    "title": "geom_text",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nlabel\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\nangle\n\n\n0\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nha\n\n\ncenter\n\n\n\n\nlineheight\n\n\n1.2\n\n\n\n\nsize\n\n\n11\n\n\n\n\nva\n\n\ncenter\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone"
  },
  {
    "objectID": "reference/geom_text.html#see-also",
    "href": "reference/geom_text.html#see-also",
    "title": "geom_text",
    "section": "",
    "text": "plotnine.geoms.geom_label\nmatplotlib.text.Text\nmatplotlib.patheffects"
  },
  {
    "objectID": "reference/geom_spoke.html",
    "href": "reference/geom_spoke.html",
    "title": "geom_spoke",
    "section": "",
    "text": "geoms.geom_spoke()\nLine segment parameterised by location, direction and distance\nUsage\ngeom_spoke(mapping=None, data=None, stat='identity', position='identity',\n           na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n           lineend='butt', arrow=None, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nangle\n\n\n\n\n\n\nradius\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_segment: For documentation of extraparameters."
  },
  {
    "objectID": "reference/geom_spoke.html#parameters",
    "href": "reference/geom_spoke.html#parameters",
    "title": "geom_spoke",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nangle\n\n\n\n\n\n\nradius\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_spoke.html#see-also",
    "href": "reference/geom_spoke.html#see-also",
    "title": "geom_spoke",
    "section": "",
    "text": "plotnine.geoms.geom_segment: For documentation of extraparameters."
  },
  {
    "objectID": "reference/geom_sina.html",
    "href": "reference/geom_sina.html",
    "title": "geom_sina",
    "section": "",
    "text": "geoms.geom_sina()\nDraw a sina plot\nA sina plot is a data visualization chart suitable for plotting any single variable in a multiclass dataset. It is an enhanced jitter strip chart, where the width of the jitter is controlled by the density distribution of the data within each class.\nUsage\ngeom_sina(mapping=None, data=None, stat='sina', position='dodge', na_rm=False,\n          inherit_aes=True, show_legend=None, raster=False, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.stats.stat_sina\n\n\n\n\nSidiropoulos, N., S. H. Sohi, T. L. Pedersen, B. T. Porse, O. Winther, N. Rapin, and F. O. Bagger. 2018. “SinaPlot: An Enhanced Chart for Simple and Truthful Representation of Single Observations over Multiple Classes.” J. Comp. Graph. Stat 27: 673–76."
  },
  {
    "objectID": "reference/geom_sina.html#parameters",
    "href": "reference/geom_sina.html#parameters",
    "title": "geom_sina",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_sina.html#see-also",
    "href": "reference/geom_sina.html#see-also",
    "title": "geom_sina",
    "section": "",
    "text": "plotnine.stats.stat_sina"
  },
  {
    "objectID": "reference/geom_sina.html#references",
    "href": "reference/geom_sina.html#references",
    "title": "geom_sina",
    "section": "",
    "text": "Sidiropoulos, N., S. H. Sohi, T. L. Pedersen, B. T. Porse, O. Winther, N. Rapin, and F. O. Bagger. 2018. “SinaPlot: An Enhanced Chart for Simple and Truthful Representation of Single Observations over Multiple Classes.” J. Comp. Graph. Stat 27: 673–76."
  },
  {
    "objectID": "reference/geom_rug.html",
    "href": "reference/geom_rug.html",
    "title": "geom_rug",
    "section": "",
    "text": "geoms.geom_rug()\nMarginal rug plot\nUsage\ngeom_rug(mapping=None, data=None, stat='identity', position='identity',\n         na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n         sides='bl', length=0.03, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nsides : str (default: bl) Sides onto which to draw the marks. Any combination chosen from the characters btlr, for bottom, top, left or right side marks. length: float length of marks in fractions of horizontal/vertical panel size (default 0.03)"
  },
  {
    "objectID": "reference/geom_rug.html#parameters",
    "href": "reference/geom_rug.html#parameters",
    "title": "geom_rug",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nsides : str (default: bl) Sides onto which to draw the marks. Any combination chosen from the characters btlr, for bottom, top, left or right side marks. length: float length of marks in fractions of horizontal/vertical panel size (default 0.03)"
  },
  {
    "objectID": "reference/geom_rect.html",
    "href": "reference/geom_rect.html",
    "title": "geom_rect",
    "section": "",
    "text": "geoms.geom_rect()\nRectangles\nUsage\ngeom_rect(mapping=None, data=None, stat='identity', position='identity',\n          na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n          **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nxmax\n\n\n\n\n\n\nxmin\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#595959\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_rect.html#parameters",
    "href": "reference/geom_rect.html#parameters",
    "title": "geom_rect",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nxmax\n\n\n\n\n\n\nxmin\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#595959\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_quantile.html",
    "href": "reference/geom_quantile.html",
    "title": "geom_quantile",
    "section": "",
    "text": "geoms.geom_quantile()\nQuantile lines from a quantile regression\nUsage\ngeom_quantile(mapping=None, data=None, stat='quantile', position='identity',\n              na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n              lineend='butt', linejoin='round', **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n#3366FF\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_quantile) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nlineend : str (default: butt) Line end style, of of butt, round or projecting. This option is applied for solid linetypes. linejoin : str (default: round) Line join style, one of round, miter or bevel. This option is applied for solid linetypes."
  },
  {
    "objectID": "reference/geom_quantile.html#parameters",
    "href": "reference/geom_quantile.html#parameters",
    "title": "geom_quantile",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n#3366FF\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_quantile) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nlineend : str (default: butt) Line end style, of of butt, round or projecting. This option is applied for solid linetypes. linejoin : str (default: round) Line join style, one of round, miter or bevel. This option is applied for solid linetypes."
  },
  {
    "objectID": "reference/geom_qq.html",
    "href": "reference/geom_qq.html",
    "title": "geom_qq",
    "section": "",
    "text": "geoms.geom_qq()\nQuantile-Quantile plot\nUsage\ngeom_qq(mapping=None, data=None, stat='qq', position='identity', na_rm=False,\n        inherit_aes=True, show_legend=None, raster=False, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_qq) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_qq.html#parameters",
    "href": "reference/geom_qq.html#parameters",
    "title": "geom_qq",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_qq) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_pointrange.html",
    "href": "reference/geom_pointrange.html",
    "title": "geom_pointrange",
    "section": "",
    "text": "geoms.geom_pointrange()\nVertical interval represented by a line with a point\nUsage\ngeom_pointrange(mapping=None, data=None, stat='identity', position='identity',\n                na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n                fatten=4, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nfatten : float, optional (default: 2) A multiplicative factor used to increase the size of the point along the line-range."
  },
  {
    "objectID": "reference/geom_pointrange.html#parameters",
    "href": "reference/geom_pointrange.html#parameters",
    "title": "geom_pointrange",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nfatten : float, optional (default: 2) A multiplicative factor used to increase the size of the point along the line-range."
  },
  {
    "objectID": "reference/geom_point.html",
    "href": "reference/geom_point.html",
    "title": "geom_point",
    "section": "",
    "text": "geoms.geom_point()\nPlot points (Scatter plot)\nUsage\ngeom_point(mapping=None, data=None, stat='identity', position='identity',\n           na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n           **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    scale_color_gradient\n)\nfrom plotnine.data import mpg\n\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nBasic scatter plot\n\np = ggplot(aes(x='displ', y='cty'), mpg)\np + geom_point()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAesthetic mappings\n\np + geom_point(aes(color='factor(cyl)'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\np + geom_point(aes(shape='factor(cyl)'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\np + geom_point(aes(color='hwy'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nModify the color scale\n\np + geom_point(aes(color='hwy')) + scale_color_gradient(low='blue', high='red')\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\np + geom_point(aes(size='hwy'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nSource: geom_point.ipynb"
  },
  {
    "objectID": "reference/geom_point.html#parameters",
    "href": "reference/geom_point.html#parameters",
    "title": "geom_point",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_point.html#examples",
    "href": "reference/geom_point.html#examples",
    "title": "geom_point",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    scale_color_gradient\n)\nfrom plotnine.data import mpg\n\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nBasic scatter plot\n\np = ggplot(aes(x='displ', y='cty'), mpg)\np + geom_point()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAesthetic mappings\n\np + geom_point(aes(color='factor(cyl)'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\np + geom_point(aes(shape='factor(cyl)'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\np + geom_point(aes(color='hwy'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nModify the color scale\n\np + geom_point(aes(color='hwy')) + scale_color_gradient(low='blue', high='red')\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\np + geom_point(aes(size='hwy'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nSource: geom_point.ipynb"
  },
  {
    "objectID": "reference/geom_path.html",
    "href": "reference/geom_path.html",
    "title": "geom_path",
    "section": "",
    "text": "geoms.geom_path()\nConnected points\nUsage\ngeom_path(mapping=None, data=None, stat='identity', position='identity',\n          na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n          lineend='butt', arrow=None, linejoin='round', **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.arrow: for adding arrowhead(s) to paths.\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_path,\n    geom_line,\n    labs,\n    scale_color_continuous,\n    element_text,\n    theme\n)\nfrom plotnine.data import economics\n\n\n\ngeom_path() connects the observations in the order in which they appear in the data, this is different from geom_line() which connects observations in order of the variable on the x axis.\n\neconomics.head(10) # notice the rows are ordered by date\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n\n\n5\n1967-12-01\n525.8\n199657\n12.1\n4.8\n3018\n\n\n6\n1968-01-01\n531.5\n199808\n11.7\n5.1\n2878\n\n\n7\n1968-02-01\n534.2\n199920\n12.2\n4.5\n3001\n\n\n8\n1968-03-01\n544.9\n200056\n11.6\n4.1\n2877\n\n\n9\n1968-04-01\n544.6\n200208\n12.2\n4.6\n2709\n\n\n\n\n\n\n\nBecause the data is in date order geom_path() (in pint) produces the same result as geom_line() (in black):\n\n(\n    ggplot(economics, aes(x='date', y='unemploy')) \n    + geom_line(size=5)             # plot geom_line as the first layer                   \n    + geom_path(colour='#ff69b4',   # plot a path - colour pink \n               size=1)   \n    + labs(x='date', y='unemployment (,000)') # label x & y-axis\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nPlotting unemployment (scaled by population) versus savings rate shows how geom_path() differs from geom_line(). Because geom_path() connects the observations in the order in which they appear in the data, this line is like a “journey through time”:\n\n(\n    ggplot(economics, aes(x='unemploy/pop', y='psavert')) \n    + geom_path()                                    # plot geom path\n    + labs(x='scaled unemployment', y='saving rate') # label x & y-axis\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nComparing geom_line() (black) to geom_path() (pink) shows how these two plots differ in what they can show: geom_path() shows the savings rate has gone down over time, which is not evident with geom_path().\n\n(\n    ggplot(economics, aes(x='unemploy/pop', y='psavert')) \n    + geom_path(colour='#ff69b4', # plot geom_path as the first layer - colour pink\n                alpha=0.5,        # line transparency\n                size=2.5)         # line thickness\n    + geom_line()                   # layer geom_line \n    + labs(x='scaled unemployment', y='saving rate') # label x & y-axis\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe geom_path can be easier to interpret if time is coloured in. First convert time to a number, and use this number to colour the path:\n\n# convert date to a number \neconomics['date_as_number']=pd.to_numeric(economics['date'])\n\n\n# inspect new column\neconomics.head()\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\ndate_as_number\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n-79056000000000000\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n-76377600000000000\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n-73699200000000000\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n-71107200000000000\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n-68428800000000000\n\n\n\n\n\n\n\nThe path is coloured such that it changes with time using the command aes(colour='date_as_number') within geom_path().\n\n# input\nlegend_breaks=[-79056000000000000, 709948800000000000, 1401580800000000000] # used to modify colour-graded legend\nlegend_labels=[\"1967-Jul\", \"1992-Jun\",\"2014-Jun\"]\n\n# plot\n(\n    ggplot(economics, aes(x='unemploy/pop', y='psavert')) \n    + geom_path(aes(colour='date_as_number'))       # colour geom_path using time variable \"date_as_number\"\n    + labs(x='scaled unemployment', y='saving rate')\n    + scale_color_continuous(breaks=legend_breaks,  # set legend breaks (where labels will appear)\n                            labels=legend_labels)   # set labels on legend\n    + theme(legend_title=element_text(text='Date')) # set title of legend\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Path plots"
  },
  {
    "objectID": "reference/geom_path.html#parameters",
    "href": "reference/geom_path.html#parameters",
    "title": "geom_path",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_path.html#see-also",
    "href": "reference/geom_path.html#see-also",
    "title": "geom_path",
    "section": "",
    "text": "plotnine.geoms.arrow: for adding arrowhead(s) to paths."
  },
  {
    "objectID": "reference/geom_path.html#examples",
    "href": "reference/geom_path.html#examples",
    "title": "geom_path",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_path,\n    geom_line,\n    labs,\n    scale_color_continuous,\n    element_text,\n    theme\n)\nfrom plotnine.data import economics\n\n\n\ngeom_path() connects the observations in the order in which they appear in the data, this is different from geom_line() which connects observations in order of the variable on the x axis.\n\neconomics.head(10) # notice the rows are ordered by date\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n\n\n5\n1967-12-01\n525.8\n199657\n12.1\n4.8\n3018\n\n\n6\n1968-01-01\n531.5\n199808\n11.7\n5.1\n2878\n\n\n7\n1968-02-01\n534.2\n199920\n12.2\n4.5\n3001\n\n\n8\n1968-03-01\n544.9\n200056\n11.6\n4.1\n2877\n\n\n9\n1968-04-01\n544.6\n200208\n12.2\n4.6\n2709\n\n\n\n\n\n\n\nBecause the data is in date order geom_path() (in pint) produces the same result as geom_line() (in black):\n\n(\n    ggplot(economics, aes(x='date', y='unemploy')) \n    + geom_line(size=5)             # plot geom_line as the first layer                   \n    + geom_path(colour='#ff69b4',   # plot a path - colour pink \n               size=1)   \n    + labs(x='date', y='unemployment (,000)') # label x & y-axis\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nPlotting unemployment (scaled by population) versus savings rate shows how geom_path() differs from geom_line(). Because geom_path() connects the observations in the order in which they appear in the data, this line is like a “journey through time”:\n\n(\n    ggplot(economics, aes(x='unemploy/pop', y='psavert')) \n    + geom_path()                                    # plot geom path\n    + labs(x='scaled unemployment', y='saving rate') # label x & y-axis\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nComparing geom_line() (black) to geom_path() (pink) shows how these two plots differ in what they can show: geom_path() shows the savings rate has gone down over time, which is not evident with geom_path().\n\n(\n    ggplot(economics, aes(x='unemploy/pop', y='psavert')) \n    + geom_path(colour='#ff69b4', # plot geom_path as the first layer - colour pink\n                alpha=0.5,        # line transparency\n                size=2.5)         # line thickness\n    + geom_line()                   # layer geom_line \n    + labs(x='scaled unemployment', y='saving rate') # label x & y-axis\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe geom_path can be easier to interpret if time is coloured in. First convert time to a number, and use this number to colour the path:\n\n# convert date to a number \neconomics['date_as_number']=pd.to_numeric(economics['date'])\n\n\n# inspect new column\neconomics.head()\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\ndate_as_number\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n-79056000000000000\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n-76377600000000000\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n-73699200000000000\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n-71107200000000000\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n-68428800000000000\n\n\n\n\n\n\n\nThe path is coloured such that it changes with time using the command aes(colour='date_as_number') within geom_path().\n\n# input\nlegend_breaks=[-79056000000000000, 709948800000000000, 1401580800000000000] # used to modify colour-graded legend\nlegend_labels=[\"1967-Jul\", \"1992-Jun\",\"2014-Jun\"]\n\n# plot\n(\n    ggplot(economics, aes(x='unemploy/pop', y='psavert')) \n    + geom_path(aes(colour='date_as_number'))       # colour geom_path using time variable \"date_as_number\"\n    + labs(x='scaled unemployment', y='saving rate')\n    + scale_color_continuous(breaks=legend_breaks,  # set legend breaks (where labels will appear)\n                            labels=legend_labels)   # set labels on legend\n    + theme(legend_title=element_text(text='Date')) # set title of legend\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Path plots"
  },
  {
    "objectID": "reference/geom_linerange.html",
    "href": "reference/geom_linerange.html",
    "title": "geom_linerange",
    "section": "",
    "text": "geoms.geom_linerange()\nVertical interval represented by lines\nUsage\ngeom_linerange(mapping=None, data=None, stat='identity', position='identity',\n               na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n               **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_linerange.html#parameters",
    "href": "reference/geom_linerange.html#parameters",
    "title": "geom_linerange",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_label.html",
    "href": "reference/geom_label.html",
    "title": "geom_label",
    "section": "",
    "text": "geoms.geom_label()\nTextual annotations with a background\nUsage\ngeom_label(mapping=None, data=None, stat='identity', position='identity',\n           na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n           label_padding=0.25, nudge_x=0, fontweight='normal', parse=False,\n           format_string=None, fontstyle='normal', label_size=0.7,\n           path_effects=None, boxstyle='round', boxcolor=None, label_r=0.25,\n           tooth_size=None, nudge_y=0, adjust_text=None, family=None,\n           **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nlabel\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\nangle\n\n\n0\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\nwhite\n\n\n\n\ngroup\n\n\n\n\n\n\nha\n\n\ncenter\n\n\n\n\nlineheight\n\n\n1.2\n\n\n\n\nsize\n\n\n11\n\n\n\n\nva\n\n\ncenter\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_text: For documentation of theparameters. matplotlib.patches.BoxStyle for theparameters that affect the boxstyle."
  },
  {
    "objectID": "reference/geom_label.html#parameters",
    "href": "reference/geom_label.html#parameters",
    "title": "geom_label",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nlabel\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\nangle\n\n\n0\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\nwhite\n\n\n\n\ngroup\n\n\n\n\n\n\nha\n\n\ncenter\n\n\n\n\nlineheight\n\n\n1.2\n\n\n\n\nsize\n\n\n11\n\n\n\n\nva\n\n\ncenter\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_label.html#see-also",
    "href": "reference/geom_label.html#see-also",
    "title": "geom_label",
    "section": "",
    "text": "plotnine.geoms.geom_text: For documentation of theparameters. matplotlib.patches.BoxStyle for theparameters that affect the boxstyle."
  },
  {
    "objectID": "reference/geom_hline.html",
    "href": "reference/geom_hline.html",
    "title": "geom_hline",
    "section": "",
    "text": "geoms.geom_hline(self, mapping=None, data=None, **kwargs)\nHorizontal line\nUsage\ngeom_hline(mapping=None, data=None, stat='identity', position='identity',\n           na_rm=False, inherit_aes=False, show_legend=None, raster=False,\n           **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nyintercept\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: False) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_hline,\n    facet_grid,\n    labs\n)\nfrom plotnine.data import mpg\n\n\n\ngeom_hline() draws a vertical line, and is useful as a guide.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nIt’s useful to use geom_hline() with some data, so we start with a basic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nNow add a horizontal line to the scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = 25) # add one horizonal line\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add many horizontal lines:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = [25,35,45]) # add many horizontal lines using a list\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can change the look of the line:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = 25,\n                  color='yellow',    # set line colour\n                  size=2,            # set line thickness\n                  linetype=\"dashed\"  # set line type\n                 )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAnd you can add horizontal lines to a facet plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = 25) # add a vertical line...\n    + facet_grid('drv ~ .')      # ... to a facet plot\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Horizontal line"
  },
  {
    "objectID": "reference/geom_hline.html#parameters",
    "href": "reference/geom_hline.html#parameters",
    "title": "geom_hline",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nyintercept\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: False) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_hline.html#examples",
    "href": "reference/geom_hline.html#examples",
    "title": "geom_hline",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_hline,\n    facet_grid,\n    labs\n)\nfrom plotnine.data import mpg\n\n\n\ngeom_hline() draws a vertical line, and is useful as a guide.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nIt’s useful to use geom_hline() with some data, so we start with a basic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nNow add a horizontal line to the scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = 25) # add one horizonal line\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add many horizontal lines:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = [25,35,45]) # add many horizontal lines using a list\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can change the look of the line:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = 25,\n                  color='yellow',    # set line colour\n                  size=2,            # set line thickness\n                  linetype=\"dashed\"  # set line type\n                 )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAnd you can add horizontal lines to a facet plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_hline(yintercept = 25) # add a vertical line...\n    + facet_grid('drv ~ .')      # ... to a facet plot\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Horizontal line"
  },
  {
    "objectID": "reference/geom_freqpoly.html",
    "href": "reference/geom_freqpoly.html",
    "title": "geom_freqpoly",
    "section": "",
    "text": "geom_freqpoly\ngeoms.geom_freqpoly()\nFrequency polygon\nUsage\ngeom_freqpoly(mapping=None, data=None, stat='bin', position='identity',\n              na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n              lineend='butt', arrow=None, linejoin='round', **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\nSee geom_path for documentation of the parameters."
  },
  {
    "objectID": "reference/geom_errorbar.html",
    "href": "reference/geom_errorbar.html",
    "title": "geom_errorbar",
    "section": "",
    "text": "geoms.geom_errorbar()\nVertical interval represented as an errorbar\nUsage\ngeom_errorbar(mapping=None, data=None, stat='identity', position='identity',\n              na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n              width=0.5, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nwidth : float or None, optional (default: 0.5) Bar width. If None, the width is set to 90% of the resolution of the data."
  },
  {
    "objectID": "reference/geom_errorbar.html#parameters",
    "href": "reference/geom_errorbar.html#parameters",
    "title": "geom_errorbar",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nwidth : float or None, optional (default: 0.5) Bar width. If None, the width is set to 90% of the resolution of the data."
  },
  {
    "objectID": "reference/geom_density_2d.html",
    "href": "reference/geom_density_2d.html",
    "title": "geom_density_2d",
    "section": "",
    "text": "geoms.geom_density_2d()\n2D density estimate\nThis is a 2d version of geom_density.\nUsage\ngeom_density_2d(mapping=None, data=None, stat='density_2d',\n                position='identity', na_rm=False, inherit_aes=True,\n                show_legend=None, raster=False, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_density_2d) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_density_2d.html#parameters",
    "href": "reference/geom_density_2d.html#parameters",
    "title": "geom_density_2d",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_density_2d) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_crossbar.html",
    "href": "reference/geom_crossbar.html",
    "title": "geom_crossbar",
    "section": "",
    "text": "geoms.geom_crossbar()\nVertical interval represented by a crossbar\nUsage\ngeom_crossbar(mapping=None, data=None, stat='identity', position='identity',\n              na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n              fatten=2, width=0.5, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nwidth : float or None, optional (default: 0.5) Box width. If None, the width is set to 90% of the resolution of the data. fatten : float, optional (default: 2) A multiplicative factor used to increase the size of the middle bar across the box."
  },
  {
    "objectID": "reference/geom_crossbar.html#parameters",
    "href": "reference/geom_crossbar.html#parameters",
    "title": "geom_crossbar",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nwidth : float or None, optional (default: 0.5) Box width. If None, the width is set to 90% of the resolution of the data. fatten : float, optional (default: 2) A multiplicative factor used to increase the size of the middle bar across the box."
  },
  {
    "objectID": "reference/geom_col.html",
    "href": "reference/geom_col.html",
    "title": "geom_col",
    "section": "",
    "text": "geoms.geom_col()\nBar plot with base on the x-axis\nThis is an alternate version of geom_bar that maps the height of bars to an existing variable in your data. If you want the height of the bar to represent a count of cases, use geom_bar.\nUsage\ngeom_col(mapping=None, data=None, stat='identity', position='stack',\n         na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n         width=None, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#595959\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_bar\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_col,\n    geom_text,\n    position_dodge,\n    lims,\n    theme,\n    element_text,\n    element_blank,\n    element_rect,\n    element_line,\n)\n\n\n\nVisualising on a single plot the values of a variable that has nested (and independent) variables\nCreate the data\n\ndf = pd.DataFrame({\n    'variable': ['gender', 'gender', 'age', 'age', 'age', 'income', 'income', 'income', 'income'],\n    'category': ['Female', 'Male', '1-24', '25-54', '55+', 'Lo', 'Lo-Med', 'Med', 'High'],\n    'value': [60, 40, 50, 30, 20, 10, 25, 25, 40],\n})\ndf['variable'] = pd.Categorical(df['variable'], categories=['gender', 'age', 'income'])\ndf['category'] = pd.Categorical(df['category'], categories=df['category'])\n\ndf\n\n\n\n\n\n\n\n\nvariable\ncategory\nvalue\n\n\n\n\n0\ngender\nFemale\n60\n\n\n1\ngender\nMale\n40\n\n\n2\nage\n1-24\n50\n\n\n3\nage\n25-54\n30\n\n\n4\nage\n55+\n20\n\n\n5\nincome\nLo\n10\n\n\n6\nincome\nLo-Med\n25\n\n\n7\nincome\nMed\n25\n\n\n8\nincome\nHigh\n40\n\n\n\n\n\n\n\nWe want to visualise this data and at a galance get an idea to how the value breaks down along the categorys for the different variable. Note that each variable has different categorys.\nFirst we make a simple plot with all this information and see what to draw from it.\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAll the values along each variable add up to 100, but stacked together the difference within and without the groups is not clear. The solution is to dodge the bars.\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge'))                     # modified\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThis is good, it gives us the plot we want but the legend is not great. Each variable has a different set of categorys, but the legend has them all clamped together. We cannot easily change the legend, but we can replicate it’s purpose by labelling the individual bars.\nTo do this, we create a geom_text with position_dodge(width=0.9) to match the ratio of the space taken up by each variable. If there was no spacing between the bars of different variables, we would have width=1.\nA minor quack, when text extends beyond the limits we have to manually make space or it would get clipped. Therefore we adjust the bottom y limits.\n\ndodge_text = position_dodge(width=0.9)                              # new\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)   # modified\n + geom_text(aes(y=-.5, label='category'),                          # new\n             position=dodge_text,\n             color='gray', size=8, angle=45, va='top')\n + lims(y=(-5, 60))                                                 # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWould it look too crowded if we add value labels on top of the bars?\n\ndodge_text = position_dodge(width=0.9)\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)\n + geom_text(aes(y=-.5, label='category'),\n             position=dodge_text,\n             color='gray', size=8, angle=45, va='top')\n + geom_text(aes(label='value'),                                    # new\n             position=dodge_text,\n             size=8, va='bottom', format_string='{}%')\n + lims(y=(-5, 60))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat looks okay. The values line up with the categorys because we used the same dodge parameters. For the final polish, we remove the y-axis, clear out the panel and make the variable and category labels have the same color.\n\ndodge_text = position_dodge(width=0.9)\nccolor = '#555555'\n\n# Gallery Plot\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)\n + geom_text(aes(y=-.5, label='category'),\n             position=dodge_text,\n             color=ccolor, size=8, angle=45, va='top')              # modified\n + geom_text(aes(label='value'),\n             position=dodge_text,\n             size=8, va='bottom', format_string='{}%')\n + lims(y=(-5, 60))\n + theme(panel_background=element_rect(fill='white'),               # new\n         axis_title_y=element_blank(),\n         axis_line_x=element_line(color='black'),\n         axis_line_y=element_blank(),\n         axis_text_y=element_blank(),\n         axis_text_x=element_text(color=ccolor),\n         axis_ticks_major_y=element_blank(),\n         panel_grid=element_blank(),\n         panel_border=element_blank())\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nCredit: I saved a plot this example is based on a while ago and forgot/misplaced the link to the source. The user considered it a minor coup.\n\nSource: Two Variable Bar Plot"
  },
  {
    "objectID": "reference/geom_col.html#parameters",
    "href": "reference/geom_col.html#parameters",
    "title": "geom_col",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#595959\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_col.html#see-also",
    "href": "reference/geom_col.html#see-also",
    "title": "geom_col",
    "section": "",
    "text": "plotnine.geoms.geom_bar"
  },
  {
    "objectID": "reference/geom_col.html#examples",
    "href": "reference/geom_col.html#examples",
    "title": "geom_col",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_col,\n    geom_text,\n    position_dodge,\n    lims,\n    theme,\n    element_text,\n    element_blank,\n    element_rect,\n    element_line,\n)\n\n\n\nVisualising on a single plot the values of a variable that has nested (and independent) variables\nCreate the data\n\ndf = pd.DataFrame({\n    'variable': ['gender', 'gender', 'age', 'age', 'age', 'income', 'income', 'income', 'income'],\n    'category': ['Female', 'Male', '1-24', '25-54', '55+', 'Lo', 'Lo-Med', 'Med', 'High'],\n    'value': [60, 40, 50, 30, 20, 10, 25, 25, 40],\n})\ndf['variable'] = pd.Categorical(df['variable'], categories=['gender', 'age', 'income'])\ndf['category'] = pd.Categorical(df['category'], categories=df['category'])\n\ndf\n\n\n\n\n\n\n\n\nvariable\ncategory\nvalue\n\n\n\n\n0\ngender\nFemale\n60\n\n\n1\ngender\nMale\n40\n\n\n2\nage\n1-24\n50\n\n\n3\nage\n25-54\n30\n\n\n4\nage\n55+\n20\n\n\n5\nincome\nLo\n10\n\n\n6\nincome\nLo-Med\n25\n\n\n7\nincome\nMed\n25\n\n\n8\nincome\nHigh\n40\n\n\n\n\n\n\n\nWe want to visualise this data and at a galance get an idea to how the value breaks down along the categorys for the different variable. Note that each variable has different categorys.\nFirst we make a simple plot with all this information and see what to draw from it.\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAll the values along each variable add up to 100, but stacked together the difference within and without the groups is not clear. The solution is to dodge the bars.\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge'))                     # modified\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThis is good, it gives us the plot we want but the legend is not great. Each variable has a different set of categorys, but the legend has them all clamped together. We cannot easily change the legend, but we can replicate it’s purpose by labelling the individual bars.\nTo do this, we create a geom_text with position_dodge(width=0.9) to match the ratio of the space taken up by each variable. If there was no spacing between the bars of different variables, we would have width=1.\nA minor quack, when text extends beyond the limits we have to manually make space or it would get clipped. Therefore we adjust the bottom y limits.\n\ndodge_text = position_dodge(width=0.9)                              # new\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)   # modified\n + geom_text(aes(y=-.5, label='category'),                          # new\n             position=dodge_text,\n             color='gray', size=8, angle=45, va='top')\n + lims(y=(-5, 60))                                                 # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWould it look too crowded if we add value labels on top of the bars?\n\ndodge_text = position_dodge(width=0.9)\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)\n + geom_text(aes(y=-.5, label='category'),\n             position=dodge_text,\n             color='gray', size=8, angle=45, va='top')\n + geom_text(aes(label='value'),                                    # new\n             position=dodge_text,\n             size=8, va='bottom', format_string='{}%')\n + lims(y=(-5, 60))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat looks okay. The values line up with the categorys because we used the same dodge parameters. For the final polish, we remove the y-axis, clear out the panel and make the variable and category labels have the same color.\n\ndodge_text = position_dodge(width=0.9)\nccolor = '#555555'\n\n# Gallery Plot\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)\n + geom_text(aes(y=-.5, label='category'),\n             position=dodge_text,\n             color=ccolor, size=8, angle=45, va='top')              # modified\n + geom_text(aes(label='value'),\n             position=dodge_text,\n             size=8, va='bottom', format_string='{}%')\n + lims(y=(-5, 60))\n + theme(panel_background=element_rect(fill='white'),               # new\n         axis_title_y=element_blank(),\n         axis_line_x=element_line(color='black'),\n         axis_line_y=element_blank(),\n         axis_text_y=element_blank(),\n         axis_text_x=element_text(color=ccolor),\n         axis_ticks_major_y=element_blank(),\n         panel_grid=element_blank(),\n         panel_border=element_blank())\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nCredit: I saved a plot this example is based on a while ago and forgot/misplaced the link to the source. The user considered it a minor coup.\n\nSource: Two Variable Bar Plot"
  },
  {
    "objectID": "reference/geom_blank.html",
    "href": "reference/geom_blank.html",
    "title": "geom_blank",
    "section": "",
    "text": "geoms.geom_blank()\nAn empty plot\nUsage\ngeom_blank(mapping=None, data=None, stat='identity', position='identity',\n           na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n           **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_blank.html#parameters",
    "href": "reference/geom_blank.html#parameters",
    "title": "geom_blank",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_bar.html",
    "href": "reference/geom_bar.html",
    "title": "geom_bar",
    "section": "",
    "text": "geoms.geom_bar()\nBar plot\nUsage\ngeom_bar(mapping=None, data=None, stat='count', position='stack', na_rm=False,\n         inherit_aes=True, show_legend=None, raster=False, width=None,\n         **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#595959\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_histogram\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_bar,\n    coord_flip,\n    theme_classic\n)\nfrom plotnine.data import mpg\n\n\n\ngeom_bar() makes the height of the bar proportional to the number of cases in each group\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\nggplot(mpg) + geom_bar(aes(x='class'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nggplot(mpg) + geom_bar(aes(x='class', fill='drv'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(\n    ggplot(mpg) \n    + geom_bar(aes(x='class', fill='drv'))\n    + coord_flip()\n    + theme_classic()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Bar chart"
  },
  {
    "objectID": "reference/geom_bar.html#parameters",
    "href": "reference/geom_bar.html#parameters",
    "title": "geom_bar",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#595959\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_bar.html#see-also",
    "href": "reference/geom_bar.html#see-also",
    "title": "geom_bar",
    "section": "",
    "text": "plotnine.geoms.geom_histogram"
  },
  {
    "objectID": "reference/geom_bar.html#examples",
    "href": "reference/geom_bar.html#examples",
    "title": "geom_bar",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_bar,\n    coord_flip,\n    theme_classic\n)\nfrom plotnine.data import mpg\n\n\n\ngeom_bar() makes the height of the bar proportional to the number of cases in each group\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\nggplot(mpg) + geom_bar(aes(x='class'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nggplot(mpg) + geom_bar(aes(x='class', fill='drv'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(\n    ggplot(mpg) \n    + geom_bar(aes(x='class', fill='drv'))\n    + coord_flip()\n    + theme_classic()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Bar chart"
  },
  {
    "objectID": "reference/geom_abline.html",
    "href": "reference/geom_abline.html",
    "title": "geom_abline",
    "section": "",
    "text": "geoms.geom_abline(self, mapping=None, data=None, **kwargs)\nLines specified by slope and intercept\nUsage\ngeom_abline(mapping=None, data=None, stat='identity', position='identity',\n            na_rm=False, inherit_aes=False, show_legend=None, raster=False,\n            **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nintercept\n\n\n\n\n\n\nslope\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: False) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    labs,\n    geom_abline,\n    facet_grid\n)\nfrom plotnine.data import mpg\n\n\n\ngeom_abline() draws a line when the yintercept and gradient is supplied, and is useful as a guide.\n\n# inspect the data\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nIt’s useful to use geom_abline() with some data, so we start with a basic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nNow layer a line over the scatter plot using geom_abline(). geom_abline() requires inputs for the slope (default slope is 1) and y-intercept (default value is [0,0]).\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_abline(intercept=45, # set the y-intercept value\n                  slope=-5      # set the slope value\n                 ) \n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can plot two lines on one plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()                   \n    + geom_abline(intercept=[45,45], # add many lines to a plot using a list for the y-intercepts...\n                  slope=[-5,-7]      # ... and for the slopes\n                 )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can change the look of the line:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_abline(intercept=45,\n                  slope=-5,\n                  color='blue',      # set line colour\n                  size=2,            # set line thickness\n                  linetype=\"dashed\"  # set line type\n                 )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\ngeom_abline() can be used with a facet plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_abline(intercept=45,slope=-5)     # add a line ...\n    + facet_grid('drv ~ .')                  # ... to a facet plot.\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: AB line"
  },
  {
    "objectID": "reference/geom_abline.html#parameters",
    "href": "reference/geom_abline.html#parameters",
    "title": "geom_abline",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nintercept\n\n\n\n\n\n\nslope\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: False) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_abline.html#examples",
    "href": "reference/geom_abline.html#examples",
    "title": "geom_abline",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    labs,\n    geom_abline,\n    facet_grid\n)\nfrom plotnine.data import mpg\n\n\n\ngeom_abline() draws a line when the yintercept and gradient is supplied, and is useful as a guide.\n\n# inspect the data\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nIt’s useful to use geom_abline() with some data, so we start with a basic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nNow layer a line over the scatter plot using geom_abline(). geom_abline() requires inputs for the slope (default slope is 1) and y-intercept (default value is [0,0]).\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_abline(intercept=45, # set the y-intercept value\n                  slope=-5      # set the slope value\n                 ) \n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can plot two lines on one plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()                   \n    + geom_abline(intercept=[45,45], # add many lines to a plot using a list for the y-intercepts...\n                  slope=[-5,-7]      # ... and for the slopes\n                 )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can change the look of the line:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_abline(intercept=45,\n                  slope=-5,\n                  color='blue',      # set line colour\n                  size=2,            # set line thickness\n                  linetype=\"dashed\"  # set line type\n                 )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\ngeom_abline() can be used with a facet plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_abline(intercept=45,slope=-5)     # add a line ...\n    + facet_grid('drv ~ .')                  # ... to a facet plot.\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: AB line"
  },
  {
    "objectID": "reference/figure_size.html",
    "href": "reference/figure_size.html",
    "title": "figure_size",
    "section": "",
    "text": "figure_size\noptions.figure_size"
  },
  {
    "objectID": "reference/faithful.html",
    "href": "reference/faithful.html",
    "title": "faithful",
    "section": "",
    "text": "faithful\ndata.faithful\nOld Faithful Geyser Data\n.. rubric:: Description\nWaiting time between eruptions and the duration of the eruption for the Old Faithful geyser in Yellowstone National Park, Wyoming, USA.\n.. rubric:: Format\nA data frame with 272 observations on 2 variables.\n========== ======================================== Column Description ========== ======================================== eruptions Eruption time in mins waiting Waiting time to next eruption (in mins) ========== ========================================\n.. rubric:: Details\nA closer look at faithful.eruptions reveals that these are heavily rounded times originally in seconds, where multiples of 5 are more frequent than expected under non-human measurement. For a better version of the eruption times, see the example below.\nThere are many versions of this dataset around: Azzalini and Bowman (1990) use a more complete version.\n.. rubric:: Source\nW. Härdle.\n.. rubric:: References\nHärdle, W. (1991) Smoothing Techniques with Implementation in S. New York: Springer.\nAzzalini, A. and Bowman, A. W. (1990). A look at some data on the Old Faithful geyser. Applied Statistics 39, 357–365."
  },
  {
    "objectID": "reference/facet_null.html",
    "href": "reference/facet_null.html",
    "title": "facet_null",
    "section": "",
    "text": "facets.facet_null(self, shrink=True)\nA single Panel\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nshrink\n\n\nbool\n\n\nWhether to shrink the scales to the output of the statistics instead of the raw data. Default is True.\n\n\nTrue"
  },
  {
    "objectID": "reference/facet_null.html#parameters",
    "href": "reference/facet_null.html#parameters",
    "title": "facet_null",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nshrink\n\n\nbool\n\n\nWhether to shrink the scales to the output of the statistics instead of the raw data. Default is True.\n\n\nTrue"
  },
  {
    "objectID": "reference/facet.html",
    "href": "reference/facet.html",
    "title": "facet",
    "section": "",
    "text": "facets.facet\n\n\n\n\n\nName\nDescription\n\n\n\n\nfacet\nBase class for all facets\n\n\n\n\n\nfacets.facet.facet(self, scales='fixed', shrink=True, labeller='label_value', as_table=True, drop=True, dir='h')\nBase class for all facets\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nscales\n\n\nstr in ['fixed', 'free', 'free_x', 'free_y']\n\n\nWhether x or y scales should be allowed (free) to vary according to the data along the rows or the columns. Default is 'fixed'.\n\n\n'fixed'\n\n\n\n\nshrink\n\n\nbool\n\n\nWhether to shrink the scales to the output of the statistics instead of the raw data. Default is True.\n\n\nTrue\n\n\n\n\nlabeller\n\n\nstr | function\n\n\nHow to label the facets. If it is a str, it should be one of 'label_value' 'label_both' or 'label_context'. Default is 'label_value'\n\n\n'label_value'\n\n\n\n\nas_table\n\n\nbool\n\n\nIf True, the facets are laid out like a table with the highest values at the bottom-right. If False the facets are laid out like a plot with the highest value a the top-right. Default it True.\n\n\nTrue\n\n\n\n\ndrop\n\n\nbool\n\n\nIf True, all factor levels not used in the data will automatically be dropped. If False, all factor levels will be shown, regardless of whether or not they appear in the data. Default is True.\n\n\nTrue\n\n\n\n\ndir\n\n\nstr in ['h', 'v']\n\n\nDirection in which to layout the panels. h for horizontal and v for vertical.\n\n\n'h'\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nas_table\nbool(x) -&gt; bool\n\n\ndrop\nbool(x) -&gt; bool\n\n\nnum_vars_x\nint([x]) -&gt; integer\n\n\nnum_vars_y\nint([x]) -&gt; integer\n\n\nshrink\nbool(x) -&gt; bool\n\n\nspace\nstr(object='') -&gt; str\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncompute_layout\nCompute layout\n\n\nfinish_data\nModify data before it is drawn out by the geom\n\n\nmake_ax_strips\nCreate strips for the facet\n\n\nmake_axes\nCreate and return Matplotlib axes\n\n\nmap\nAssign a data points to panels\n\n\nset_limits_breaks_and_labels\nAdd limits, breaks and labels to the axes\n\n\nset_properties\nCopy required properties from ggplot object\n\n\nsetup_data\nAllow the facet to manipulate the data\n\n\nsetup_params\nCreate facet parameters\n\n\ntrain_position_scales\nCompute ranges for the x and y scales\n\n\n\n\n\nfacets.facet.facet.compute_layout(self, data)\nCompute layout\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nDataframes\n\n\nDataframe for a each layer\n\n\nrequired\n\n\n\n\n\n\n\n\nfacets.facet.facet.finish_data(self, data, layout)\nModify data before it is drawn out by the geom\nThe default is to return the data without modification. Subclasses should override this method as the require.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nDataFrame\n\n\nA single layer’s data.\n\n\nrequired\n\n\n\n\nlayout\n\n\nLayout\n\n\nLayout\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nDataFrame\n\n\nModified layer data\n\n\n\n\n\n\n\n\nfacets.facet.facet.make_ax_strips(self, layout_info, ax)\nCreate strips for the facet\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlayout_info\n\n\ndict - like\n\n\nLayout information. Row from the layout table\n\n\nrequired\n\n\n\n\nax : axes Axes to label\n\n\n\n\nfacets.facet.facet.make_axes(self, figure, layout, coordinates)\nCreate and return Matplotlib axes\n\n\n\nfacets.facet.facet.map(self, data, layout)\nAssign a data points to panels\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nDataFrame\n\n\nData for a layer\n\n\nrequired\n\n\n\n\nlayout\n\n\nDataFrame\n\n\nAs returned by self.compute_layout\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nDataFrame\n\n\nData with all points mapped to the panels on which they will be plotted.\n\n\n\n\n\n\n\n\nfacets.facet.facet.set_limits_breaks_and_labels(self, panel_params, ax)\nAdd limits, breaks and labels to the axes\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nranges\n\n\ndict - like\n\n\nrange information for the axes\n\n\nrequired\n\n\n\n\nax\n\n\nAxes\n\n\nAxes\n\n\nrequired\n\n\n\n\n\n\n\n\nfacets.facet.facet.set_properties(self, gg)\nCopy required properties from ggplot object\n\n\n\nfacets.facet.facet.setup_data(self, data)\nAllow the facet to manipulate the data\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nlist of dataframes\n\n\nData for each of the layers\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nlist of dataframes\n\n\nData for each of the layers\n\n\n\n\n\n\n\nThis method will be called after setup_params, therefore the params property will be set.\n\n\n\n\nfacets.facet.facet.setup_params(self, data)\nCreate facet parameters\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nlist of dataframes\n\n\nPlot data and data for the layers\n\n\nrequired\n\n\n\n\n\n\n\n\nfacets.facet.facet.train_position_scales(self, layout, layers)\nCompute ranges for the x and y scales\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_missing_facets\nAdd missing facets\n\n\ncombine_vars\nGenerate all combinations of data needed for facetting\n\n\neval_facet_vars\nEvaluate facet variables\n\n\nlayout_null\nLayout Null\n\n\nunique_combs\nGenerate all possible combinations of the values in the columns\n\n\n\n\n\nfacets.facet.add_missing_facets(data, layout, vars, facet_vals)\nAdd missing facets\n\n\n\nfacets.facet.combine_vars(data, environment, vars, drop=True)\nGenerate all combinations of data needed for facetting\nThe first data frame in the list should be the default data for the plot. Other data frames in the list are ones that are added to the layers.\n\n\n\nfacets.facet.eval_facet_vars(data, vars, env)\nEvaluate facet variables\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nDataFrame\n\n\nFactet dataframe\n\n\nrequired\n\n\n\n\nvars\n\n\nlist\n\n\nFacet variables\n\n\nrequired\n\n\n\n\nenv\n\n\nenvironment\n\n\nPlot environment\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nDataFrame\n\n\nFacet values that correspond to the specified variables.\n\n\n\n\n\n\n\n\nfacets.facet.layout_null()\nLayout Null\n\n\n\nfacets.facet.unique_combs(df)\nGenerate all possible combinations of the values in the columns"
  },
  {
    "objectID": "reference/facet.html#classes",
    "href": "reference/facet.html#classes",
    "title": "facet",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nfacet\nBase class for all facets\n\n\n\n\n\nfacets.facet.facet(self, scales='fixed', shrink=True, labeller='label_value', as_table=True, drop=True, dir='h')\nBase class for all facets\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nscales\n\n\nstr in ['fixed', 'free', 'free_x', 'free_y']\n\n\nWhether x or y scales should be allowed (free) to vary according to the data along the rows or the columns. Default is 'fixed'.\n\n\n'fixed'\n\n\n\n\nshrink\n\n\nbool\n\n\nWhether to shrink the scales to the output of the statistics instead of the raw data. Default is True.\n\n\nTrue\n\n\n\n\nlabeller\n\n\nstr | function\n\n\nHow to label the facets. If it is a str, it should be one of 'label_value' 'label_both' or 'label_context'. Default is 'label_value'\n\n\n'label_value'\n\n\n\n\nas_table\n\n\nbool\n\n\nIf True, the facets are laid out like a table with the highest values at the bottom-right. If False the facets are laid out like a plot with the highest value a the top-right. Default it True.\n\n\nTrue\n\n\n\n\ndrop\n\n\nbool\n\n\nIf True, all factor levels not used in the data will automatically be dropped. If False, all factor levels will be shown, regardless of whether or not they appear in the data. Default is True.\n\n\nTrue\n\n\n\n\ndir\n\n\nstr in ['h', 'v']\n\n\nDirection in which to layout the panels. h for horizontal and v for vertical.\n\n\n'h'\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nas_table\nbool(x) -&gt; bool\n\n\ndrop\nbool(x) -&gt; bool\n\n\nnum_vars_x\nint([x]) -&gt; integer\n\n\nnum_vars_y\nint([x]) -&gt; integer\n\n\nshrink\nbool(x) -&gt; bool\n\n\nspace\nstr(object='') -&gt; str\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncompute_layout\nCompute layout\n\n\nfinish_data\nModify data before it is drawn out by the geom\n\n\nmake_ax_strips\nCreate strips for the facet\n\n\nmake_axes\nCreate and return Matplotlib axes\n\n\nmap\nAssign a data points to panels\n\n\nset_limits_breaks_and_labels\nAdd limits, breaks and labels to the axes\n\n\nset_properties\nCopy required properties from ggplot object\n\n\nsetup_data\nAllow the facet to manipulate the data\n\n\nsetup_params\nCreate facet parameters\n\n\ntrain_position_scales\nCompute ranges for the x and y scales\n\n\n\n\n\nfacets.facet.facet.compute_layout(self, data)\nCompute layout\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nDataframes\n\n\nDataframe for a each layer\n\n\nrequired\n\n\n\n\n\n\n\n\nfacets.facet.facet.finish_data(self, data, layout)\nModify data before it is drawn out by the geom\nThe default is to return the data without modification. Subclasses should override this method as the require.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nDataFrame\n\n\nA single layer’s data.\n\n\nrequired\n\n\n\n\nlayout\n\n\nLayout\n\n\nLayout\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nDataFrame\n\n\nModified layer data\n\n\n\n\n\n\n\n\nfacets.facet.facet.make_ax_strips(self, layout_info, ax)\nCreate strips for the facet\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlayout_info\n\n\ndict - like\n\n\nLayout information. Row from the layout table\n\n\nrequired\n\n\n\n\nax : axes Axes to label\n\n\n\n\nfacets.facet.facet.make_axes(self, figure, layout, coordinates)\nCreate and return Matplotlib axes\n\n\n\nfacets.facet.facet.map(self, data, layout)\nAssign a data points to panels\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nDataFrame\n\n\nData for a layer\n\n\nrequired\n\n\n\n\nlayout\n\n\nDataFrame\n\n\nAs returned by self.compute_layout\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nDataFrame\n\n\nData with all points mapped to the panels on which they will be plotted.\n\n\n\n\n\n\n\n\nfacets.facet.facet.set_limits_breaks_and_labels(self, panel_params, ax)\nAdd limits, breaks and labels to the axes\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nranges\n\n\ndict - like\n\n\nrange information for the axes\n\n\nrequired\n\n\n\n\nax\n\n\nAxes\n\n\nAxes\n\n\nrequired\n\n\n\n\n\n\n\n\nfacets.facet.facet.set_properties(self, gg)\nCopy required properties from ggplot object\n\n\n\nfacets.facet.facet.setup_data(self, data)\nAllow the facet to manipulate the data\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nlist of dataframes\n\n\nData for each of the layers\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nlist of dataframes\n\n\nData for each of the layers\n\n\n\n\n\n\n\nThis method will be called after setup_params, therefore the params property will be set.\n\n\n\n\nfacets.facet.facet.setup_params(self, data)\nCreate facet parameters\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nlist of dataframes\n\n\nPlot data and data for the layers\n\n\nrequired\n\n\n\n\n\n\n\n\nfacets.facet.facet.train_position_scales(self, layout, layers)\nCompute ranges for the x and y scales"
  },
  {
    "objectID": "reference/facet.html#functions",
    "href": "reference/facet.html#functions",
    "title": "facet",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_missing_facets\nAdd missing facets\n\n\ncombine_vars\nGenerate all combinations of data needed for facetting\n\n\neval_facet_vars\nEvaluate facet variables\n\n\nlayout_null\nLayout Null\n\n\nunique_combs\nGenerate all possible combinations of the values in the columns\n\n\n\n\n\nfacets.facet.add_missing_facets(data, layout, vars, facet_vals)\nAdd missing facets\n\n\n\nfacets.facet.combine_vars(data, environment, vars, drop=True)\nGenerate all combinations of data needed for facetting\nThe first data frame in the list should be the default data for the plot. Other data frames in the list are ones that are added to the layers.\n\n\n\nfacets.facet.eval_facet_vars(data, vars, env)\nEvaluate facet variables\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\nDataFrame\n\n\nFactet dataframe\n\n\nrequired\n\n\n\n\nvars\n\n\nlist\n\n\nFacet variables\n\n\nrequired\n\n\n\n\nenv\n\n\nenvironment\n\n\nPlot environment\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nDataFrame\n\n\nFacet values that correspond to the specified variables.\n\n\n\n\n\n\n\n\nfacets.facet.layout_null()\nLayout Null\n\n\n\nfacets.facet.unique_combs(df)\nGenerate all possible combinations of the values in the columns"
  },
  {
    "objectID": "reference/element_text.html",
    "href": "reference/element_text.html",
    "title": "element_text",
    "section": "",
    "text": "themes.element_text(self, family=None, style=None, weight=None, color=None, size=None, ha=None, va=None, rotation=None, linespacing=None, backgroundcolor=None, margin=None, **kwargs)\nTheme element: Text\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfamily\n\n\nstr\n\n\nFont family. See matplotlib.text.Text.set_family for supported values.\n\n\nNone\n\n\n\n\nstyle\n\n\nstr in ['normal', 'italic', 'oblique']\n\n\nFont style\n\n\nNone\n\n\n\n\ncolor\n\n\nstr | tuple\n\n\nText color\n\n\nNone\n\n\n\n\nweight\n\n\nstr\n\n\nShould be one of normal, bold, heavy, light, ultrabold or ultralight.\n\n\nNone\n\n\n\n\nsize\n\n\nfloat\n\n\ntext size\n\n\nNone\n\n\n\n\nha\n\n\nstr in ['center', 'left', 'right']\n\n\nHorizontal Alignment.\n\n\nNone\n\n\n\n\nva\n\n\nstr in ['center' , 'top', 'bottom', 'baseline']\n\n\nVertical alignment.\n\n\nNone\n\n\n\n\nrotation\n\n\nfloat\n\n\nRotation angle in the range [0, 360]\n\n\nNone\n\n\n\n\nlinespacing\n\n\nfloat\n\n\nLine spacing\n\n\nNone\n\n\n\n\nbackgroundcolor\n\n\nstr | tuple\n\n\nBackground color\n\n\nNone\n\n\n\n\nmargin\n\n\ndict\n\n\nMargin around the text. The keys are one of ['t', 'b', 'l', 'r'] and units. The units are one of ['pt', 'lines', 'in']. The units default to pt and the other keys to 0. Not all text themeables support margin parameters and other than the units, only some of the other keys may apply.\n\n\nNone\n\n\n\n\nkwargs\n\n\ndict\n\n\nParameters recognised by matplotlib.text.Text\n\n\n{}\n\n\n\n\n\n\n\nelement_text will accept parameters that conform to the ggplot2 element_text API, but it is preferable the Matplotlib based API described above."
  },
  {
    "objectID": "reference/element_text.html#parameters",
    "href": "reference/element_text.html#parameters",
    "title": "element_text",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfamily\n\n\nstr\n\n\nFont family. See matplotlib.text.Text.set_family for supported values.\n\n\nNone\n\n\n\n\nstyle\n\n\nstr in ['normal', 'italic', 'oblique']\n\n\nFont style\n\n\nNone\n\n\n\n\ncolor\n\n\nstr | tuple\n\n\nText color\n\n\nNone\n\n\n\n\nweight\n\n\nstr\n\n\nShould be one of normal, bold, heavy, light, ultrabold or ultralight.\n\n\nNone\n\n\n\n\nsize\n\n\nfloat\n\n\ntext size\n\n\nNone\n\n\n\n\nha\n\n\nstr in ['center', 'left', 'right']\n\n\nHorizontal Alignment.\n\n\nNone\n\n\n\n\nva\n\n\nstr in ['center' , 'top', 'bottom', 'baseline']\n\n\nVertical alignment.\n\n\nNone\n\n\n\n\nrotation\n\n\nfloat\n\n\nRotation angle in the range [0, 360]\n\n\nNone\n\n\n\n\nlinespacing\n\n\nfloat\n\n\nLine spacing\n\n\nNone\n\n\n\n\nbackgroundcolor\n\n\nstr | tuple\n\n\nBackground color\n\n\nNone\n\n\n\n\nmargin\n\n\ndict\n\n\nMargin around the text. The keys are one of ['t', 'b', 'l', 'r'] and units. The units are one of ['pt', 'lines', 'in']. The units default to pt and the other keys to 0. Not all text themeables support margin parameters and other than the units, only some of the other keys may apply.\n\n\nNone\n\n\n\n\nkwargs\n\n\ndict\n\n\nParameters recognised by matplotlib.text.Text\n\n\n{}"
  },
  {
    "objectID": "reference/element_text.html#notes",
    "href": "reference/element_text.html#notes",
    "title": "element_text",
    "section": "",
    "text": "element_text will accept parameters that conform to the ggplot2 element_text API, but it is preferable the Matplotlib based API described above."
  },
  {
    "objectID": "reference/element_line.html",
    "href": "reference/element_line.html",
    "title": "element_line",
    "section": "",
    "text": "themes.element_line(self, *, color=None, size=None, linetype=None, lineend=None, colour=None, **kwargs)\ntheme element: line\nused for backgrounds and borders\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncolor\n\n\nstr | tuple\n\n\nline color\n\n\nNone\n\n\n\n\ncolour\n\n\nstr | tuple\n\n\nalias of color\n\n\nNone\n\n\n\n\nlinetype\n\n\nstr | tuple\n\n\nline style. if a string, it should be one of solid, dashed, dashdot or dotted. you can create interesting dashed patterns using tuples, see :meth:matplotlib.lines.line2D.set_linestyle.\n\n\nNone\n\n\n\n\nsize\n\n\nfloat\n\n\nline thickness\n\n\nNone\n\n\n\n\nkwargs\n\n\ndict\n\n\nparameters recognised by :class:matplotlib.lines.line2d.\n\n\n{}"
  },
  {
    "objectID": "reference/element_line.html#parameters",
    "href": "reference/element_line.html#parameters",
    "title": "element_line",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncolor\n\n\nstr | tuple\n\n\nline color\n\n\nNone\n\n\n\n\ncolour\n\n\nstr | tuple\n\n\nalias of color\n\n\nNone\n\n\n\n\nlinetype\n\n\nstr | tuple\n\n\nline style. if a string, it should be one of solid, dashed, dashdot or dotted. you can create interesting dashed patterns using tuples, see :meth:matplotlib.lines.line2D.set_linestyle.\n\n\nNone\n\n\n\n\nsize\n\n\nfloat\n\n\nline thickness\n\n\nNone\n\n\n\n\nkwargs\n\n\ndict\n\n\nparameters recognised by :class:matplotlib.lines.line2d.\n\n\n{}"
  },
  {
    "objectID": "reference/economics.html",
    "href": "reference/economics.html",
    "title": "economics",
    "section": "",
    "text": "economics\ndata.economics\nUS economic time series.\n.. rubric:: Description\nThis dataset was produced from US economic time series data available from http://research.stlouisfed.org/fred2. economics is in “wide” format, economics_long is in “long” format.\n.. rubric:: Format\nA data frame with 478 rows and 6 variables\n========= ========================================================== Column Description ========= ========================================================== date Month of data collection psavert personal savings rate [1_] pce personal consumption expenditures, in billions of dollars [2_] unemploy number of unemployed in thousands, [3_] uempmed median duration of unemployment, in week [4_] pop total population, in thousands [5_] ========= ==========================================================\n.. _1: http://research.stlouisfed.org/fred2/series/PSAVERT/ .. _2: http://research.stlouisfed.org/fred2/series/PCE .. _3: http://research.stlouisfed.org/fred2/series/UNEMPLOY .. _4: http://research.stlouisfed.org/fred2/series/UEMPMED .. _5: http://research.stlouisfed.org/fred2/series/POP"
  },
  {
    "objectID": "reference/diamonds.html",
    "href": "reference/diamonds.html",
    "title": "diamonds",
    "section": "",
    "text": "diamonds\ndata.diamonds\nPrices of 50,000 round cut diamonds\n.. rubric:: Description\nA dataset containing the prices and other attributes of almost 54,000 diamonds. The variables are as follows:\n.. rubric:: Format\nA data frame with 53940 rows and 10 variables:\n======== ================================== Column Description ======== ================================== price price in US dollars ($326–$18,823) carat weight of the diamond (0.2–5.01) cut quality of the cut (Fair, Good, Very Good, Premium, Ideal) color diamond colour, from J (worst) to D (best) clarity a measurement of how clear the diamond is\n      (I1 (worst), SI1, SI2, VS1, VS2, VVS1, VVS2, IF (best))\nx length in mm (0–10.74) y width in mm (0–58.9) z depth in mm (0–31.8) depth total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43–79) table width of top of diamond relative to widest point (43–95) ======== =================================="
  },
  {
    "objectID": "reference/coord_trans.html",
    "href": "reference/coord_trans.html",
    "title": "coord_trans",
    "section": "",
    "text": "coords.coord_trans(self, x='identity', y='identity', xlim=None, ylim=None, expand=True)\nTransformed cartesian coordinate system\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nstr | trans\n\n\nName of transform or trans class to transform the x axis\n\n\n'identity'\n\n\n\n\ny\n\n\nstr | trans\n\n\nName of transform or trans class to transform the y axis\n\n\n'identity'\n\n\n\n\nxlim\n\n\nNone | (float, float)\n\n\nLimits for x axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nylim\n\n\nNone | (float, float)\n\n\nLimits for y axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nexpand\n\n\nbool\n\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data.\n\n\nTrue"
  },
  {
    "objectID": "reference/coord_trans.html#parameters",
    "href": "reference/coord_trans.html#parameters",
    "title": "coord_trans",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nstr | trans\n\n\nName of transform or trans class to transform the x axis\n\n\n'identity'\n\n\n\n\ny\n\n\nstr | trans\n\n\nName of transform or trans class to transform the y axis\n\n\n'identity'\n\n\n\n\nxlim\n\n\nNone | (float, float)\n\n\nLimits for x axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nylim\n\n\nNone | (float, float)\n\n\nLimits for y axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nexpand\n\n\nbool\n\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data.\n\n\nTrue"
  },
  {
    "objectID": "reference/coord_fixed.html",
    "href": "reference/coord_fixed.html",
    "title": "coord_fixed",
    "section": "",
    "text": "coords.coord_fixed(self, ratio=1, xlim=None, ylim=None, expand=True)\nCartesian coordinates with fixed relationship between x and y scales\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nratio\n\n\nfloat\n\n\nDesired aspect_ratio (:math:y/x) of the panel(s). Default is 1.\n\n\n1\n\n\n\n\nxlim\n\n\nNone | (float, float)\n\n\nLimits for x axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nylim\n\n\nNone | (float, float)\n\n\nLimits for y axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nexpand\n\n\nbool\n\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data.\n\n\nTrue\n\n\n\n\n\n\n\nTo specify aspect ratio of the visual size for the axes use the aspect_ratio themeable::\nggplot(data, aes('x', 'y')) + theme(aspect_ratio=0.5)\nWhen changing the aspect_ratio in either way, the width of the panel remains constant (as derived from the plotnine.themes.themeable.figure_size themeable) and the height is altered to achieve desired ratio."
  },
  {
    "objectID": "reference/coord_fixed.html#parameters",
    "href": "reference/coord_fixed.html#parameters",
    "title": "coord_fixed",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nratio\n\n\nfloat\n\n\nDesired aspect_ratio (:math:y/x) of the panel(s). Default is 1.\n\n\n1\n\n\n\n\nxlim\n\n\nNone | (float, float)\n\n\nLimits for x axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nylim\n\n\nNone | (float, float)\n\n\nLimits for y axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nexpand\n\n\nbool\n\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data.\n\n\nTrue"
  },
  {
    "objectID": "reference/coord_fixed.html#notes",
    "href": "reference/coord_fixed.html#notes",
    "title": "coord_fixed",
    "section": "",
    "text": "To specify aspect ratio of the visual size for the axes use the aspect_ratio themeable::\nggplot(data, aes('x', 'y')) + theme(aspect_ratio=0.5)\nWhen changing the aspect_ratio in either way, the width of the panel remains constant (as derived from the plotnine.themes.themeable.figure_size themeable) and the height is altered to achieve desired ratio."
  },
  {
    "objectID": "reference/coord_cartesian.html",
    "href": "reference/coord_cartesian.html",
    "title": "coord_cartesian",
    "section": "",
    "text": "coords.coord_cartesian(self, xlim=None, ylim=None, expand=True)\nCartesian coordinate system\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nxlim\n\n\nNone | (float, float)\n\n\nLimits for x axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nylim\n\n\nNone | (float, float)\n\n\nLimits for y axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nexpand\n\n\nbool\n\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data.\n\n\nTrue"
  },
  {
    "objectID": "reference/coord_cartesian.html#parameters",
    "href": "reference/coord_cartesian.html#parameters",
    "title": "coord_cartesian",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nxlim\n\n\nNone | (float, float)\n\n\nLimits for x axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nylim\n\n\nNone | (float, float)\n\n\nLimits for y axis. If None, then they are automatically computed.\n\n\nNone\n\n\n\n\nexpand\n\n\nbool\n\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data.\n\n\nTrue"
  },
  {
    "objectID": "reference/base_margin.html",
    "href": "reference/base_margin.html",
    "title": "base_margin",
    "section": "",
    "text": "base_margin\noptions.base_margin"
  },
  {
    "objectID": "reference/axis_title_y.html",
    "href": "reference/axis_title_y.html",
    "title": "axis_title_y",
    "section": "",
    "text": "themes.themeable.axis_title_y()\ny axis label\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_title_y.html#parameters",
    "href": "reference/axis_title_y.html#parameters",
    "title": "axis_title_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_title.html",
    "href": "reference/axis_title.html",
    "title": "axis_title",
    "section": "",
    "text": "themes.themeable.axis_title()\nAxis labels\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_title.html#parameters",
    "href": "reference/axis_title.html#parameters",
    "title": "axis_title",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_pad_major.html",
    "href": "reference/axis_ticks_pad_major.html",
    "title": "axis_ticks_pad_major",
    "section": "",
    "text": "themes.themeable.axis_ticks_pad_major()\nAxis major-tick padding\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired\n\n\n\n\n\n\n\nPadding is not applied when the axis_ticks_major are blank, but it does apply when the axis_ticks_length_major is zero."
  },
  {
    "objectID": "reference/axis_ticks_pad_major.html#parameters",
    "href": "reference/axis_ticks_pad_major.html#parameters",
    "title": "axis_ticks_pad_major",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_pad_major.html#note",
    "href": "reference/axis_ticks_pad_major.html#note",
    "title": "axis_ticks_pad_major",
    "section": "",
    "text": "Padding is not applied when the axis_ticks_major are blank, but it does apply when the axis_ticks_length_major is zero."
  },
  {
    "objectID": "reference/axis_ticks_minor_y.html",
    "href": "reference/axis_ticks_minor_y.html",
    "title": "axis_ticks_minor_y",
    "section": "",
    "text": "themes.themeable.axis_ticks_minor_y()\ny-axis minor tick lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_minor_y.html#parameters",
    "href": "reference/axis_ticks_minor_y.html#parameters",
    "title": "axis_ticks_minor_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_minor.html",
    "href": "reference/axis_ticks_minor.html",
    "title": "axis_ticks_minor",
    "section": "",
    "text": "themes.themeable.axis_ticks_minor()\nx & y axis minor tick lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_minor.html#parameters",
    "href": "reference/axis_ticks_minor.html#parameters",
    "title": "axis_ticks_minor",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_major_x.html",
    "href": "reference/axis_ticks_major_x.html",
    "title": "axis_ticks_major_x",
    "section": "",
    "text": "themes.themeable.axis_ticks_major_x()\nx-axis major tick lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_major_x.html#parameters",
    "href": "reference/axis_ticks_major_x.html#parameters",
    "title": "axis_ticks_major_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_length_minor.html",
    "href": "reference/axis_ticks_length_minor.html",
    "title": "axis_ticks_length_minor",
    "section": "",
    "text": "themes.themeable.axis_ticks_length_minor()\nAxis minor-tick length\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_length_minor.html#parameters",
    "href": "reference/axis_ticks_length_minor.html#parameters",
    "title": "axis_ticks_length_minor",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_length.html",
    "href": "reference/axis_ticks_length.html",
    "title": "axis_ticks_length",
    "section": "",
    "text": "themes.themeable.axis_ticks_length()\nAxis tick length\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_length.html#parameters",
    "href": "reference/axis_ticks_length.html#parameters",
    "title": "axis_ticks_length",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_direction_x.html",
    "href": "reference/axis_ticks_direction_x.html",
    "title": "axis_ticks_direction_x",
    "section": "",
    "text": "themes.themeable.axis_ticks_direction_x()\nx-axis tick direction\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr in ['in', 'out', 'inout']\n\n\n\nin - ticks inside the panel - out - ticks outside the panel - inout - ticks inside and outside the panel\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_direction_x.html#parameters",
    "href": "reference/axis_ticks_direction_x.html#parameters",
    "title": "axis_ticks_direction_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr in ['in', 'out', 'inout']\n\n\n\nin - ticks inside the panel - out - ticks outside the panel - inout - ticks inside and outside the panel\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks.html",
    "href": "reference/axis_ticks.html",
    "title": "axis_ticks",
    "section": "",
    "text": "themes.themeable.axis_ticks()\nx & y major and minor axis tick lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks.html#parameters",
    "href": "reference/axis_ticks.html#parameters",
    "title": "axis_ticks",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_text_x.html",
    "href": "reference/axis_text_x.html",
    "title": "axis_text_x",
    "section": "",
    "text": "themes.themeable.axis_text_x()\nx-axis tick labels\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_text_x.html#parameters",
    "href": "reference/axis_text_x.html#parameters",
    "title": "axis_text_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_line_y.html",
    "href": "reference/axis_line_y.html",
    "title": "axis_line_y",
    "section": "",
    "text": "themes.themeable.axis_line_y()\ny-axis line\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nposition\nstr(object='') -&gt; str"
  },
  {
    "objectID": "reference/axis_line_y.html#parameters",
    "href": "reference/axis_line_y.html#parameters",
    "title": "axis_line_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_line_y.html#attributes",
    "href": "reference/axis_line_y.html#attributes",
    "title": "axis_line_y",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nposition\nstr(object='') -&gt; str"
  },
  {
    "objectID": "reference/axis_line.html",
    "href": "reference/axis_line.html",
    "title": "axis_line",
    "section": "",
    "text": "themes.themeable.axis_line()\nx & y axis lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_line.html#parameters",
    "href": "reference/axis_line.html#parameters",
    "title": "axis_line",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/annotation_stripes.html",
    "href": "reference/annotation_stripes.html",
    "title": "annotation_stripes",
    "section": "",
    "text": "geoms.annotation_stripes(self, fill=('#AAAAAA', '#CCCCCC'), fill_range='auto', direction='vertical', extend=(0, 1), **kwargs)\nAlternating stripes, centered around each label.\nUseful as a background for geom_jitter.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfill\n\n\nlist - like\n\n\nList of colors for the strips. The default is (\"#AAAAAA\", \"#CCCCCC\")\n\n\n('#AAAAAA', '#CCCCCC')\n\n\n\n\nfill_range\n\n\ntyping.Literal[‘auto’, ‘cycle’, ‘no’, ‘nocycle’]\n\n\nHow to fill stripes beyond the range of scale:: ‘cycle’ # keep cycling the colors of the # stripes after the range ends ‘nocycle’ # stop cycling the colors of the # stripes after the range ends ‘auto’ # ‘cycle’ for continuous scales and # ‘nocycle’ for discrete scales. ‘no’ # Do not add stripes passed the range # passed the range of the scales Default is ‘auto’.\n\n\n'auto'\n\n\n\n\ndirection\n\n\n‘vertical’ or ‘horizontal’\n\n\nOrientation of the stripes\n\n\n'vertical'\n\n\n\n\nextend\n\n\ntuple\n\n\nRange of the stripes. The default is (0, 1), top to bottom. The values should be in the range [0, 1].\n\n\n(0, 1)\n\n\n\n\n**kwargs\n\n\ndict\n\n\nOther aesthetic parameters for the rectangular stripes. They include; alpha, color, linetype, and size.\n\n\n{}"
  },
  {
    "objectID": "reference/annotation_stripes.html#parameters",
    "href": "reference/annotation_stripes.html#parameters",
    "title": "annotation_stripes",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfill\n\n\nlist - like\n\n\nList of colors for the strips. The default is (\"#AAAAAA\", \"#CCCCCC\")\n\n\n('#AAAAAA', '#CCCCCC')\n\n\n\n\nfill_range\n\n\ntyping.Literal[‘auto’, ‘cycle’, ‘no’, ‘nocycle’]\n\n\nHow to fill stripes beyond the range of scale:: ‘cycle’ # keep cycling the colors of the # stripes after the range ends ‘nocycle’ # stop cycling the colors of the # stripes after the range ends ‘auto’ # ‘cycle’ for continuous scales and # ‘nocycle’ for discrete scales. ‘no’ # Do not add stripes passed the range # passed the range of the scales Default is ‘auto’.\n\n\n'auto'\n\n\n\n\ndirection\n\n\n‘vertical’ or ‘horizontal’\n\n\nOrientation of the stripes\n\n\n'vertical'\n\n\n\n\nextend\n\n\ntuple\n\n\nRange of the stripes. The default is (0, 1), top to bottom. The values should be in the range [0, 1].\n\n\n(0, 1)\n\n\n\n\n**kwargs\n\n\ndict\n\n\nOther aesthetic parameters for the rectangular stripes. They include; alpha, color, linetype, and size.\n\n\n{}"
  },
  {
    "objectID": "reference/annotate.html",
    "href": "reference/annotate.html",
    "title": "annotate",
    "section": "",
    "text": "geoms.annotate(self, geom, x=None, y=None, xmin=None, xmax=None, xend=None, xintercept=None, ymin=None, ymax=None, yend=None, yintercept=None, **kwargs)\nCreate an annotation layer\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ngeom\n\n\nplotnine.geoms.geom or str\n\n\ngeom to use for annotation, or name of geom (e.g. ‘point’).\n\n\nrequired\n\n\n\n\nx\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\ny\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nxmin\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nymin\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nxmax\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nymax\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nxend\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nyend\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nxintercept\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nyintercept\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nkwargs\n\n\ndict\n\n\nOther aesthetics or parameters to the geom.\n\n\n{}\n\n\n\n\n\n\n\nThe positioning aethetics x, y, xmin, ymin, xmax, ymax, xend, yend, xintercept, yintercept depend on which geom is used.\nYou should choose or ignore accordingly.\nAll geoms are created with :code:stat='identity'."
  },
  {
    "objectID": "reference/annotate.html#parameters",
    "href": "reference/annotate.html#parameters",
    "title": "annotate",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ngeom\n\n\nplotnine.geoms.geom or str\n\n\ngeom to use for annotation, or name of geom (e.g. ‘point’).\n\n\nrequired\n\n\n\n\nx\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\ny\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nxmin\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nymin\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nxmax\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nymax\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nxend\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nyend\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nxintercept\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nyintercept\n\n\nfloat\n\n\nPosition\n\n\nNone\n\n\n\n\nkwargs\n\n\ndict\n\n\nOther aesthetics or parameters to the geom.\n\n\n{}"
  },
  {
    "objectID": "reference/annotate.html#notes",
    "href": "reference/annotate.html#notes",
    "title": "annotate",
    "section": "",
    "text": "The positioning aethetics x, y, xmin, ymin, xmax, ymax, xend, yend, xintercept, yintercept depend on which geom is used.\nYou should choose or ignore accordingly.\nAll geoms are created with :code:stat='identity'."
  },
  {
    "objectID": "reference/after_scale.html",
    "href": "reference/after_scale.html",
    "title": "after_scale",
    "section": "",
    "text": "mapping.after_scale(x)\nEvaluate mapping after variable has been mapped to the scale\nThis gives the user a chance to alter the value of a variable in the final units of the scale e.g. the rgb hex color.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nstr\n\n\nAn expression\n\n\nrequired\n\n\n\n\n\n\n\n\nafter_stat: For how to map aesthetics to variable calculatedby the stat\nstage: For how to map to aesthetics at more than one stage ofthe plot building pipeline.\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_scale,\n    geom_bar,\n    theme_classic\n)\n\n\n\nThe bars in geom_bar have two aesthetics that control the coloring; fill for the interior and color for the boundary/edge. Using after_scale we can create a matching combination of these two.\nStart off with a mapping to the color.\n\ndf = pd.DataFrame({\n    'var1': [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n})\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(size=1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can match the color with the fill.\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(aes(fill=after_scale('color')), size=1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAs after_scale takes an expression, for the fill aesthetic we can modify the color by adding to it an alpha channel i.e. '#AABBCC' to '#AABBCC66'.\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(aes(fill=after_scale('color + \"66\"')), size=1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe rely on the fact that you can append a string to all elements of a pandas series\npd.Series(['#AABBCC', '#112233']) + '66' == pd.Series(['#AABBCC66', '#11223366'])\nWith a fitting theme.\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(aes(fill=after_scale('color + \"66\"')), size=1)\n + theme_classic()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: after_scale"
  },
  {
    "objectID": "reference/after_scale.html#parameters",
    "href": "reference/after_scale.html#parameters",
    "title": "after_scale",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nstr\n\n\nAn expression\n\n\nrequired"
  },
  {
    "objectID": "reference/after_scale.html#see-also",
    "href": "reference/after_scale.html#see-also",
    "title": "after_scale",
    "section": "",
    "text": "after_stat: For how to map aesthetics to variable calculatedby the stat\nstage: For how to map to aesthetics at more than one stage ofthe plot building pipeline."
  },
  {
    "objectID": "reference/after_scale.html#examples",
    "href": "reference/after_scale.html#examples",
    "title": "after_scale",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_scale,\n    geom_bar,\n    theme_classic\n)\n\n\n\nThe bars in geom_bar have two aesthetics that control the coloring; fill for the interior and color for the boundary/edge. Using after_scale we can create a matching combination of these two.\nStart off with a mapping to the color.\n\ndf = pd.DataFrame({\n    'var1': [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n})\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(size=1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can match the color with the fill.\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(aes(fill=after_scale('color')), size=1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAs after_scale takes an expression, for the fill aesthetic we can modify the color by adding to it an alpha channel i.e. '#AABBCC' to '#AABBCC66'.\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(aes(fill=after_scale('color + \"66\"')), size=1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe rely on the fact that you can append a string to all elements of a pandas series\npd.Series(['#AABBCC', '#112233']) + '66' == pd.Series(['#AABBCC66', '#11223366'])\nWith a fitting theme.\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(aes(fill=after_scale('color + \"66\"')), size=1)\n + theme_classic()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: after_scale"
  },
  {
    "objectID": "reference/PlotnineAnimation.html",
    "href": "reference/PlotnineAnimation.html",
    "title": "PlotnineAnimation",
    "section": "",
    "text": "animation.PlotnineAnimation(self, plots, interval=200, repeat_delay=None, repeat=True, blit=False)\nAnimation using ggplot objects\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nplots\n\n\niterable\n\n\nggplot objects that make up the the frames of the animation\n\n\nrequired\n\n\n\n\ninterval\n\n\nnumber\n\n\nDelay between frames in milliseconds. Defaults to 200.\n\n\n200\n\n\n\n\nrepeat_delay\n\n\nnumber\n\n\nIf the animation in repeated, adds a delay in milliseconds before repeating the animation. Defaults to None.\n\n\nNone\n\n\n\n\nrepeat\n\n\nbool\n\n\nControls whether the animation should repeat when the sequence of frames is completed. Defaults to True.\n\n\nTrue\n\n\n\n\nblit\n\n\nbool\n\n\nControls whether blitting is used to optimize drawing. Defaults to False.\n\n\nFalse\n\n\n\n\n\n\n\n\nThe plots should have the same facet and the facet should not have fixed x and y scales.\nThe scales of all the plots should have the same limits. It is a good idea to create a scale (with limits) for each aesthetic and add them to all the plots.\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_path,\n    theme,\n    theme_void,\n    lims\n)\nfrom plotnine.animation import PlotnineAnimation\n\n# for animation in the notebook\nfrom matplotlib import rc\nrc('animation', html='html5')\n\n\n\nHow to create Animations\nThe PlotnineAnimation methods takes a sequence of plots and animates them. The best way to create the sequence is to use a function that generates plots.\nNOTE: When creating the plots make sure all the plots have scales with the same limits for each aesthetic, including the x and y aesthetics.\n\n# Parameters used to control the spiral\nn = 100\ntightness = 1.3\nkmin = 1\nkmax = 25\nnum_frames = 25\ntheta = np.linspace(-np.pi, np.pi, n)\n\ndef plot(k):\n    # For every plot we change the theta\n    _theta = theta*k\n    \n    # Polar Equation of each spiral\n    r = tightness*_theta\n    \n    df = pd.DataFrame({\n        'theta': _theta,\n        'r': r,\n        'x': r*np.sin(_theta),\n        'y': r*np.cos(_theta)\n    })\n\n    p = (ggplot(df)\n         + geom_path(aes('x', 'y', color='theta'), size=1)\n         + lims(\n             # All the plots have scales with the same limits\n             x=(-130, 130),\n             y=(-130, 130),\n             color=(-kmax*np.pi, kmax*np.pi)\n         )\n         + theme_void()\n         + theme(\n             aspect_ratio=1,\n             # Make room on the right for the legend\n             subplots_adjust={'right': 0.85}\n         )\n    )\n    return p\n\n# It is better to use a generator instead of a list\nplots = (plot(k) for k in np.linspace(kmin, kmax, num_frames))\nani = PlotnineAnimation(plots, interval=100, repeat_delay=500)\n# ani.save('/tmp/animation.mp4')\nani\n\n\n  \n  Your browser does not support the video tag.\n\n\n\nThe final image of the spiral\n\n# Gallery Plot\n\nplot(kmax)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: for animation in the notebook"
  },
  {
    "objectID": "reference/PlotnineAnimation.html#parameters",
    "href": "reference/PlotnineAnimation.html#parameters",
    "title": "PlotnineAnimation",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nplots\n\n\niterable\n\n\nggplot objects that make up the the frames of the animation\n\n\nrequired\n\n\n\n\ninterval\n\n\nnumber\n\n\nDelay between frames in milliseconds. Defaults to 200.\n\n\n200\n\n\n\n\nrepeat_delay\n\n\nnumber\n\n\nIf the animation in repeated, adds a delay in milliseconds before repeating the animation. Defaults to None.\n\n\nNone\n\n\n\n\nrepeat\n\n\nbool\n\n\nControls whether the animation should repeat when the sequence of frames is completed. Defaults to True.\n\n\nTrue\n\n\n\n\nblit\n\n\nbool\n\n\nControls whether blitting is used to optimize drawing. Defaults to False.\n\n\nFalse"
  },
  {
    "objectID": "reference/PlotnineAnimation.html#notes",
    "href": "reference/PlotnineAnimation.html#notes",
    "title": "PlotnineAnimation",
    "section": "",
    "text": "The plots should have the same facet and the facet should not have fixed x and y scales.\nThe scales of all the plots should have the same limits. It is a good idea to create a scale (with limits) for each aesthetic and add them to all the plots."
  },
  {
    "objectID": "reference/PlotnineAnimation.html#examples",
    "href": "reference/PlotnineAnimation.html#examples",
    "title": "PlotnineAnimation",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_path,\n    theme,\n    theme_void,\n    lims\n)\nfrom plotnine.animation import PlotnineAnimation\n\n# for animation in the notebook\nfrom matplotlib import rc\nrc('animation', html='html5')\n\n\n\nHow to create Animations\nThe PlotnineAnimation methods takes a sequence of plots and animates them. The best way to create the sequence is to use a function that generates plots.\nNOTE: When creating the plots make sure all the plots have scales with the same limits for each aesthetic, including the x and y aesthetics.\n\n# Parameters used to control the spiral\nn = 100\ntightness = 1.3\nkmin = 1\nkmax = 25\nnum_frames = 25\ntheta = np.linspace(-np.pi, np.pi, n)\n\ndef plot(k):\n    # For every plot we change the theta\n    _theta = theta*k\n    \n    # Polar Equation of each spiral\n    r = tightness*_theta\n    \n    df = pd.DataFrame({\n        'theta': _theta,\n        'r': r,\n        'x': r*np.sin(_theta),\n        'y': r*np.cos(_theta)\n    })\n\n    p = (ggplot(df)\n         + geom_path(aes('x', 'y', color='theta'), size=1)\n         + lims(\n             # All the plots have scales with the same limits\n             x=(-130, 130),\n             y=(-130, 130),\n             color=(-kmax*np.pi, kmax*np.pi)\n         )\n         + theme_void()\n         + theme(\n             aspect_ratio=1,\n             # Make room on the right for the legend\n             subplots_adjust={'right': 0.85}\n         )\n    )\n    return p\n\n# It is better to use a generator instead of a list\nplots = (plot(k) for k in np.linspace(kmin, kmax, num_frames))\nani = PlotnineAnimation(plots, interval=100, repeat_delay=500)\n# ani.save('/tmp/animation.mp4')\nani\n\n\n  \n  Your browser does not support the video tag.\n\n\n\nThe final image of the spiral\n\n# Gallery Plot\n\nplot(kmax)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: for animation in the notebook"
  },
  {
    "objectID": "reference/aes.html",
    "href": "reference/aes.html",
    "title": "aes",
    "section": "",
    "text": "mapping.aes(self, *args, **kwargs)\nCreate aesthetic mappings\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nexpression | array_like | scalar\n\n\nx aesthetic mapping\n\n\nrequired\n\n\n\n\ny\n\n\nexpression | array_like | scalar\n\n\ny aesthetic mapping\n\n\nrequired\n\n\n\n\n**kwargs\n\n\ndict\n\n\nOther aesthetic mappings\n\n\n{}\n\n\n\n\n\n\n\nOnly the x and y aesthetic mappings can be specified as positional arguments. All the rest must be keyword arguments.\nThe value of each mapping must be one of:\n\nstring::\n  import pandas as pd\n  import numpy as np\n\n  arr = [11, 12, 13]\n  df = pd.DataFrame({'alpha': [1, 2, 3],\n                     'beta': [1, 2, 3],\n                     'gam ma': [1, 2, 3]})\n\n  # Refer to a column in a dataframe\n  ggplot(df, aes(x='alpha', y='beta'))\narray_like::\n  # A variable\n  ggplot(df, aes(x='alpha', y=arr))\n\n  # or an inplace list\n  ggplot(df, aes(x='alpha', y=[4, 5, 6]))\nscalar::\n  # A scalar value/variable\n  ggplot(df, aes(x='alpha', y=4))\n\n  # The above statement is equivalent to\n  ggplot(df, aes(x='alpha', y=[4, 4, 4]))\nString expression::\n  ggplot(df, aes(x='alpha', y='2*beta'))\n  ggplot(df, aes(x='alpha', y='np.sin(beta)'))\n  ggplot(df, aes(x='df.index', y='beta'))\n\n  # If `count` is an aesthetic calculated by a stat\n  ggplot(df, aes(x='alpha', y=after_stat('count')))\n  ggplot(df, aes(x='alpha', y=after_stat('count/np.max(count)')))\nThe strings in the expression can refer to;\n\ncolumns in the dataframe\nvariables in the namespace\naesthetic values (columns) calculated by the stat\n\nwith the column names having precedence over the variables. For expressions, columns in the dataframe that are mapped to must have names that would be valid python variable names.\nThis is okay::\n# ‘gam ma’ is a column in the dataframe ggplot(df, aes(x=‘df.index’, y=‘gam ma’))\nWhile this is not::\n# ‘gam ma’ is a column in the dataframe, but not # valid python variable name ggplot(df, aes(x=‘df.index’, y=‘np.sin(gam ma)’))\n\naes has 2 internal methods you can use to transform variables being mapped.\n1. ``factor`` - This function turns the variable into a factor.\n    It is just an alias to ``pd.Categorical``::\n\n        ggplot(mtcars, aes(x='factor(cyl)')) + geom_bar()\n\n2. ``reorder`` - This function changes the order of first variable\n    based on values of the second variable::\n\n        df = pd.DataFrame({\n            'x': ['b', 'd', 'c', 'a'],\n            'y': [1, 2, 3, 4]\n        })\n\n        ggplot(df, aes('reorder(x, y)', 'y')) + geom_col()\n.. rubric:: The group aesthetic\ngroup is a special aesthetic that the user can map to. It is used to group the plotted items. If not specified, it is automatically computed and in most cases the computed groups are sufficient. However, there may be cases were it is handy to map to it.\n\n\n\n\nafter_stat: For how to map aesthetics to variable calculatedby the stat\nafter_scale: For how to alter aesthetics after the data has beenmapped by the scale.\nstage: For how to map to evaluate the mapping to aesthetics atmore than one stage of the plot building pipeline.\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point\n)\n\n\n\nMapping variables to the visual properties of a plot.\n\ndf = pd.DataFrame({\n    'col1': np.arange(11),\n    'col2': np.arange(11)\n})\n\n(ggplot(df, aes(x='col1', y='col2'))\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(ggplot(df, aes(x='col1', y='col2 ** 2'))\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(ggplot(df, aes(x='col1', y='np.square(col2)'))\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe first two positional arguments are x and y aesthetics. Any other aesthetic must be mapped with a keyword argument.\n\n(ggplot(df, aes('col1', 'np.square(col2)', color='col2'))\n + geom_point(size=3)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: aes"
  },
  {
    "objectID": "reference/aes.html#parameters",
    "href": "reference/aes.html#parameters",
    "title": "aes",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nexpression | array_like | scalar\n\n\nx aesthetic mapping\n\n\nrequired\n\n\n\n\ny\n\n\nexpression | array_like | scalar\n\n\ny aesthetic mapping\n\n\nrequired\n\n\n\n\n**kwargs\n\n\ndict\n\n\nOther aesthetic mappings\n\n\n{}"
  },
  {
    "objectID": "reference/aes.html#notes",
    "href": "reference/aes.html#notes",
    "title": "aes",
    "section": "",
    "text": "Only the x and y aesthetic mappings can be specified as positional arguments. All the rest must be keyword arguments.\nThe value of each mapping must be one of:\n\nstring::\n  import pandas as pd\n  import numpy as np\n\n  arr = [11, 12, 13]\n  df = pd.DataFrame({'alpha': [1, 2, 3],\n                     'beta': [1, 2, 3],\n                     'gam ma': [1, 2, 3]})\n\n  # Refer to a column in a dataframe\n  ggplot(df, aes(x='alpha', y='beta'))\narray_like::\n  # A variable\n  ggplot(df, aes(x='alpha', y=arr))\n\n  # or an inplace list\n  ggplot(df, aes(x='alpha', y=[4, 5, 6]))\nscalar::\n  # A scalar value/variable\n  ggplot(df, aes(x='alpha', y=4))\n\n  # The above statement is equivalent to\n  ggplot(df, aes(x='alpha', y=[4, 4, 4]))\nString expression::\n  ggplot(df, aes(x='alpha', y='2*beta'))\n  ggplot(df, aes(x='alpha', y='np.sin(beta)'))\n  ggplot(df, aes(x='df.index', y='beta'))\n\n  # If `count` is an aesthetic calculated by a stat\n  ggplot(df, aes(x='alpha', y=after_stat('count')))\n  ggplot(df, aes(x='alpha', y=after_stat('count/np.max(count)')))\nThe strings in the expression can refer to;\n\ncolumns in the dataframe\nvariables in the namespace\naesthetic values (columns) calculated by the stat\n\nwith the column names having precedence over the variables. For expressions, columns in the dataframe that are mapped to must have names that would be valid python variable names.\nThis is okay::\n# ‘gam ma’ is a column in the dataframe ggplot(df, aes(x=‘df.index’, y=‘gam ma’))\nWhile this is not::\n# ‘gam ma’ is a column in the dataframe, but not # valid python variable name ggplot(df, aes(x=‘df.index’, y=‘np.sin(gam ma)’))\n\naes has 2 internal methods you can use to transform variables being mapped.\n1. ``factor`` - This function turns the variable into a factor.\n    It is just an alias to ``pd.Categorical``::\n\n        ggplot(mtcars, aes(x='factor(cyl)')) + geom_bar()\n\n2. ``reorder`` - This function changes the order of first variable\n    based on values of the second variable::\n\n        df = pd.DataFrame({\n            'x': ['b', 'd', 'c', 'a'],\n            'y': [1, 2, 3, 4]\n        })\n\n        ggplot(df, aes('reorder(x, y)', 'y')) + geom_col()\n.. rubric:: The group aesthetic\ngroup is a special aesthetic that the user can map to. It is used to group the plotted items. If not specified, it is automatically computed and in most cases the computed groups are sufficient. However, there may be cases were it is handy to map to it."
  },
  {
    "objectID": "reference/aes.html#see-also",
    "href": "reference/aes.html#see-also",
    "title": "aes",
    "section": "",
    "text": "after_stat: For how to map aesthetics to variable calculatedby the stat\nafter_scale: For how to alter aesthetics after the data has beenmapped by the scale.\nstage: For how to map to evaluate the mapping to aesthetics atmore than one stage of the plot building pipeline."
  },
  {
    "objectID": "reference/aes.html#examples",
    "href": "reference/aes.html#examples",
    "title": "aes",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point\n)\n\n\n\nMapping variables to the visual properties of a plot.\n\ndf = pd.DataFrame({\n    'col1': np.arange(11),\n    'col2': np.arange(11)\n})\n\n(ggplot(df, aes(x='col1', y='col2'))\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(ggplot(df, aes(x='col1', y='col2 ** 2'))\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(ggplot(df, aes(x='col1', y='np.square(col2)'))\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe first two positional arguments are x and y aesthetics. Any other aesthetic must be mapped with a keyword argument.\n\n(ggplot(df, aes('col1', 'np.square(col2)', color='col2'))\n + geom_point(size=3)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: aes"
  },
  {
    "objectID": "reference/after_stat.html",
    "href": "reference/after_stat.html",
    "title": "after_stat",
    "section": "",
    "text": "mapping.after_stat(x)\nEvaluate mapping after statistic has been calculated\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nstr\n\n\nAn expression\n\n\nrequired\n\n\n\n\n\n\n\n\nafter_scale: For how to alter aesthetics after the data has beenmapped by the scale.\nstage: For how to map to aesthetics at more than one stage ofthe plot building pipeline.\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    geom_bar,\n    labs\n)\n\n\n\ngeom_bar uses stat_count which by default maps the y aesthetic to the count which is the number of observations at a position.\n\ndf = pd.DataFrame({\n    'var1': [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n})\n\n(ggplot(df, aes('var1'))\n + geom_bar()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nUsing the after_stat function, we can instead map to the prop which is the ratio of points in the panel at a position.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(y=after_stat('prop'))) # default is after_stat('count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWith after_stat you can used the variables calculated by the stat in expressions. For example we use the count to calculated the prop.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(y=after_stat('count / np.sum(count)')))\n + labs(y='prop')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nBy default geom_bar uses stat_count to compute a frequency table with the x aesthetic as the key column. As a result, any mapping (other than the x aesthetic is lost) to a continuous variable is lost (if you have a classroom and you compute a frequency table of the gender, you lose any other information like height of students).\nFor example, below fill='var1' has no effect, but the var1 variable has not been lost it has been turned into x aesthetic.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(fill='var1'))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe use after_stat to map fill to the x aesthetic after it has been computed.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(fill=after_stat('x')))\n + labs(fill='var1')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: after_stat"
  },
  {
    "objectID": "reference/after_stat.html#parameters",
    "href": "reference/after_stat.html#parameters",
    "title": "after_stat",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nstr\n\n\nAn expression\n\n\nrequired"
  },
  {
    "objectID": "reference/after_stat.html#see-also",
    "href": "reference/after_stat.html#see-also",
    "title": "after_stat",
    "section": "",
    "text": "after_scale: For how to alter aesthetics after the data has beenmapped by the scale.\nstage: For how to map to aesthetics at more than one stage ofthe plot building pipeline."
  },
  {
    "objectID": "reference/after_stat.html#examples",
    "href": "reference/after_stat.html#examples",
    "title": "after_stat",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    geom_bar,\n    labs\n)\n\n\n\ngeom_bar uses stat_count which by default maps the y aesthetic to the count which is the number of observations at a position.\n\ndf = pd.DataFrame({\n    'var1': [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n})\n\n(ggplot(df, aes('var1'))\n + geom_bar()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nUsing the after_stat function, we can instead map to the prop which is the ratio of points in the panel at a position.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(y=after_stat('prop'))) # default is after_stat('count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWith after_stat you can used the variables calculated by the stat in expressions. For example we use the count to calculated the prop.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(y=after_stat('count / np.sum(count)')))\n + labs(y='prop')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nBy default geom_bar uses stat_count to compute a frequency table with the x aesthetic as the key column. As a result, any mapping (other than the x aesthetic is lost) to a continuous variable is lost (if you have a classroom and you compute a frequency table of the gender, you lose any other information like height of students).\nFor example, below fill='var1' has no effect, but the var1 variable has not been lost it has been turned into x aesthetic.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(fill='var1'))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe use after_stat to map fill to the x aesthetic after it has been computed.\n\n(ggplot(df, aes('var1'))\n + geom_bar(aes(fill=after_stat('x')))\n + labs(fill='var1')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: after_stat"
  },
  {
    "objectID": "reference/annotation_logticks.html",
    "href": "reference/annotation_logticks.html",
    "title": "annotation_logticks",
    "section": "",
    "text": "geoms.annotation_logticks(self, sides='bl', alpha=1, color='black', size=0.5, linetype='solid', lengths=(0.036, 0.0225, 0.012), base=None)\nMarginal log ticks.\nIf added to a plot that does not have a log10 axis on the respective side, a warning will be issued.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nsides\n\n\nstr (default: bl)\n\n\nSides onto which to draw the marks. Any combination chosen from the characters btlr, for bottom, top, left or right side marks. If coord_flip() is used, these are the sides after the flip.\n\n\n'bl'\n\n\n\n\nalpha\n\n\nfloat (default: 1)\n\n\nTransparency of the ticks\n\n\n1\n\n\n\n\ncolor\n\n\nstr | tuple (default: ‘black’)\n\n\nColour of the ticks\n\n\n'black'\n\n\n\n\nsize\n\n\nfloat\n\n\nThickness of the ticks\n\n\n0.5\n\n\n\n\nlinetype\n\n\n‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ | tuple\n\n\nType of line. Default is solid.\n\n\n'solid'\n\n\n\n\nlengths\n\n\nTupleFloat3\n\n\nlength of the ticks drawn for full / half / tenth ticks relative to panel size\n\n\n(0.036, 0.0225, 0.012)\n\n\n\n\nbase\n\n\nfloat (default: None)\n\n\nBase of the logarithm in which the ticks will be calculated. If None, the base used to log transform the scale will be used.\n\n\nNone"
  },
  {
    "objectID": "reference/annotation_logticks.html#parameters",
    "href": "reference/annotation_logticks.html#parameters",
    "title": "annotation_logticks",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nsides\n\n\nstr (default: bl)\n\n\nSides onto which to draw the marks. Any combination chosen from the characters btlr, for bottom, top, left or right side marks. If coord_flip() is used, these are the sides after the flip.\n\n\n'bl'\n\n\n\n\nalpha\n\n\nfloat (default: 1)\n\n\nTransparency of the ticks\n\n\n1\n\n\n\n\ncolor\n\n\nstr | tuple (default: ‘black’)\n\n\nColour of the ticks\n\n\n'black'\n\n\n\n\nsize\n\n\nfloat\n\n\nThickness of the ticks\n\n\n0.5\n\n\n\n\nlinetype\n\n\n‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ | tuple\n\n\nType of line. Default is solid.\n\n\n'solid'\n\n\n\n\nlengths\n\n\nTupleFloat3\n\n\nlength of the ticks drawn for full / half / tenth ticks relative to panel size\n\n\n(0.036, 0.0225, 0.012)\n\n\n\n\nbase\n\n\nfloat (default: None)\n\n\nBase of the logarithm in which the ticks will be calculated. If None, the base used to log transform the scale will be used.\n\n\nNone"
  },
  {
    "objectID": "reference/aspect_ratio.html",
    "href": "reference/aspect_ratio.html",
    "title": "aspect_ratio",
    "section": "",
    "text": "aspect_ratio\noptions.aspect_ratio"
  },
  {
    "objectID": "reference/axis_line_x.html",
    "href": "reference/axis_line_x.html",
    "title": "axis_line_x",
    "section": "",
    "text": "themes.themeable.axis_line_x()\nx-axis line\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nposition\nstr(object='') -&gt; str"
  },
  {
    "objectID": "reference/axis_line_x.html#parameters",
    "href": "reference/axis_line_x.html#parameters",
    "title": "axis_line_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_line_x.html#attributes",
    "href": "reference/axis_line_x.html#attributes",
    "title": "axis_line_x",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nposition\nstr(object='') -&gt; str"
  },
  {
    "objectID": "reference/axis_text.html",
    "href": "reference/axis_text.html",
    "title": "axis_text",
    "section": "",
    "text": "themes.themeable.axis_text()\nAxis tick labels\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_text.html#parameters",
    "href": "reference/axis_text.html#parameters",
    "title": "axis_text",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_text_y.html",
    "href": "reference/axis_text_y.html",
    "title": "axis_text_y",
    "section": "",
    "text": "themes.themeable.axis_text_y()\ny-axis tick labels\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_text_y.html#parameters",
    "href": "reference/axis_text_y.html#parameters",
    "title": "axis_text_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_direction.html",
    "href": "reference/axis_ticks_direction.html",
    "title": "axis_ticks_direction",
    "section": "",
    "text": "themes.themeable.axis_ticks_direction()\naxis tick direction\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\n\n\n\nin - ticks inside the panel - out - ticks outside the panel - inout - ticks inside and outside the panel\n\n\n'in'"
  },
  {
    "objectID": "reference/axis_ticks_direction.html#parameters",
    "href": "reference/axis_ticks_direction.html#parameters",
    "title": "axis_ticks_direction",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\n\n\n\nin - ticks inside the panel - out - ticks outside the panel - inout - ticks inside and outside the panel\n\n\n'in'"
  },
  {
    "objectID": "reference/axis_ticks_direction_y.html",
    "href": "reference/axis_ticks_direction_y.html",
    "title": "axis_ticks_direction_y",
    "section": "",
    "text": "themes.themeable.axis_ticks_direction_y()\ny-axis tick direction\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr in ['in', 'out', 'inout']\n\n\n\nin - ticks inside the panel - out - ticks outside the panel - inout - ticks inside and outside the panel\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_direction_y.html#parameters",
    "href": "reference/axis_ticks_direction_y.html#parameters",
    "title": "axis_ticks_direction_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr in ['in', 'out', 'inout']\n\n\n\nin - ticks inside the panel - out - ticks outside the panel - inout - ticks inside and outside the panel\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_length_major.html",
    "href": "reference/axis_ticks_length_major.html",
    "title": "axis_ticks_length_major",
    "section": "",
    "text": "themes.themeable.axis_ticks_length_major()\nAxis major-tick length\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_length_major.html#parameters",
    "href": "reference/axis_ticks_length_major.html#parameters",
    "title": "axis_ticks_length_major",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_major.html",
    "href": "reference/axis_ticks_major.html",
    "title": "axis_ticks_major",
    "section": "",
    "text": "themes.themeable.axis_ticks_major()\nx & y axis major tick lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_major.html#parameters",
    "href": "reference/axis_ticks_major.html#parameters",
    "title": "axis_ticks_major",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_major_y.html",
    "href": "reference/axis_ticks_major_y.html",
    "title": "axis_ticks_major_y",
    "section": "",
    "text": "themes.themeable.axis_ticks_major_y()\ny-axis major tick lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_major_y.html#parameters",
    "href": "reference/axis_ticks_major_y.html#parameters",
    "title": "axis_ticks_major_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_minor_x.html",
    "href": "reference/axis_ticks_minor_x.html",
    "title": "axis_ticks_minor_x",
    "section": "",
    "text": "themes.themeable.axis_ticks_minor_x()\nx-axis tick lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_minor_x.html#parameters",
    "href": "reference/axis_ticks_minor_x.html#parameters",
    "title": "axis_ticks_minor_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_pad.html",
    "href": "reference/axis_ticks_pad.html",
    "title": "axis_ticks_pad",
    "section": "",
    "text": "themes.themeable.axis_ticks_pad()\nAxis tick padding\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired\n\n\n\n\n\n\n\nPadding is not applied when the axis_ticks are blank, but it does apply when the axis_ticks_length is zero."
  },
  {
    "objectID": "reference/axis_ticks_pad.html#parameters",
    "href": "reference/axis_ticks_pad.html#parameters",
    "title": "axis_ticks_pad",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_pad.html#note",
    "href": "reference/axis_ticks_pad.html#note",
    "title": "axis_ticks_pad",
    "section": "",
    "text": "Padding is not applied when the axis_ticks are blank, but it does apply when the axis_ticks_length is zero."
  },
  {
    "objectID": "reference/axis_ticks_pad_minor.html",
    "href": "reference/axis_ticks_pad_minor.html",
    "title": "axis_ticks_pad_minor",
    "section": "",
    "text": "themes.themeable.axis_ticks_pad_minor()\nAxis minor-tick padding\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\n\n\nrequired\n\n\n\n\n\n\n\nPadding is not applied when the axis_ticks_minor are blank, but it does apply when the axis_ticks_length_minor is zero."
  },
  {
    "objectID": "reference/axis_ticks_pad_minor.html#parameters",
    "href": "reference/axis_ticks_pad_minor.html#parameters",
    "title": "axis_ticks_pad_minor",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_ticks_pad_minor.html#note",
    "href": "reference/axis_ticks_pad_minor.html#note",
    "title": "axis_ticks_pad_minor",
    "section": "",
    "text": "Padding is not applied when the axis_ticks_minor are blank, but it does apply when the axis_ticks_length_minor is zero."
  },
  {
    "objectID": "reference/axis_title_x.html",
    "href": "reference/axis_title_x.html",
    "title": "axis_title_x",
    "section": "",
    "text": "themes.themeable.axis_title_x()\nx axis label\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/axis_title_x.html#parameters",
    "href": "reference/axis_title_x.html#parameters",
    "title": "axis_title_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/base_family.html",
    "href": "reference/base_family.html",
    "title": "base_family",
    "section": "",
    "text": "base_family\noptions.base_family"
  },
  {
    "objectID": "reference/close_all_figures.html",
    "href": "reference/close_all_figures.html",
    "title": "close_all_figures",
    "section": "",
    "text": "close_all_figures\noptions.close_all_figures"
  },
  {
    "objectID": "reference/coord_equal.html",
    "href": "reference/coord_equal.html",
    "title": "coord_equal",
    "section": "",
    "text": "coords.coord_equal\n\n\nratio : float Desired aspect_ratio (:math:y/x) of the panel(s). Default is 1. xlim : None | (float, float) Limits for x axis. If None, then they are automatically computed. ylim : None | (float, float) Limits for y axis. If None, then they are automatically computed. expand : bool If True, expand the coordinate axes by some factor. If False, use the limits from the data.\n\n\n\nTo specify aspect ratio of the visual size for the axes use the aspect_ratio themeable::\nggplot(data, aes('x', 'y')) + theme(aspect_ratio=0.5)\nWhen changing the aspect_ratio in either way, the width of the panel remains constant (as derived from the plotnine.themes.themeable.figure_size themeable) and the height is altered to achieve desired ratio."
  },
  {
    "objectID": "reference/coord_equal.html#parameters",
    "href": "reference/coord_equal.html#parameters",
    "title": "coord_equal",
    "section": "",
    "text": "ratio : float Desired aspect_ratio (:math:y/x) of the panel(s). Default is 1. xlim : None | (float, float) Limits for x axis. If None, then they are automatically computed. ylim : None | (float, float) Limits for y axis. If None, then they are automatically computed. expand : bool If True, expand the coordinate axes by some factor. If False, use the limits from the data."
  },
  {
    "objectID": "reference/coord_equal.html#notes",
    "href": "reference/coord_equal.html#notes",
    "title": "coord_equal",
    "section": "",
    "text": "To specify aspect ratio of the visual size for the axes use the aspect_ratio themeable::\nggplot(data, aes('x', 'y')) + theme(aspect_ratio=0.5)\nWhen changing the aspect_ratio in either way, the width of the panel remains constant (as derived from the plotnine.themes.themeable.figure_size themeable) and the height is altered to achieve desired ratio."
  },
  {
    "objectID": "reference/coord_flip.html",
    "href": "reference/coord_flip.html",
    "title": "coord_flip",
    "section": "",
    "text": "coords.coord_flip()\nFlipped cartesian coordinates\nThe horizontal becomes vertical, and vertical becomes horizontal. This is primarily useful for converting geoms and statistics which display y conditional on x, to x conditional on y.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nxlim\n\n\nNone | (float, float)\n\n\nLimits for x axis. If None, then they are automatically computed.\n\n\nrequired\n\n\n\n\nylim\n\n\nNone | (float, float)\n\n\nLimits for y axis. If None, then they are automatically computed.\n\n\nrequired\n\n\n\n\nexpand\n\n\nbool\n\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data.\n\n\nrequired"
  },
  {
    "objectID": "reference/coord_flip.html#parameters",
    "href": "reference/coord_flip.html#parameters",
    "title": "coord_flip",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nxlim\n\n\nNone | (float, float)\n\n\nLimits for x axis. If None, then they are automatically computed.\n\n\nrequired\n\n\n\n\nylim\n\n\nNone | (float, float)\n\n\nLimits for y axis. If None, then they are automatically computed.\n\n\nrequired\n\n\n\n\nexpand\n\n\nbool\n\n\nIf True, expand the coordinate axes by some factor. If False, use the limits from the data.\n\n\nrequired"
  },
  {
    "objectID": "reference/current_theme.html",
    "href": "reference/current_theme.html",
    "title": "current_theme",
    "section": "",
    "text": "current_theme\noptions.current_theme"
  },
  {
    "objectID": "reference/dpi.html",
    "href": "reference/dpi.html",
    "title": "dpi",
    "section": "",
    "text": "dpi\noptions.dpi"
  },
  {
    "objectID": "reference/economics_long.html",
    "href": "reference/economics_long.html",
    "title": "economics_long",
    "section": "",
    "text": "economics_long\ndata.economics_long\nUS economic time series.\n.. rubric:: Description\nThis dataset was produced from US economic time series data available from http://research.stlouisfed.org/fred2. economics is in “wide” format, economics_long is in “long” format.\n.. rubric:: Format\nA data frame with 478 rows and 6 variables\n========= ========================================================== Column Description ========= ========================================================== date Month of data collection psavert personal savings rate [1_] pce personal consumption expenditures, in billions of dollars [2_] unemploy number of unemployed in thousands, [3_] uempmed median duration of unemployment, in week [4_] pop total population, in thousands [5_] ========= ==========================================================\n.. _1: http://research.stlouisfed.org/fred2/series/PSAVERT/ .. _2: http://research.stlouisfed.org/fred2/series/PCE .. _3: http://research.stlouisfed.org/fred2/series/UNEMPLOY .. _4: http://research.stlouisfed.org/fred2/series/UEMPMED .. _5: http://research.stlouisfed.org/fred2/series/POP"
  },
  {
    "objectID": "reference/element_rect.html",
    "href": "reference/element_rect.html",
    "title": "element_rect",
    "section": "",
    "text": "themes.element_rect(self, fill=None, color=None, size=None, linetype=None, colour=None, **kwargs)\nTheme element: Rectangle\nUsed for backgrounds and borders\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfill\n\n\nstr | tuple\n\n\nRectangle background color\n\n\nNone\n\n\n\n\ncolor\n\n\nstr | tuple\n\n\nLine color\n\n\nNone\n\n\n\n\ncolour\n\n\nstr | tuple\n\n\nAlias of color\n\n\nNone\n\n\n\n\nsize\n\n\nfloat\n\n\nLine thickness\n\n\nNone\n\n\n\n\nkwargs\n\n\ndict\n\n\nParameters recognised by matplotlib.patches.Rectangle. In some cases you can use the fancy parameters from matplotlib.patches.FancyBboxPatch.\n\n\n{}"
  },
  {
    "objectID": "reference/element_rect.html#parameters",
    "href": "reference/element_rect.html#parameters",
    "title": "element_rect",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfill\n\n\nstr | tuple\n\n\nRectangle background color\n\n\nNone\n\n\n\n\ncolor\n\n\nstr | tuple\n\n\nLine color\n\n\nNone\n\n\n\n\ncolour\n\n\nstr | tuple\n\n\nAlias of color\n\n\nNone\n\n\n\n\nsize\n\n\nfloat\n\n\nLine thickness\n\n\nNone\n\n\n\n\nkwargs\n\n\ndict\n\n\nParameters recognised by matplotlib.patches.Rectangle. In some cases you can use the fancy parameters from matplotlib.patches.FancyBboxPatch.\n\n\n{}"
  },
  {
    "objectID": "reference/expand_limits.html",
    "href": "reference/expand_limits.html",
    "title": "expand_limits",
    "section": "",
    "text": "scales.expand_limits(**kwargs)\nExpand the limits any aesthetic using data\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nkwargs\n\n\ndict or dataframe\n\n\nData to use in expanding the limits. The keys should be aesthetic names e.g. x, y, colour, …\n\n\n{}"
  },
  {
    "objectID": "reference/expand_limits.html#parameters",
    "href": "reference/expand_limits.html#parameters",
    "title": "expand_limits",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nkwargs\n\n\ndict or dataframe\n\n\nData to use in expanding the limits. The keys should be aesthetic names e.g. x, y, colour, …\n\n\n{}"
  },
  {
    "objectID": "reference/facet_grid.html",
    "href": "reference/facet_grid.html",
    "title": "facet_grid",
    "section": "",
    "text": "facets.facet_grid(self, facets, margins=False, scales='fixed', space='fixed', shrink=True, labeller='label_value', as_table=True, drop=True)\nWrap 1D Panels onto 2D surface\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfacets\n\n\nstr | tuple | list\n\n\nA formula with the rows (of the tabular display) on the LHS and the columns (of the tabular display) on the RHS; the dot in the formula is used to indicate there should be no faceting on this dimension (either row or column). If a tuple/list is used, it must of size two, the elements of which must be strings or lists. If string formula is not processed as you may expect, use tuple/list. For example, the follow two specifications are equivalent:: ‘func(var4) ~ func(var1+var3) + func(var2)’ [‘func(var4)’, (‘func(var1+var3)’, ‘func(var2)’)] There may be cases where you cannot use a use a pure string formula, e.g.:: [‘var4’, (‘var1+var3’, ‘var2’)]\n\n\nrequired\n\n\n\n\nmargins : bool | list[str] variable names to compute margins for. True will compute all possible margins. space : str | dict Control the size of the x or y sides of the panels. The size also depends to the scales parameter.\nIf a string, it should be one of\n``['fixed', 'free', 'free_x', 'free_y']``. Currently, only the\n``'fixed'`` option is supported.\n\nAlternatively if a ``dict``, it indicates the relative facet\nsize ratios such as::\n\n    {'x': [1, 2], 'y': [3, 1, 1]}\n\nThis means that in the horizontal direction, the second panel\nwill be twice the length of the first. In the vertical direction\nthe top facet will be the 3 times longer then the second and\nthird facets.\n\nNote that the number of dimensions in the list must equal the\nnumber of facets that will be produced.\nshrink : bool Whether to shrink the scales to the output of the statistics instead of the raw data. Default is True. labeller : str | function How to label the facets. If it is a str, it should be one of 'label_value' 'label_both' or 'label_context'. Default is 'label_value' as_table : bool If True, the facets are laid out like a table with the highest values at the bottom-right. If False the facets are laid out like a plot with the highest value a the top-right. Default it True. drop : bool If True, all factor levels not used in the data will automatically be dropped. If False, all factor levels will be shown, regardless of whether or not they appear in the data. Default is True.\n\n\n\n\n\nimport pandas as pd\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    labs,\n    facet_grid,\n    theme,\n    element_text\n)\nfrom plotnine.data import mpg\n\n\n\nfacet_grid() is used to form a grid of plots, where the rows and columns of the grid are set by the faceting variables. It is useful for visualising two discrete variables.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nBasic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet a discrete variable into rows:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ .')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet a discrete variable into columns:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('. ~ cyl')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet two discrete variables into rows and columns:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ cyl')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo change the plot order of the rows or columns in the facet grid, reorder the levels of the faceting variable in the data.\n\n# re-order categories\nmpg['drv'] = mpg['drv'].cat.reorder_categories(['f', 'r','4'])\n\n\n# facet plot with reorded drv category\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ cyl')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can choose if the scale of x- and y-axes are fixed or variable by using the scales argument within the facet_grid() command:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ .', scales = 'free')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add additional information to your facet labels, by using the labeller argument within the facet_grid() command. Below we use labeller = 'label_both' to include the column name in the facet label.\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ .', labeller = 'label_both')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add two discrete variables to a facet:\n\n# add additional column for plotting exercise\nmpg[\"transmission\"] = mpg['trans'].map(lambda x: \"auto\" if \"auto\" in x else \"man\" if \"man\" in x else \"\")\n\n\n# inspect new column transmission which identifies cars as having an automatic or manual transmission\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntransmission\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\nauto\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\nman\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\nman\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\nauto\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\nauto\n\n\n\n\n\n\n\n\n# facet plot with two variables on one facet\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv + transmission ~ .') # use + to add additional faceting variables\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet labels can be rotated to make them easier to read using strip_text_y = element_text(angle = 0) for row labels within the theme() command (use strip_text_x = element_text(angle = 0) for column labels).\nIf the labels do not fit in the strip, adjust the width of the strip using strip_background_y for rows (use strip_background_x for columns). You may also need to adjust the text position so it fits in the strip: adjust the horizontal text position in the strip by specifying ha in element_text()(specify va in element_text() to adjust the vertical text position).\nYou can also change the colour of the strip by specifying color in element_text() .\n\n(\n    ggplot(mpg, aes(x='drv', y='model'))\n    + geom_point()\n    + facet_grid('manufacturer ~ .', scales = 'free')\n    + theme(strip_text_y = element_text(angle = 0,              # change facet text angle\n                                        ha = 'left'             # change text alignment\n                                       ),\n            strip_background_y = element_text(color = '#969dff' # change background colour of facet background\n                                              , width = 0.2     # adjust width of facet background to fit facet text\n                                             ),\n            figure_size=(6, 15)                                 # adjust width & height of figure to fit y-axis\n           )\n    + labs(x='displacement', y='')\n)\n\n\n\n\n&lt;Figure Size: (600 x 1500)&gt;\n\n\n\nSource: Facet grid"
  },
  {
    "objectID": "reference/facet_grid.html#parameters",
    "href": "reference/facet_grid.html#parameters",
    "title": "facet_grid",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfacets\n\n\nstr | tuple | list\n\n\nA formula with the rows (of the tabular display) on the LHS and the columns (of the tabular display) on the RHS; the dot in the formula is used to indicate there should be no faceting on this dimension (either row or column). If a tuple/list is used, it must of size two, the elements of which must be strings or lists. If string formula is not processed as you may expect, use tuple/list. For example, the follow two specifications are equivalent:: ‘func(var4) ~ func(var1+var3) + func(var2)’ [‘func(var4)’, (‘func(var1+var3)’, ‘func(var2)’)] There may be cases where you cannot use a use a pure string formula, e.g.:: [‘var4’, (‘var1+var3’, ‘var2’)]\n\n\nrequired\n\n\n\n\nmargins : bool | list[str] variable names to compute margins for. True will compute all possible margins. space : str | dict Control the size of the x or y sides of the panels. The size also depends to the scales parameter.\nIf a string, it should be one of\n``['fixed', 'free', 'free_x', 'free_y']``. Currently, only the\n``'fixed'`` option is supported.\n\nAlternatively if a ``dict``, it indicates the relative facet\nsize ratios such as::\n\n    {'x': [1, 2], 'y': [3, 1, 1]}\n\nThis means that in the horizontal direction, the second panel\nwill be twice the length of the first. In the vertical direction\nthe top facet will be the 3 times longer then the second and\nthird facets.\n\nNote that the number of dimensions in the list must equal the\nnumber of facets that will be produced.\nshrink : bool Whether to shrink the scales to the output of the statistics instead of the raw data. Default is True. labeller : str | function How to label the facets. If it is a str, it should be one of 'label_value' 'label_both' or 'label_context'. Default is 'label_value' as_table : bool If True, the facets are laid out like a table with the highest values at the bottom-right. If False the facets are laid out like a plot with the highest value a the top-right. Default it True. drop : bool If True, all factor levels not used in the data will automatically be dropped. If False, all factor levels will be shown, regardless of whether or not they appear in the data. Default is True."
  },
  {
    "objectID": "reference/facet_grid.html#examples",
    "href": "reference/facet_grid.html#examples",
    "title": "facet_grid",
    "section": "",
    "text": "import pandas as pd\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    labs,\n    facet_grid,\n    theme,\n    element_text\n)\nfrom plotnine.data import mpg\n\n\n\nfacet_grid() is used to form a grid of plots, where the rows and columns of the grid are set by the faceting variables. It is useful for visualising two discrete variables.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nBasic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet a discrete variable into rows:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ .')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet a discrete variable into columns:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('. ~ cyl')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet two discrete variables into rows and columns:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ cyl')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo change the plot order of the rows or columns in the facet grid, reorder the levels of the faceting variable in the data.\n\n# re-order categories\nmpg['drv'] = mpg['drv'].cat.reorder_categories(['f', 'r','4'])\n\n\n# facet plot with reorded drv category\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ cyl')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can choose if the scale of x- and y-axes are fixed or variable by using the scales argument within the facet_grid() command:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ .', scales = 'free')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add additional information to your facet labels, by using the labeller argument within the facet_grid() command. Below we use labeller = 'label_both' to include the column name in the facet label.\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ .', labeller = 'label_both')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add two discrete variables to a facet:\n\n# add additional column for plotting exercise\nmpg[\"transmission\"] = mpg['trans'].map(lambda x: \"auto\" if \"auto\" in x else \"man\" if \"man\" in x else \"\")\n\n\n# inspect new column transmission which identifies cars as having an automatic or manual transmission\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntransmission\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\nauto\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\nman\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\nman\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\nauto\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\nauto\n\n\n\n\n\n\n\n\n# facet plot with two variables on one facet\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv + transmission ~ .') # use + to add additional faceting variables\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet labels can be rotated to make them easier to read using strip_text_y = element_text(angle = 0) for row labels within the theme() command (use strip_text_x = element_text(angle = 0) for column labels).\nIf the labels do not fit in the strip, adjust the width of the strip using strip_background_y for rows (use strip_background_x for columns). You may also need to adjust the text position so it fits in the strip: adjust the horizontal text position in the strip by specifying ha in element_text()(specify va in element_text() to adjust the vertical text position).\nYou can also change the colour of the strip by specifying color in element_text() .\n\n(\n    ggplot(mpg, aes(x='drv', y='model'))\n    + geom_point()\n    + facet_grid('manufacturer ~ .', scales = 'free')\n    + theme(strip_text_y = element_text(angle = 0,              # change facet text angle\n                                        ha = 'left'             # change text alignment\n                                       ),\n            strip_background_y = element_text(color = '#969dff' # change background colour of facet background\n                                              , width = 0.2     # adjust width of facet background to fit facet text\n                                             ),\n            figure_size=(6, 15)                                 # adjust width & height of figure to fit y-axis\n           )\n    + labs(x='displacement', y='')\n)\n\n\n\n\n&lt;Figure Size: (600 x 1500)&gt;\n\n\n\nSource: Facet grid"
  },
  {
    "objectID": "reference/facet_wrap.html",
    "href": "reference/facet_wrap.html",
    "title": "facet_wrap",
    "section": "",
    "text": "facets.facet_wrap(self, facets, *, nrow=None, ncol=None, scales='fixed', shrink=True, labeller='label_value', as_table=True, drop=True, dir='h')\nWrap 1D Panels onto 2D surface\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfacets\n\n\nformula | tuple | list\n\n\nVariables to groupby and plot on different panels. If a formula is used it should be right sided, e.g '~ a + b', ('a', 'b')\n\n\nrequired\n\n\n\n\nnrow\n\n\nint\n\n\nNumber of rows\n\n\nNone\n\n\n\n\nncol\n\n\nint\n\n\nNumber of columns\n\n\nNone\n\n\n\n\nscales\n\n\nstr in ['fixed', 'free', 'free_x', 'free_y']\n\n\nWhether x or y scales should be allowed (free) to vary according to the data on each of the panel. Default is 'fixed'.\n\n\n'fixed'\n\n\n\n\nshrink\n\n\nbool\n\n\nWhether to shrink the scales to the output of the statistics instead of the raw data. Default is True.\n\n\nTrue\n\n\n\n\nlabeller\n\n\nstr | function\n\n\nHow to label the facets. If it is a str, it should be one of 'label_value' 'label_both' or 'label_context'. Default is 'label_value'\n\n\n'label_value'\n\n\n\n\nas_table\n\n\nbool\n\n\nIf True, the facets are laid out like a table with the highest values at the bottom-right. If False the facets are laid out like a plot with the highest value a the top-right. Default it True.\n\n\nTrue\n\n\n\n\ndrop\n\n\nbool\n\n\nIf True, all factor levels not used in the data will automatically be dropped. If False, all factor levels will be shown, regardless of whether or not they appear in the data. Default is True.\n\n\nTrue\n\n\n\n\ndir\n\n\nstr in ['h', 'v']\n\n\nDirection in which to layout the panels. h for horizontal and v for vertical.\n\n\n'h'\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    labs,\n    facet_wrap,\n    theme,\n    element_text\n)\nfrom plotnine.data import mpg\n\n\n\nfacet_wrap() creates a collection of plots (facets), where each plot is differentiated by the faceting variable. These plots are wrapped into a certain number of columns or rows as specified by the user.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nBasic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet a discrete variable using facet_wrap():\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nControl the number of rows and columns with the options nrow and ncol:\n\n# Selecting the number of columns to display\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class',\n                 ncol = 4 # change the number of columns\n                )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n# Selecting the number of rows to display\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class', \n                 nrow = 4 # change the number of columns\n                )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo change the plot order of the facets, reorder the levels of the faceting variable in the data.\n\n# re-order categories\nmpg['class'] = mpg['class'].cat.reorder_categories(['pickup', 'suv','minivan','midsize','compact','subcompact','2seater'])\n\n\n# facet plot with reorded drv category\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nOrdinarily the facets are arranged horizontally (left-to-right from top to bottom). However if you would prefer a vertical layout (facets are arranged top-to-bottom, from left to right) use the dir option:\n\n# Facet plot with vertical layout\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class',\n                 dir = 'v' # change to a vertical layout\n                )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can choose if the scale of x- and y-axes are fixed or variable. Set the scales argument to free-y, free_x or free for a free scales on the y-axis, x-axis or both axes respectively. You may need to add spacing between the facets to ensure axis ticks and values are easy to read.\nA fixed scale is the default and does not need to be specified.\n\n# facet plot with free scales\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class'\n                , scales = 'free_y'           # set scales so y-scale varies with the data\n                )\n    + theme(subplots_adjust={'wspace': 0.25}) # add spaceing between facets to make y-axis ticks visible\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add additional information to your facet labels, by using the labeller argument within the facet_wrap() command. Below we use labeller = 'label_both' to include the column name in the facet label.\n\n# facet plot with labeller\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class', labeller='label_both')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add two discrete variables to a facet:\n\n# add additional column for plotting exercise\nmpg[\"transmission\"] = mpg['trans'].map(lambda x: \"auto\" if \"auto\" in x else \"man\" if \"man\" in x else \"\")\n\n\n# inspect new column transmission which identifies cars as having an automatic or manual transmission\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntransmission\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\nauto\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\nman\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\nman\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\nauto\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\nauto\n\n\n\n\n\n\n\n\n# facet plot with two variables on one facet\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap(['class', 'transmission']) # use ~ + to add additional faceting variables\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Facet wrap"
  },
  {
    "objectID": "reference/facet_wrap.html#parameters",
    "href": "reference/facet_wrap.html#parameters",
    "title": "facet_wrap",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfacets\n\n\nformula | tuple | list\n\n\nVariables to groupby and plot on different panels. If a formula is used it should be right sided, e.g '~ a + b', ('a', 'b')\n\n\nrequired\n\n\n\n\nnrow\n\n\nint\n\n\nNumber of rows\n\n\nNone\n\n\n\n\nncol\n\n\nint\n\n\nNumber of columns\n\n\nNone\n\n\n\n\nscales\n\n\nstr in ['fixed', 'free', 'free_x', 'free_y']\n\n\nWhether x or y scales should be allowed (free) to vary according to the data on each of the panel. Default is 'fixed'.\n\n\n'fixed'\n\n\n\n\nshrink\n\n\nbool\n\n\nWhether to shrink the scales to the output of the statistics instead of the raw data. Default is True.\n\n\nTrue\n\n\n\n\nlabeller\n\n\nstr | function\n\n\nHow to label the facets. If it is a str, it should be one of 'label_value' 'label_both' or 'label_context'. Default is 'label_value'\n\n\n'label_value'\n\n\n\n\nas_table\n\n\nbool\n\n\nIf True, the facets are laid out like a table with the highest values at the bottom-right. If False the facets are laid out like a plot with the highest value a the top-right. Default it True.\n\n\nTrue\n\n\n\n\ndrop\n\n\nbool\n\n\nIf True, all factor levels not used in the data will automatically be dropped. If False, all factor levels will be shown, regardless of whether or not they appear in the data. Default is True.\n\n\nTrue\n\n\n\n\ndir\n\n\nstr in ['h', 'v']\n\n\nDirection in which to layout the panels. h for horizontal and v for vertical.\n\n\n'h'"
  },
  {
    "objectID": "reference/facet_wrap.html#examples",
    "href": "reference/facet_wrap.html#examples",
    "title": "facet_wrap",
    "section": "",
    "text": "import pandas as pd\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    labs,\n    facet_wrap,\n    theme,\n    element_text\n)\nfrom plotnine.data import mpg\n\n\n\nfacet_wrap() creates a collection of plots (facets), where each plot is differentiated by the faceting variable. These plots are wrapped into a certain number of columns or rows as specified by the user.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nBasic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet a discrete variable using facet_wrap():\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nControl the number of rows and columns with the options nrow and ncol:\n\n# Selecting the number of columns to display\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class',\n                 ncol = 4 # change the number of columns\n                )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n# Selecting the number of rows to display\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class', \n                 nrow = 4 # change the number of columns\n                )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo change the plot order of the facets, reorder the levels of the faceting variable in the data.\n\n# re-order categories\nmpg['class'] = mpg['class'].cat.reorder_categories(['pickup', 'suv','minivan','midsize','compact','subcompact','2seater'])\n\n\n# facet plot with reorded drv category\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nOrdinarily the facets are arranged horizontally (left-to-right from top to bottom). However if you would prefer a vertical layout (facets are arranged top-to-bottom, from left to right) use the dir option:\n\n# Facet plot with vertical layout\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class',\n                 dir = 'v' # change to a vertical layout\n                )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can choose if the scale of x- and y-axes are fixed or variable. Set the scales argument to free-y, free_x or free for a free scales on the y-axis, x-axis or both axes respectively. You may need to add spacing between the facets to ensure axis ticks and values are easy to read.\nA fixed scale is the default and does not need to be specified.\n\n# facet plot with free scales\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class'\n                , scales = 'free_y'           # set scales so y-scale varies with the data\n                )\n    + theme(subplots_adjust={'wspace': 0.25}) # add spaceing between facets to make y-axis ticks visible\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add additional information to your facet labels, by using the labeller argument within the facet_wrap() command. Below we use labeller = 'label_both' to include the column name in the facet label.\n\n# facet plot with labeller\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap('class', labeller='label_both')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add two discrete variables to a facet:\n\n# add additional column for plotting exercise\nmpg[\"transmission\"] = mpg['trans'].map(lambda x: \"auto\" if \"auto\" in x else \"man\" if \"man\" in x else \"\")\n\n\n# inspect new column transmission which identifies cars as having an automatic or manual transmission\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntransmission\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\nauto\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\nman\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\nman\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\nauto\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\nauto\n\n\n\n\n\n\n\n\n# facet plot with two variables on one facet\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_wrap(['class', 'transmission']) # use ~ + to add additional faceting variables\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Facet wrap"
  },
  {
    "objectID": "reference/faithfuld.html",
    "href": "reference/faithfuld.html",
    "title": "faithfuld",
    "section": "",
    "text": "faithfuld\ndata.faithfuld\nOld Faithful Geyser Data\n.. rubric:: Description\nWaiting time between eruptions and the duration of the eruption for the Old Faithful geyser in Yellowstone National Park, Wyoming, USA.\n.. rubric:: Format\nA data frame with grid data for 272 observations on 2 variables and the density at those locations.\n========== ======================================== Column Description ========== ======================================== eruptions Eruption time in mins waiting Waiting time to next eruption (in mins) density Density Estimate ========== ========================================\n.. rubric:: Details\nA closer look at faithful.eruptions reveals that these are heavily rounded times originally in seconds, where multiples of 5 are more frequent than expected under non-human measurement. For a better version of the eruption times, see the example below.\nThere are many versions of this dataset around: Azzalini and Bowman (1990) use a more complete version.\n.. rubric:: Source\nW. Härdle.\n.. rubric:: References\nHärdle, W. (1991) Smoothing Techniques with Implementation in S. New York: Springer.\nAzzalini, A. and Bowman, A. W. (1990). A look at some data on the Old Faithful geyser. Applied Statistics 39, 357–365."
  },
  {
    "objectID": "reference/geom.html",
    "href": "reference/geom.html",
    "title": "geom",
    "section": "",
    "text": "geom\ngeoms.geom.geom(self, mapping=None, data=None, **kwargs)\nBase class of all Geoms"
  },
  {
    "objectID": "reference/geom_area.html",
    "href": "reference/geom_area.html",
    "title": "geom_area",
    "section": "",
    "text": "geoms.geom_area()\nArea plot\nAn area plot is a special case of geom_ribbon, where the minimum of the range is fixed to 0, and the position adjustment defaults to ‘stack’.\nUsage\ngeom_area(mapping=None, data=None, stat='identity', position='stack',\n          na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n          outline_type='upper', **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nnone\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nwhere\n\n\nTrue\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_ribbon"
  },
  {
    "objectID": "reference/geom_area.html#parameters",
    "href": "reference/geom_area.html#parameters",
    "title": "geom_area",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nnone\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nwhere\n\n\nTrue\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_area.html#see-also",
    "href": "reference/geom_area.html#see-also",
    "title": "geom_area",
    "section": "",
    "text": "plotnine.geoms.geom_ribbon"
  },
  {
    "objectID": "reference/geom_bin_2d.html",
    "href": "reference/geom_bin_2d.html",
    "title": "geom_bin_2d",
    "section": "",
    "text": "geoms.geom_bin_2d()\nHeatmap of 2d bin counts\nDivides the plane into rectangles, counts the number of cases in each rectangle, and then (by default) maps the number of cases to the rectangle’s fill. This is a useful alternative to geom_point in the presence of overplotting.\nUsage\ngeom_bin_2d(mapping=None, data=None, stat='bin_2d', position='identity',\n            na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n            **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nxmax\n\n\n\n\n\n\nxmin\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#595959\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_bin_2d) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_bin_2d.html#parameters",
    "href": "reference/geom_bin_2d.html#parameters",
    "title": "geom_bin_2d",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nxmax\n\n\n\n\n\n\nxmin\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#595959\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_bin_2d) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_boxplot.html",
    "href": "reference/geom_boxplot.html",
    "title": "geom_boxplot",
    "section": "",
    "text": "geoms.geom_boxplot(self, mapping=None, data=None, **kwargs)\nBox and whiskers plot\nUsage\ngeom_boxplot(mapping=None, data=None, stat='boxplot', position='dodge2',\n             na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n             outlier_alpha=1, outlier_color=None, notch=False,\n             outlier_size=1.5, width=None, outlier_stroke=0.5, varwidth=False,\n             fatten=2, notchwidth=0.5, outlier_shape='o', **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nlower\n\n\n\n\n\n\nmiddle\n\n\n\n\n\n\nupper\n\n\n\n\n\n\nx\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n#333333\n\n\n\n\nfill\n\n\nwhite\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nweight\n\n\n1\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_boxplot) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_dodge2) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nwidth : float, optional (default None) Box width. If None, the width is set to 90% of the resolution of the data. Note that if the stat has a width parameter, that takes precedence over this one. outlier_alpha : float, optional (default: 1) Transparency of the outlier points. outlier_color : str or tuple, optional (default: None) Color of the outlier points. outlier_shape : str, optional (default: o) Shape of the outlier points. An empty string hides the outliers. outlier_size : float, optional (default: 1.5) Size of the outlier points. outlier_stroke : float, optional (default: 0.5) Stroke-size of the outlier points. notch : bool, optional (default: False) Whether the boxes should have a notch. varwidth : bool, optional (default: False) If True, boxes are drawn with widths proportional to the square-roots of the number of observations in the groups. notchwidth : float, optional (default: 0.5) Width of notch relative to the body width. fatten : float, optional (default: 2) A multiplicative factor used to increase the size of the middle bar across the box.\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_boxplot,\n    geom_jitter,\n    scale_x_discrete,\n    coord_flip\n)\n\n\n\nThe boxplot compactly displays the distribution of a continuous variable.\nRead more: + wikipedia + ggplot2 docs\n\nflights = pd.read_csv('data/flights.csv')\nflights.head()\n\n\n\n\n\n\n\n\nyear\nmonth\npassengers\n\n\n\n\n0\n1949\nJanuary\n112\n\n\n1\n1949\nFebruary\n118\n\n\n2\n1949\nMarch\n132\n\n\n3\n1949\nApril\n129\n\n\n4\n1949\nMay\n121\n\n\n\n\n\n\n\nBasic boxplot\n\nmonths = [month[:3] for month in flights.month[:12]]\nprint(months)\n\n['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n\n\n(\n    ggplot(flights) \n    + geom_boxplot(aes(x='factor(month)', y='passengers'))\n    + scale_x_discrete(labels=months, name='month')  # change ticks labels on OX\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nHorizontal boxplot\n\n(\n    ggplot(flights) \n    + geom_boxplot(aes(x='factor(month)', y='passengers'))\n    + coord_flip()\n    + scale_x_discrete(\n        labels=months[::-1], \n        limits=flights.month[11::-1],\n        name='month',\n    )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nBoxplot with jittered points:\n\n(\n    ggplot(flights, aes(x='factor(month)', y='passengers')) \n    + geom_boxplot()\n    + geom_jitter()\n    + scale_x_discrete(labels=months, name='month')  # change ticks labels on OX\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: A box and whiskers plot"
  },
  {
    "objectID": "reference/geom_boxplot.html#parameters",
    "href": "reference/geom_boxplot.html#parameters",
    "title": "geom_boxplot",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nlower\n\n\n\n\n\n\nmiddle\n\n\n\n\n\n\nupper\n\n\n\n\n\n\nx\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n#333333\n\n\n\n\nfill\n\n\nwhite\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nweight\n\n\n1\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_boxplot) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_dodge2) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nwidth : float, optional (default None) Box width. If None, the width is set to 90% of the resolution of the data. Note that if the stat has a width parameter, that takes precedence over this one. outlier_alpha : float, optional (default: 1) Transparency of the outlier points. outlier_color : str or tuple, optional (default: None) Color of the outlier points. outlier_shape : str, optional (default: o) Shape of the outlier points. An empty string hides the outliers. outlier_size : float, optional (default: 1.5) Size of the outlier points. outlier_stroke : float, optional (default: 0.5) Stroke-size of the outlier points. notch : bool, optional (default: False) Whether the boxes should have a notch. varwidth : bool, optional (default: False) If True, boxes are drawn with widths proportional to the square-roots of the number of observations in the groups. notchwidth : float, optional (default: 0.5) Width of notch relative to the body width. fatten : float, optional (default: 2) A multiplicative factor used to increase the size of the middle bar across the box."
  },
  {
    "objectID": "reference/geom_boxplot.html#examples",
    "href": "reference/geom_boxplot.html#examples",
    "title": "geom_boxplot",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_boxplot,\n    geom_jitter,\n    scale_x_discrete,\n    coord_flip\n)\n\n\n\nThe boxplot compactly displays the distribution of a continuous variable.\nRead more: + wikipedia + ggplot2 docs\n\nflights = pd.read_csv('data/flights.csv')\nflights.head()\n\n\n\n\n\n\n\n\nyear\nmonth\npassengers\n\n\n\n\n0\n1949\nJanuary\n112\n\n\n1\n1949\nFebruary\n118\n\n\n2\n1949\nMarch\n132\n\n\n3\n1949\nApril\n129\n\n\n4\n1949\nMay\n121\n\n\n\n\n\n\n\nBasic boxplot\n\nmonths = [month[:3] for month in flights.month[:12]]\nprint(months)\n\n['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n\n\n(\n    ggplot(flights) \n    + geom_boxplot(aes(x='factor(month)', y='passengers'))\n    + scale_x_discrete(labels=months, name='month')  # change ticks labels on OX\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nHorizontal boxplot\n\n(\n    ggplot(flights) \n    + geom_boxplot(aes(x='factor(month)', y='passengers'))\n    + coord_flip()\n    + scale_x_discrete(\n        labels=months[::-1], \n        limits=flights.month[11::-1],\n        name='month',\n    )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nBoxplot with jittered points:\n\n(\n    ggplot(flights, aes(x='factor(month)', y='passengers')) \n    + geom_boxplot()\n    + geom_jitter()\n    + scale_x_discrete(labels=months, name='month')  # change ticks labels on OX\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: A box and whiskers plot"
  },
  {
    "objectID": "reference/geom_count.html",
    "href": "reference/geom_count.html",
    "title": "geom_count",
    "section": "",
    "text": "geoms.geom_count()\nPlot overlapping points\nThis is a variant geom_point that counts the number of observations at each location, then maps the count to point area. It useful when you have discrete data and overplotting.\nUsage\ngeom_count(mapping=None, data=None, stat='sum', position='identity',\n           na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n           **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_sum) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_count,\n    scale_size_continuous\n)\nfrom plotnine.data import diamonds\n\n\n\ngeom_count() makes the point size proportional to the number of points at a location\n\ndiamonds.head()\n\n\n\n\n\n\n\n\ncarat\ncut\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0\n0.23\nIdeal\nE\nSI2\n61.5\n55.0\n326\n3.95\n3.98\n2.43\n\n\n1\n0.21\nPremium\nE\nSI1\n59.8\n61.0\n326\n3.89\n3.84\n2.31\n\n\n2\n0.23\nGood\nE\nVS1\n56.9\n65.0\n327\n4.05\n4.07\n2.31\n\n\n3\n0.29\nPremium\nI\nVS2\n62.4\n58.0\n334\n4.20\n4.23\n2.63\n\n\n4\n0.31\nGood\nJ\nSI2\n63.3\n58.0\n335\n4.34\n4.35\n2.75\n\n\n\n\n\n\n\n\nggplot(diamonds) + geom_count(aes(x='cut', y='color'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can adjust the size range of the points with scale_size_continuous\n\n(\n    ggplot(diamonds)\n    + geom_count(aes(x='cut', y='color'))\n    + scale_size_continuous(range=[1,20])\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Categorized Data Plot"
  },
  {
    "objectID": "reference/geom_count.html#parameters",
    "href": "reference/geom_count.html#parameters",
    "title": "geom_count",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_sum) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_count.html#examples",
    "href": "reference/geom_count.html#examples",
    "title": "geom_count",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_count,\n    scale_size_continuous\n)\nfrom plotnine.data import diamonds\n\n\n\ngeom_count() makes the point size proportional to the number of points at a location\n\ndiamonds.head()\n\n\n\n\n\n\n\n\ncarat\ncut\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0\n0.23\nIdeal\nE\nSI2\n61.5\n55.0\n326\n3.95\n3.98\n2.43\n\n\n1\n0.21\nPremium\nE\nSI1\n59.8\n61.0\n326\n3.89\n3.84\n2.31\n\n\n2\n0.23\nGood\nE\nVS1\n56.9\n65.0\n327\n4.05\n4.07\n2.31\n\n\n3\n0.29\nPremium\nI\nVS2\n62.4\n58.0\n334\n4.20\n4.23\n2.63\n\n\n4\n0.31\nGood\nJ\nSI2\n63.3\n58.0\n335\n4.34\n4.35\n2.75\n\n\n\n\n\n\n\n\nggplot(diamonds) + geom_count(aes(x='cut', y='color'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can adjust the size range of the points with scale_size_continuous\n\n(\n    ggplot(diamonds)\n    + geom_count(aes(x='cut', y='color'))\n    + scale_size_continuous(range=[1,20])\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Categorized Data Plot"
  },
  {
    "objectID": "reference/geom_density.html",
    "href": "reference/geom_density.html",
    "title": "geom_density",
    "section": "",
    "text": "geoms.geom_density()\nSmooth density estimate\nUsage\ngeom_density(mapping=None, data=None, stat='density', position='identity',\n             na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n             outline_type='upper', **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nweight\n\n\n1\n\n\n\n\nwhere\n\n\nTrue\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_ribbon\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    geom_density,\n    geom_histogram,\n    geom_vline,\n    geom_rect,\n    labs,\n    annotate,\n    theme_tufte\n)\nfrom plotnine.data import mpg\n\n\n\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nThe defaults are not exactly beautiful, but still quite clear.\n\n(ggplot(mpg, aes(x='cty'))\n + geom_density()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nPlotting multiple groups is straightforward, but as each group is plotted as an independent PDF summing to 1, the relative size of each group will be normalized.\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(alpha=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo plot multiple groups and scale them by their relative size, you can map the y aesthetic to 'count' (calculated by stat_density).\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(aes(y=after_stat('count')), alpha=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\nTo overlay a histogram onto the density, the y aesthetic of the density should be mapped to the 'count' scaled by the binwidth of the histograms.\nWhy?\nThe count calculated by stat_density is \\(count = density * n\\) where n is the number of points . The density curves have an area of 1 and have no information about the absolute frequency of the values along curve; only the relative frequencies. The count curve reveals the absolute frequencies. The scale of this count corresponds to the count calculated by the stat_bin for the histogram when the bins are 1 unit wide i.e. binwidth=1. The count * binwidth curve matches the scale of counts for the histogram for a give binwidth.\n\nbinwidth = 2  # The same for geom_density and geom_histogram\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(aes(y=after_stat('count*binwidth')), alpha=0.1)\n + geom_histogram(aes(fill='drv', y=after_stat('count')), binwidth=binwidth, color='none', alpha=0.5)\n \n # It is the histogram that gives us the meaningful y axis label\n # i.e. 'count' and not 'count*2'\n + labs(y='count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\nExtending geom_density to create an effect of a shaded region\nCreate some data and plot the density\n\nn = 101\ndf = pd.DataFrame({'x': np.arange(n)})\n\n(ggplot(df, aes('x'))\n + geom_density()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nSuppose we want to mark a region as special e.g. (40, 60), we can use vertical lines to annotate it.\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + annotate(geom_vline, xintercept=region)  #new line\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo make it standout more we can highlight. To do that, the first thought is to use a rectangle.\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + annotate(geom_rect, xmin=region[0], xmax=region[1], ymin=0, ymax=float('inf'), alpha=0.5) # new line\n + annotate(geom_vline, xintercept=region)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nSince y upper-bound varies along the curve, a rectangular highlight has to stretch up to the top of the panel.\nTo hightlight only within the density curve, we have to use a second density curve. We need to calculate the density as normal, but just before the curve & region are plotted, we should keep only the region we want.\nWe create our own geom_density_highlight and override the setup_data method. First, we override but do nothing, we only inspect the data to see what we have to work with.\n\n# new class\nclass geom_density_highlight(geom_density):\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        print(data)\n        return data\n\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + geom_density_highlight(fill='black', alpha=0.5)  # new line\n + annotate(geom_vline, xintercept=region)\n)\n\n      PANEL     count   density  group    n    scaled           x         y   \n0         1  0.519038  0.005139     -1  101  0.519039    0.000000  0.005139  \\\n1         1  0.522757  0.005176     -1  101  0.522758    0.097752  0.005176   \n2         1  0.526473  0.005213     -1  101  0.526474    0.195503  0.005213   \n3         1  0.530187  0.005249     -1  101  0.530188    0.293255  0.005249   \n4         1  0.533899  0.005286     -1  101  0.533900    0.391007  0.005286   \n...     ...       ...       ...    ...  ...       ...         ...       ...   \n1019      1  0.533899  0.005286     -1  101  0.533900   99.608993  0.005286   \n1020      1  0.530187  0.005249     -1  101  0.530188   99.706745  0.005249   \n1021      1  0.526473  0.005213     -1  101  0.526474   99.804497  0.005213   \n1022      1  0.522757  0.005176     -1  101  0.522758   99.902248  0.005176   \n1023      1  0.519038  0.005139     -1  101  0.519039  100.000000  0.005139   \n\n      ymin      ymax  \n0        0  0.005139  \n1        0  0.005176  \n2        0  0.005213  \n3        0  0.005249  \n4        0  0.005286  \n...    ...       ...  \n1019     0  0.005286  \n1020     0  0.005249  \n1021     0  0.005213  \n1022     0  0.005176  \n1023     0  0.005139  \n\n[1024 rows x 10 columns]\n\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe highlight has filled the whole region, but the printed data suggests that we can limit the rows to those where x column is within our region.\n\nclass geom_density_highlight(geom_density):\n    \n    # new method\n    def __init__(self, *args, region=(-np.inf, np.inf), **kwargs):\n        super().__init__(*args, **kwargs)\n        self.region = region\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        s = f'{self.region[0]} &lt;= x &lt;= {self.region[1]}'  # new line\n        data = data.query(s).reset_index(drop=True)       # new line\n        return data\n\n    \nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + geom_density_highlight(region=region, fill='black', alpha=0.5) # modified line\n + annotate(geom_vline, xintercept=region)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat is it, but we can make it look better.\n\nclass geom_density_highlight(geom_density):\n\n    def __init__(self, *args, region=(-np.inf, np.inf), **kwargs):\n        super().__init__(*args, **kwargs)\n        self.region = region\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        s = f'{self.region[0]} &lt;= x &lt;= {self.region[1]}'\n        data = data.query(s).reset_index(drop=True)\n        return data\n\n\nregion = (40, 60)\nteal = '#029386'\n\n# Gallery Plot\n\n(ggplot(df, aes('x'))\n + geom_density_highlight(region=region, fill=teal+'88', color='none')\n + geom_density(fill=teal+'44', color=teal, size=.7)\n + annotate(geom_vline, xintercept=region, color=teal, size=.7)\n + theme_tufte()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThis example was motivated by a question from github user Rishika-Ravindran.\n\nSource: Density Plot"
  },
  {
    "objectID": "reference/geom_density.html#parameters",
    "href": "reference/geom_density.html#parameters",
    "title": "geom_density",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nweight\n\n\n1\n\n\n\n\nwhere\n\n\nTrue\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_density.html#see-also",
    "href": "reference/geom_density.html#see-also",
    "title": "geom_density",
    "section": "",
    "text": "plotnine.geoms.geom_ribbon"
  },
  {
    "objectID": "reference/geom_density.html#examples",
    "href": "reference/geom_density.html#examples",
    "title": "geom_density",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    geom_density,\n    geom_histogram,\n    geom_vline,\n    geom_rect,\n    labs,\n    annotate,\n    theme_tufte\n)\nfrom plotnine.data import mpg\n\n\n\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nThe defaults are not exactly beautiful, but still quite clear.\n\n(ggplot(mpg, aes(x='cty'))\n + geom_density()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nPlotting multiple groups is straightforward, but as each group is plotted as an independent PDF summing to 1, the relative size of each group will be normalized.\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(alpha=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo plot multiple groups and scale them by their relative size, you can map the y aesthetic to 'count' (calculated by stat_density).\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(aes(y=after_stat('count')), alpha=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\nTo overlay a histogram onto the density, the y aesthetic of the density should be mapped to the 'count' scaled by the binwidth of the histograms.\nWhy?\nThe count calculated by stat_density is \\(count = density * n\\) where n is the number of points . The density curves have an area of 1 and have no information about the absolute frequency of the values along curve; only the relative frequencies. The count curve reveals the absolute frequencies. The scale of this count corresponds to the count calculated by the stat_bin for the histogram when the bins are 1 unit wide i.e. binwidth=1. The count * binwidth curve matches the scale of counts for the histogram for a give binwidth.\n\nbinwidth = 2  # The same for geom_density and geom_histogram\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(aes(y=after_stat('count*binwidth')), alpha=0.1)\n + geom_histogram(aes(fill='drv', y=after_stat('count')), binwidth=binwidth, color='none', alpha=0.5)\n \n # It is the histogram that gives us the meaningful y axis label\n # i.e. 'count' and not 'count*2'\n + labs(y='count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\nExtending geom_density to create an effect of a shaded region\nCreate some data and plot the density\n\nn = 101\ndf = pd.DataFrame({'x': np.arange(n)})\n\n(ggplot(df, aes('x'))\n + geom_density()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nSuppose we want to mark a region as special e.g. (40, 60), we can use vertical lines to annotate it.\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + annotate(geom_vline, xintercept=region)  #new line\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo make it standout more we can highlight. To do that, the first thought is to use a rectangle.\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + annotate(geom_rect, xmin=region[0], xmax=region[1], ymin=0, ymax=float('inf'), alpha=0.5) # new line\n + annotate(geom_vline, xintercept=region)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nSince y upper-bound varies along the curve, a rectangular highlight has to stretch up to the top of the panel.\nTo hightlight only within the density curve, we have to use a second density curve. We need to calculate the density as normal, but just before the curve & region are plotted, we should keep only the region we want.\nWe create our own geom_density_highlight and override the setup_data method. First, we override but do nothing, we only inspect the data to see what we have to work with.\n\n# new class\nclass geom_density_highlight(geom_density):\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        print(data)\n        return data\n\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + geom_density_highlight(fill='black', alpha=0.5)  # new line\n + annotate(geom_vline, xintercept=region)\n)\n\n      PANEL     count   density  group    n    scaled           x         y   \n0         1  0.519038  0.005139     -1  101  0.519039    0.000000  0.005139  \\\n1         1  0.522757  0.005176     -1  101  0.522758    0.097752  0.005176   \n2         1  0.526473  0.005213     -1  101  0.526474    0.195503  0.005213   \n3         1  0.530187  0.005249     -1  101  0.530188    0.293255  0.005249   \n4         1  0.533899  0.005286     -1  101  0.533900    0.391007  0.005286   \n...     ...       ...       ...    ...  ...       ...         ...       ...   \n1019      1  0.533899  0.005286     -1  101  0.533900   99.608993  0.005286   \n1020      1  0.530187  0.005249     -1  101  0.530188   99.706745  0.005249   \n1021      1  0.526473  0.005213     -1  101  0.526474   99.804497  0.005213   \n1022      1  0.522757  0.005176     -1  101  0.522758   99.902248  0.005176   \n1023      1  0.519038  0.005139     -1  101  0.519039  100.000000  0.005139   \n\n      ymin      ymax  \n0        0  0.005139  \n1        0  0.005176  \n2        0  0.005213  \n3        0  0.005249  \n4        0  0.005286  \n...    ...       ...  \n1019     0  0.005286  \n1020     0  0.005249  \n1021     0  0.005213  \n1022     0  0.005176  \n1023     0  0.005139  \n\n[1024 rows x 10 columns]\n\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe highlight has filled the whole region, but the printed data suggests that we can limit the rows to those where x column is within our region.\n\nclass geom_density_highlight(geom_density):\n    \n    # new method\n    def __init__(self, *args, region=(-np.inf, np.inf), **kwargs):\n        super().__init__(*args, **kwargs)\n        self.region = region\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        s = f'{self.region[0]} &lt;= x &lt;= {self.region[1]}'  # new line\n        data = data.query(s).reset_index(drop=True)       # new line\n        return data\n\n    \nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + geom_density_highlight(region=region, fill='black', alpha=0.5) # modified line\n + annotate(geom_vline, xintercept=region)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat is it, but we can make it look better.\n\nclass geom_density_highlight(geom_density):\n\n    def __init__(self, *args, region=(-np.inf, np.inf), **kwargs):\n        super().__init__(*args, **kwargs)\n        self.region = region\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        s = f'{self.region[0]} &lt;= x &lt;= {self.region[1]}'\n        data = data.query(s).reset_index(drop=True)\n        return data\n\n\nregion = (40, 60)\nteal = '#029386'\n\n# Gallery Plot\n\n(ggplot(df, aes('x'))\n + geom_density_highlight(region=region, fill=teal+'88', color='none')\n + geom_density(fill=teal+'44', color=teal, size=.7)\n + annotate(geom_vline, xintercept=region, color=teal, size=.7)\n + theme_tufte()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThis example was motivated by a question from github user Rishika-Ravindran.\n\nSource: Density Plot"
  },
  {
    "objectID": "reference/geom_dotplot.html",
    "href": "reference/geom_dotplot.html",
    "title": "geom_dotplot",
    "section": "",
    "text": "geoms.geom_dotplot()\nDot plot\nUsage\ngeom_dotplot(mapping=None, data=None, stat='bindot', position='identity',\n             na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n             stackgroups=False, stackdir='up', dotsize=1, stackratio=1,\n             **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.stats.stat_bindot"
  },
  {
    "objectID": "reference/geom_dotplot.html#parameters",
    "href": "reference/geom_dotplot.html#parameters",
    "title": "geom_dotplot",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_dotplot.html#see-also",
    "href": "reference/geom_dotplot.html#see-also",
    "title": "geom_dotplot",
    "section": "",
    "text": "plotnine.stats.stat_bindot"
  },
  {
    "objectID": "reference/geom_errorbarh.html",
    "href": "reference/geom_errorbarh.html",
    "title": "geom_errorbarh",
    "section": "",
    "text": "geoms.geom_errorbarh()\nHorizontal interval represented as an errorbar\nUsage\ngeom_errorbarh(mapping=None, data=None, stat='identity', position='identity',\n               na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n               height=0.5, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nxmax\n\n\n\n\n\n\nxmin\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nheight : float or None, optional (default: 0.5) Bar height. If None, the height is set to 90% of the resolution of the data."
  },
  {
    "objectID": "reference/geom_errorbarh.html#parameters",
    "href": "reference/geom_errorbarh.html#parameters",
    "title": "geom_errorbarh",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nxmax\n\n\n\n\n\n\nxmin\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nheight : float or None, optional (default: 0.5) Bar height. If None, the height is set to 90% of the resolution of the data."
  },
  {
    "objectID": "reference/geom_histogram.html",
    "href": "reference/geom_histogram.html",
    "title": "geom_histogram",
    "section": "",
    "text": "geoms.geom_histogram()\nHistogram\nUsage\ngeom_histogram(mapping=None, data=None, stat='bin', position='stack',\n               na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n               **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#595959\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_bar\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    geom_histogram,\n    facet_wrap,\n    facet_grid,\n    coord_flip,\n    scale_y_continuous,\n    scale_y_sqrt,\n    scale_y_log10,\n    scale_fill_manual,\n    theme_bw,\n    theme_xkcd\n    \n)\nfrom plotnine.data import diamonds\nfrom mizani.formatters import percent_format \n\n\n\nVisualise the distribution of a variable by dividing the x-axis into bins and counting the number of observations in each bin. Histograms display the counts with bars.\nYou can define the number of bins (e.g. divide the data five bins) or define the binwidth (e.g. each bin is size 10).\nDistributions can be visualised as: * count, * normalised count, * density, * normalised density, * scaled density as a percentage.\n\ndiamonds.head(5)\n\n\n\n\n\n\n\n\ncarat\ncut\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0\n0.23\nIdeal\nE\nSI2\n61.5\n55.0\n326\n3.95\n3.98\n2.43\n\n\n1\n0.21\nPremium\nE\nSI1\n59.8\n61.0\n326\n3.89\n3.84\n2.31\n\n\n2\n0.23\nGood\nE\nVS1\n56.9\n65.0\n327\n4.05\n4.07\n2.31\n\n\n3\n0.29\nPremium\nI\nVS2\n62.4\n58.0\n334\n4.20\n4.23\n2.63\n\n\n4\n0.31\nGood\nJ\nSI2\n63.3\n58.0\n335\n4.34\n4.35\n2.75\n\n\n\n\n\n\n\nIf you create a basic histogram, you will be prompted to define the binwidth or number of bins.\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can define the width of the bins, by specifying the binwidth inside geom_histogram().\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram(binwidth=0.5) # specify the binwidth\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nOr you can define the number of bins by specifying bins inside geom_histogram(). Note, the example below uses 10 bins, however you can’t see them all because some of the bins are too small to be noticeable.\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram(bins=10) # specify the number of bins\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThere are different ways to visualise the distribution, you can specify this using the y argument within aes(). In the example below I’m using the default setting: raw count with after_stat('count').\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('count') # specify each bin is a count\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can normalise the raw count to 1 by using after_stat('ncount'):\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('ncount') # normalise the count to 1\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can display the density of points in a bin, (this is scaled to integrate to 1) by using after_stat('density'):\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('density') # density\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe proportion of bins can be shown, in the example below the bin=0.5 accounts for about ~55% of the data:\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('width*density')) # show proportion\n          ) \n    + geom_histogram(binwidth=0.5)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can also display counts as percentages by using the percent_format() which requires the mizani.formatters library:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('width*density'))) \n    + geom_histogram(binwidth=0.5)\n    + scale_y_continuous(labels=percent_format()) # display labels as a percentage\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nInstead of using stat you can use stat_bin defined within geom_histogram(), this is useful if you want to layer a few different plots in the one figure.\n\n(\n    ggplot(diamonds, aes(x='carat'))\n    + geom_histogram(binwidth=0.5, alpha=0.5)\n    + geom_histogram(binwidth=0.2, alpha=0.5, fill='green')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can also flip the x-y coordinates:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('density'))) \n    + geom_histogram(binwidth=0.5)\n    + coord_flip()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can visualise counts by other variables using fill within aes():\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('count'),fill='cut')) \n    + geom_histogram(binwidth=0.5)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can visualise too-small-to-see bars by transforming the y-axis scaling by using scale_y_sqrt() square-root scale or scale_y_log10() for a log-scale (similarly use scale_x_sqrt() and scale_x_log10() to transform the x-axis).\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('count'))) \n    + geom_histogram(binwidth=0.5)\n    + scale_y_sqrt() # square root scale\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(\n    ggplot(diamonds, aes(x = 'carat', y = after_stat('count'))) \n    + geom_histogram(binwidth = 0.5)\n    + scale_y_log10() # log scale\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nChange the look of your plot:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('density')))\n    + geom_histogram(binwidth=0.5,\n                    fill='green',  # change the fill colour (one colour)\n                    colour='pink', # change the outline\n                    size=2,        # change the thickness of the outline\n                    alpha=0.7      # change the transparency \n                    )\n    + theme_xkcd()                 # play with themes (look/arrangement)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAnother change, this time changing the fill colours manually:\n\n(\n    ggplot(diamonds, aes(x='carat', \n                         y=after_stat('density'),\n                         fill='cut'  # change the fill colour using another variable\n                        ))\n    + scale_fill_manual(values=[\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\"]) # change the fill colour\n    + geom_histogram(binwidth=0.5,\n                    colour=\"#D55E00\",# change the outline\n                    size=1,          # change the thickness of the outline\n                    alpha=0.7        # change the transparency \n                    )\n    + theme_bw()                     # play with themes (look/arrangement)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWhen faceting histograms with scaled counts/densities, they are normalised by each facet, and not overall. Here’s an example of a facet wrap:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('ncount'))) \n    + geom_histogram(binwidth=0.5)\n    + facet_wrap('color') # facet wrap\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nHere’s an example of a facet grid with the count normalised in each grid:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('ncount'))) \n    + geom_histogram(binwidth=0.5)\n    + facet_grid('cut ~ color')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Histograms"
  },
  {
    "objectID": "reference/geom_histogram.html#parameters",
    "href": "reference/geom_histogram.html#parameters",
    "title": "geom_histogram",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#595959\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_histogram.html#see-also",
    "href": "reference/geom_histogram.html#see-also",
    "title": "geom_histogram",
    "section": "",
    "text": "plotnine.geoms.geom_bar"
  },
  {
    "objectID": "reference/geom_histogram.html#examples",
    "href": "reference/geom_histogram.html#examples",
    "title": "geom_histogram",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    geom_histogram,\n    facet_wrap,\n    facet_grid,\n    coord_flip,\n    scale_y_continuous,\n    scale_y_sqrt,\n    scale_y_log10,\n    scale_fill_manual,\n    theme_bw,\n    theme_xkcd\n    \n)\nfrom plotnine.data import diamonds\nfrom mizani.formatters import percent_format \n\n\n\nVisualise the distribution of a variable by dividing the x-axis into bins and counting the number of observations in each bin. Histograms display the counts with bars.\nYou can define the number of bins (e.g. divide the data five bins) or define the binwidth (e.g. each bin is size 10).\nDistributions can be visualised as: * count, * normalised count, * density, * normalised density, * scaled density as a percentage.\n\ndiamonds.head(5)\n\n\n\n\n\n\n\n\ncarat\ncut\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0\n0.23\nIdeal\nE\nSI2\n61.5\n55.0\n326\n3.95\n3.98\n2.43\n\n\n1\n0.21\nPremium\nE\nSI1\n59.8\n61.0\n326\n3.89\n3.84\n2.31\n\n\n2\n0.23\nGood\nE\nVS1\n56.9\n65.0\n327\n4.05\n4.07\n2.31\n\n\n3\n0.29\nPremium\nI\nVS2\n62.4\n58.0\n334\n4.20\n4.23\n2.63\n\n\n4\n0.31\nGood\nJ\nSI2\n63.3\n58.0\n335\n4.34\n4.35\n2.75\n\n\n\n\n\n\n\nIf you create a basic histogram, you will be prompted to define the binwidth or number of bins.\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can define the width of the bins, by specifying the binwidth inside geom_histogram().\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram(binwidth=0.5) # specify the binwidth\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nOr you can define the number of bins by specifying bins inside geom_histogram(). Note, the example below uses 10 bins, however you can’t see them all because some of the bins are too small to be noticeable.\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram(bins=10) # specify the number of bins\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThere are different ways to visualise the distribution, you can specify this using the y argument within aes(). In the example below I’m using the default setting: raw count with after_stat('count').\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('count') # specify each bin is a count\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can normalise the raw count to 1 by using after_stat('ncount'):\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('ncount') # normalise the count to 1\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can display the density of points in a bin, (this is scaled to integrate to 1) by using after_stat('density'):\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('density') # density\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe proportion of bins can be shown, in the example below the bin=0.5 accounts for about ~55% of the data:\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('width*density')) # show proportion\n          ) \n    + geom_histogram(binwidth=0.5)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can also display counts as percentages by using the percent_format() which requires the mizani.formatters library:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('width*density'))) \n    + geom_histogram(binwidth=0.5)\n    + scale_y_continuous(labels=percent_format()) # display labels as a percentage\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nInstead of using stat you can use stat_bin defined within geom_histogram(), this is useful if you want to layer a few different plots in the one figure.\n\n(\n    ggplot(diamonds, aes(x='carat'))\n    + geom_histogram(binwidth=0.5, alpha=0.5)\n    + geom_histogram(binwidth=0.2, alpha=0.5, fill='green')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can also flip the x-y coordinates:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('density'))) \n    + geom_histogram(binwidth=0.5)\n    + coord_flip()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can visualise counts by other variables using fill within aes():\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('count'),fill='cut')) \n    + geom_histogram(binwidth=0.5)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can visualise too-small-to-see bars by transforming the y-axis scaling by using scale_y_sqrt() square-root scale or scale_y_log10() for a log-scale (similarly use scale_x_sqrt() and scale_x_log10() to transform the x-axis).\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('count'))) \n    + geom_histogram(binwidth=0.5)\n    + scale_y_sqrt() # square root scale\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(\n    ggplot(diamonds, aes(x = 'carat', y = after_stat('count'))) \n    + geom_histogram(binwidth = 0.5)\n    + scale_y_log10() # log scale\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nChange the look of your plot:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('density')))\n    + geom_histogram(binwidth=0.5,\n                    fill='green',  # change the fill colour (one colour)\n                    colour='pink', # change the outline\n                    size=2,        # change the thickness of the outline\n                    alpha=0.7      # change the transparency \n                    )\n    + theme_xkcd()                 # play with themes (look/arrangement)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAnother change, this time changing the fill colours manually:\n\n(\n    ggplot(diamonds, aes(x='carat', \n                         y=after_stat('density'),\n                         fill='cut'  # change the fill colour using another variable\n                        ))\n    + scale_fill_manual(values=[\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\"]) # change the fill colour\n    + geom_histogram(binwidth=0.5,\n                    colour=\"#D55E00\",# change the outline\n                    size=1,          # change the thickness of the outline\n                    alpha=0.7        # change the transparency \n                    )\n    + theme_bw()                     # play with themes (look/arrangement)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWhen faceting histograms with scaled counts/densities, they are normalised by each facet, and not overall. Here’s an example of a facet wrap:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('ncount'))) \n    + geom_histogram(binwidth=0.5)\n    + facet_wrap('color') # facet wrap\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nHere’s an example of a facet grid with the count normalised in each grid:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('ncount'))) \n    + geom_histogram(binwidth=0.5)\n    + facet_grid('cut ~ color')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Histograms"
  },
  {
    "objectID": "reference/geom_histogram.html#histograms",
    "href": "reference/geom_histogram.html#histograms",
    "title": "geom_histogram",
    "section": "",
    "text": "Visualise the distribution of a variable by dividing the x-axis into bins and counting the number of observations in each bin. Histograms display the counts with bars.\nYou can define the number of bins (e.g. divide the data five bins) or define the binwidth (e.g. each bin is size 10).\nDistributions can be visualised as: * count, * normalised count, * density, * normalised density, * scaled density as a percentage.\n\ndiamonds.head(5)\n\n\n\n\n\n\n\n\ncarat\ncut\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0\n0.23\nIdeal\nE\nSI2\n61.5\n55.0\n326\n3.95\n3.98\n2.43\n\n\n1\n0.21\nPremium\nE\nSI1\n59.8\n61.0\n326\n3.89\n3.84\n2.31\n\n\n2\n0.23\nGood\nE\nVS1\n56.9\n65.0\n327\n4.05\n4.07\n2.31\n\n\n3\n0.29\nPremium\nI\nVS2\n62.4\n58.0\n334\n4.20\n4.23\n2.63\n\n\n4\n0.31\nGood\nJ\nSI2\n63.3\n58.0\n335\n4.34\n4.35\n2.75\n\n\n\n\n\n\n\nIf you create a basic histogram, you will be prompted to define the binwidth or number of bins.\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can define the width of the bins, by specifying the binwidth inside geom_histogram().\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram(binwidth=0.5) # specify the binwidth\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nOr you can define the number of bins by specifying bins inside geom_histogram(). Note, the example below uses 10 bins, however you can’t see them all because some of the bins are too small to be noticeable.\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram(bins=10) # specify the number of bins\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThere are different ways to visualise the distribution, you can specify this using the y argument within aes(). In the example below I’m using the default setting: raw count with after_stat('count').\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('count') # specify each bin is a count\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can normalise the raw count to 1 by using after_stat('ncount'):\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('ncount') # normalise the count to 1\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can display the density of points in a bin, (this is scaled to integrate to 1) by using after_stat('density'):\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('density') # density\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe proportion of bins can be shown, in the example below the bin=0.5 accounts for about ~55% of the data:\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('width*density')) # show proportion\n          ) \n    + geom_histogram(binwidth=0.5)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can also display counts as percentages by using the percent_format() which requires the mizani.formatters library:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('width*density'))) \n    + geom_histogram(binwidth=0.5)\n    + scale_y_continuous(labels=percent_format()) # display labels as a percentage\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nInstead of using stat you can use stat_bin defined within geom_histogram(), this is useful if you want to layer a few different plots in the one figure.\n\n(\n    ggplot(diamonds, aes(x='carat'))\n    + geom_histogram(binwidth=0.5, alpha=0.5)\n    + geom_histogram(binwidth=0.2, alpha=0.5, fill='green')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can also flip the x-y coordinates:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('density'))) \n    + geom_histogram(binwidth=0.5)\n    + coord_flip()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can visualise counts by other variables using fill within aes():\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('count'),fill='cut')) \n    + geom_histogram(binwidth=0.5)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can visualise too-small-to-see bars by transforming the y-axis scaling by using scale_y_sqrt() square-root scale or scale_y_log10() for a log-scale (similarly use scale_x_sqrt() and scale_x_log10() to transform the x-axis).\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('count'))) \n    + geom_histogram(binwidth=0.5)\n    + scale_y_sqrt() # square root scale\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(\n    ggplot(diamonds, aes(x = 'carat', y = after_stat('count'))) \n    + geom_histogram(binwidth = 0.5)\n    + scale_y_log10() # log scale\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nChange the look of your plot:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('density')))\n    + geom_histogram(binwidth=0.5,\n                    fill='green',  # change the fill colour (one colour)\n                    colour='pink', # change the outline\n                    size=2,        # change the thickness of the outline\n                    alpha=0.7      # change the transparency \n                    )\n    + theme_xkcd()                 # play with themes (look/arrangement)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAnother change, this time changing the fill colours manually:\n\n(\n    ggplot(diamonds, aes(x='carat', \n                         y=after_stat('density'),\n                         fill='cut'  # change the fill colour using another variable\n                        ))\n    + scale_fill_manual(values=[\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\"]) # change the fill colour\n    + geom_histogram(binwidth=0.5,\n                    colour=\"#D55E00\",# change the outline\n                    size=1,          # change the thickness of the outline\n                    alpha=0.7        # change the transparency \n                    )\n    + theme_bw()                     # play with themes (look/arrangement)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWhen faceting histograms with scaled counts/densities, they are normalised by each facet, and not overall. Here’s an example of a facet wrap:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('ncount'))) \n    + geom_histogram(binwidth=0.5)\n    + facet_wrap('color') # facet wrap\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nHere’s an example of a facet grid with the count normalised in each grid:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('ncount'))) \n    + geom_histogram(binwidth=0.5)\n    + facet_grid('cut ~ color')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "reference/geom_jitter.html",
    "href": "reference/geom_jitter.html",
    "title": "geom_jitter",
    "section": "",
    "text": "geoms.geom_jitter(self, mapping=None, data=None, **kwargs)\nScatter plot with points jittered to reduce overplotting\nUsage\ngeom_jitter(mapping=None, data=None, stat='identity', position='jitter',\n            na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n            height=None, random_state=None, width=None, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\n\n\n\n\nplotnine.positions.position_jitter\nplotnine.geoms.geom_point"
  },
  {
    "objectID": "reference/geom_jitter.html#parameters",
    "href": "reference/geom_jitter.html#parameters",
    "title": "geom_jitter",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone"
  },
  {
    "objectID": "reference/geom_jitter.html#see-also",
    "href": "reference/geom_jitter.html#see-also",
    "title": "geom_jitter",
    "section": "",
    "text": "plotnine.positions.position_jitter\nplotnine.geoms.geom_point"
  },
  {
    "objectID": "reference/geom_line.html",
    "href": "reference/geom_line.html",
    "title": "geom_line",
    "section": "",
    "text": "geoms.geom_line()\nConnected points\nUsage\ngeom_line(mapping=None, data=None, stat='identity', position='identity',\n          na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n          lineend='butt', arrow=None, linejoin='round', **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_path: For documentation of other parameters.\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_line,\n    labs,\n    arrow\n)\nfrom plotnine.data import economics\n\n\n\ngeom_line() connects the dots, and is useful for time series data.\n\neconomics.head()\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n\n\n\n\n\n\n\n\n(\n    ggplot(economics, aes(x='date', y='uempmed')) \n    + geom_line() # line plot\n    + labs(x='date', y='median duration of unemployment')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can put arrows at the end of a line:\n\n(\n    ggplot(economics, aes(x='date', y='pop')) \n    + geom_line(arrow=arrow()) # add an arrow to the end of the line\n    + labs(x='date', y='total population (,000)')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe arrow can be modified for a different look:\n\n(\n    ggplot(economics, aes(x='date', y='pop')) \n    + geom_line(arrow=arrow(angle=35,      # defines the shape of the arrow head\n                              ends=\"both\",   # input what end to put the arrow on\n                              type=\"closed\", # defines arrow head type\n                             )) \n    + labs(x='date', y='total population (,000)')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can change the look of the line:\n\n(\n    ggplot(economics, aes(x='date', y='uempmed')) \n    + geom_line(color='pink',        # set line colour\n                  size=7,            # set line thickness\n                  linetype='dashed'  # set line type\n               )\n    + labs(x='date', y='median duration of unemployment')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Line plots"
  },
  {
    "objectID": "reference/geom_line.html#parameters",
    "href": "reference/geom_line.html#parameters",
    "title": "geom_line",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_line.html#see-also",
    "href": "reference/geom_line.html#see-also",
    "title": "geom_line",
    "section": "",
    "text": "plotnine.geoms.geom_path: For documentation of other parameters."
  },
  {
    "objectID": "reference/geom_line.html#examples",
    "href": "reference/geom_line.html#examples",
    "title": "geom_line",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_line,\n    labs,\n    arrow\n)\nfrom plotnine.data import economics\n\n\n\ngeom_line() connects the dots, and is useful for time series data.\n\neconomics.head()\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n\n\n\n\n\n\n\n\n(\n    ggplot(economics, aes(x='date', y='uempmed')) \n    + geom_line() # line plot\n    + labs(x='date', y='median duration of unemployment')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can put arrows at the end of a line:\n\n(\n    ggplot(economics, aes(x='date', y='pop')) \n    + geom_line(arrow=arrow()) # add an arrow to the end of the line\n    + labs(x='date', y='total population (,000)')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe arrow can be modified for a different look:\n\n(\n    ggplot(economics, aes(x='date', y='pop')) \n    + geom_line(arrow=arrow(angle=35,      # defines the shape of the arrow head\n                              ends=\"both\",   # input what end to put the arrow on\n                              type=\"closed\", # defines arrow head type\n                             )) \n    + labs(x='date', y='total population (,000)')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can change the look of the line:\n\n(\n    ggplot(economics, aes(x='date', y='uempmed')) \n    + geom_line(color='pink',        # set line colour\n                  size=7,            # set line thickness\n                  linetype='dashed'  # set line type\n               )\n    + labs(x='date', y='median duration of unemployment')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Line plots"
  },
  {
    "objectID": "reference/geom_map.html",
    "href": "reference/geom_map.html",
    "title": "geom_map",
    "section": "",
    "text": "geoms.geom_map(self, mapping=None, data=None, **kwargs)\nDraw map feature\nThe map feature are drawn without any special projections.\nUsage\ngeom_map(mapping=None, data=None, stat='identity', position='identity',\n         na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n         **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\ngeometry\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n#111111\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\n\n\n\nThis geom is best suited for plotting a shapefile read into geopandas dataframe. The dataframe should have a geometry column.\n\n\n\n\n\nimport pandas as pd\nimport geopandas as gp\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_map,\n    geom_text,\n    labs,\n    scale_fill_brewer,\n    scale_x_continuous,\n    scale_y_continuous,\n    scale_size_continuous,\n    coord_cartesian,\n    element_rect,\n    theme_void,\n    theme\n)\n\n\n\nLayering different features on a Map\nRead data and select features in Westeros only.\n\ncontinents = gp.read_file('data/lands-of-ice-and-fire/continents.shp')\nislands = gp.read_file('data/lands-of-ice-and-fire/islands.shp')\nlakes = gp.read_file('data/lands-of-ice-and-fire/lakes.shp')\nrivers = gp.read_file('data/lands-of-ice-and-fire/rivers.shp')\npolitical = gp.read_file('data/lands-of-ice-and-fire/political.shp')\nwall = gp.read_file('data/lands-of-ice-and-fire/wall.shp')\nroads = gp.read_file('data/lands-of-ice-and-fire/roads.shp')\nlocations = gp.read_file('data/lands-of-ice-and-fire/locations.shp')\n\nwesteros = continents.query('name==\"Westeros\"')\nislands = islands.query('continent==\"Westeros\" and name!=\"Summer Islands\"')\nlakes = lakes.query('continent==\"Westeros\"')\nrivers = rivers.query('continent==\"Westeros\"')\nroads = roads.query('continent==\"Westeros\"')\n\nwg = westeros.geometry[0]\nbool_idx = [wg.contains(g) for g in locations.geometry]\nwesteros_locations = locations[bool_idx]\ncities = westeros_locations[westeros_locations['type'] == 'City'].copy()\n\nCreate map by placing the features in layers in an order that limits obstraction.\nThe GeoDataFrame.geometry.centroid property has the center coordinates of polygons, we use these to place the labels of the political regions.\n\n# colors\nwater_color = '#a3ccff'\nwall_color = 'white'\nroad_color = 'brown'\n\n# Create label text by merging the territory name and\n# the claimant to the territory\ndef fmt_labels(names, claimants):\n    labels = []\n    for name, claimant in zip(names, claimants):\n        if name:\n            labels.append('{} ({})'.format(name, claimant))\n        else:\n            labels.append('({})'.format(claimant))\n    return labels\n\n\ndef calculate_center(df):\n    \"\"\"\n    Calculate the centre of a geometry\n    \n    This method first converts to a planar crs, gets the centroid\n    then converts back to the original crs. This gives a more\n    accurate\n    \"\"\"\n    original_crs = df.crs\n    planar_crs = 'EPSG:3857'\n    return df['geometry'].to_crs(planar_crs).centroid.to_crs(original_crs)\n\n\npolitical['center'] = calculate_center(political)\ncities['center'] = calculate_center(cities)\n\n# Gallery Plot\n\n(ggplot()\n + geom_map(westeros, fill=None)\n + geom_map(islands, fill=None)\n + geom_map(political, aes(fill='ClaimedBy'), color=None, show_legend=False)\n + geom_map(wall, color=wall_color, size=2)\n + geom_map(lakes, fill=water_color, color=None)\n + geom_map(rivers, aes(size='size'), color=water_color, show_legend=False)\n + geom_map(roads, aes(size='size'), color=road_color, alpha=0.5, show_legend=False)\n + geom_map(cities, size=1)\n + geom_text(\n     political,\n     aes('center.x', 'center.y', label='fmt_labels(name, ClaimedBy)'),\n     size=8,\n     fontweight='bold'\n )\n + geom_text(\n     cities,\n     aes('center.x', 'center.y', label='name'),\n     size=8,\n     ha='left',\n     nudge_x=.20\n )\n + labs(title=\"The Political Territories of Westeros\")\n + scale_fill_brewer(type='qual', palette=8)\n + scale_x_continuous(expand=(0, 0, 0, 1))\n + scale_y_continuous(expand=(0, 1, 0, 0))\n + scale_size_continuous(range=(0.4, 1))\n + coord_cartesian()\n + theme_void()\n + theme(figure_size=(8, 12), panel_background=element_rect(fill=water_color))\n)\n\n\n\n\n&lt;Figure Size: (800 x 1200)&gt;\n\n\nCredit: cadaei of the cartographersguild website forum.\n\nSource: The Political Territories of Westeros"
  },
  {
    "objectID": "reference/geom_map.html#parameters",
    "href": "reference/geom_map.html#parameters",
    "title": "geom_map",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\ngeometry\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n#111111\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone"
  },
  {
    "objectID": "reference/geom_map.html#notes",
    "href": "reference/geom_map.html#notes",
    "title": "geom_map",
    "section": "",
    "text": "This geom is best suited for plotting a shapefile read into geopandas dataframe. The dataframe should have a geometry column."
  },
  {
    "objectID": "reference/geom_map.html#examples",
    "href": "reference/geom_map.html#examples",
    "title": "geom_map",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gp\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_map,\n    geom_text,\n    labs,\n    scale_fill_brewer,\n    scale_x_continuous,\n    scale_y_continuous,\n    scale_size_continuous,\n    coord_cartesian,\n    element_rect,\n    theme_void,\n    theme\n)\n\n\n\nLayering different features on a Map\nRead data and select features in Westeros only.\n\ncontinents = gp.read_file('data/lands-of-ice-and-fire/continents.shp')\nislands = gp.read_file('data/lands-of-ice-and-fire/islands.shp')\nlakes = gp.read_file('data/lands-of-ice-and-fire/lakes.shp')\nrivers = gp.read_file('data/lands-of-ice-and-fire/rivers.shp')\npolitical = gp.read_file('data/lands-of-ice-and-fire/political.shp')\nwall = gp.read_file('data/lands-of-ice-and-fire/wall.shp')\nroads = gp.read_file('data/lands-of-ice-and-fire/roads.shp')\nlocations = gp.read_file('data/lands-of-ice-and-fire/locations.shp')\n\nwesteros = continents.query('name==\"Westeros\"')\nislands = islands.query('continent==\"Westeros\" and name!=\"Summer Islands\"')\nlakes = lakes.query('continent==\"Westeros\"')\nrivers = rivers.query('continent==\"Westeros\"')\nroads = roads.query('continent==\"Westeros\"')\n\nwg = westeros.geometry[0]\nbool_idx = [wg.contains(g) for g in locations.geometry]\nwesteros_locations = locations[bool_idx]\ncities = westeros_locations[westeros_locations['type'] == 'City'].copy()\n\nCreate map by placing the features in layers in an order that limits obstraction.\nThe GeoDataFrame.geometry.centroid property has the center coordinates of polygons, we use these to place the labels of the political regions.\n\n# colors\nwater_color = '#a3ccff'\nwall_color = 'white'\nroad_color = 'brown'\n\n# Create label text by merging the territory name and\n# the claimant to the territory\ndef fmt_labels(names, claimants):\n    labels = []\n    for name, claimant in zip(names, claimants):\n        if name:\n            labels.append('{} ({})'.format(name, claimant))\n        else:\n            labels.append('({})'.format(claimant))\n    return labels\n\n\ndef calculate_center(df):\n    \"\"\"\n    Calculate the centre of a geometry\n    \n    This method first converts to a planar crs, gets the centroid\n    then converts back to the original crs. This gives a more\n    accurate\n    \"\"\"\n    original_crs = df.crs\n    planar_crs = 'EPSG:3857'\n    return df['geometry'].to_crs(planar_crs).centroid.to_crs(original_crs)\n\n\npolitical['center'] = calculate_center(political)\ncities['center'] = calculate_center(cities)\n\n# Gallery Plot\n\n(ggplot()\n + geom_map(westeros, fill=None)\n + geom_map(islands, fill=None)\n + geom_map(political, aes(fill='ClaimedBy'), color=None, show_legend=False)\n + geom_map(wall, color=wall_color, size=2)\n + geom_map(lakes, fill=water_color, color=None)\n + geom_map(rivers, aes(size='size'), color=water_color, show_legend=False)\n + geom_map(roads, aes(size='size'), color=road_color, alpha=0.5, show_legend=False)\n + geom_map(cities, size=1)\n + geom_text(\n     political,\n     aes('center.x', 'center.y', label='fmt_labels(name, ClaimedBy)'),\n     size=8,\n     fontweight='bold'\n )\n + geom_text(\n     cities,\n     aes('center.x', 'center.y', label='name'),\n     size=8,\n     ha='left',\n     nudge_x=.20\n )\n + labs(title=\"The Political Territories of Westeros\")\n + scale_fill_brewer(type='qual', palette=8)\n + scale_x_continuous(expand=(0, 0, 0, 1))\n + scale_y_continuous(expand=(0, 1, 0, 0))\n + scale_size_continuous(range=(0.4, 1))\n + coord_cartesian()\n + theme_void()\n + theme(figure_size=(8, 12), panel_background=element_rect(fill=water_color))\n)\n\n\n\n\n&lt;Figure Size: (800 x 1200)&gt;\n\n\nCredit: cadaei of the cartographersguild website forum.\n\nSource: The Political Territories of Westeros"
  },
  {
    "objectID": "reference/geom_path:arrow.html",
    "href": "reference/geom_path:arrow.html",
    "title": "geom_path:arrow",
    "section": "",
    "text": "geoms.geom_path.arrow(self, angle=30, length=0.2, ends='last', type='open')\nDefine arrow (actually an arrowhead)\nThis is used to define arrow heads for .geom_path.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nangle\n\n\nint | float\n\n\nangle in degrees between the tail a single edge.\n\n\n30\n\n\n\n\nlength\n\n\nint | float\n\n\nof the edge in “inches”\n\n\n0.2\n\n\n\n\nends\n\n\nstr in ['last', 'first', 'both']\n\n\nAt which end of the line to draw the arrowhead\n\n\n'last'\n\n\n\n\ntype\n\n\nstr in ['open', 'closed']\n\n\nWhen it is closed, it is also filled\n\n\n'open'"
  },
  {
    "objectID": "reference/geom_path:arrow.html#parameters",
    "href": "reference/geom_path:arrow.html#parameters",
    "title": "geom_path:arrow",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nangle\n\n\nint | float\n\n\nangle in degrees between the tail a single edge.\n\n\n30\n\n\n\n\nlength\n\n\nint | float\n\n\nof the edge in “inches”\n\n\n0.2\n\n\n\n\nends\n\n\nstr in ['last', 'first', 'both']\n\n\nAt which end of the line to draw the arrowhead\n\n\n'last'\n\n\n\n\ntype\n\n\nstr in ['open', 'closed']\n\n\nWhen it is closed, it is also filled\n\n\n'open'"
  },
  {
    "objectID": "reference/geom_pointdensity.html",
    "href": "reference/geom_pointdensity.html",
    "title": "geom_pointdensity",
    "section": "",
    "text": "geoms.geom_pointdensity()\nScatterplot with density estimation at each point\nUsage\ngeom_pointdensity(mapping=None, data=None, stat='pointdensity',\n                  position='identity', na_rm=False, inherit_aes=True,\n                  show_legend=None, raster=False, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_pointdensity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_pointdensity.html#parameters",
    "href": "reference/geom_pointdensity.html#parameters",
    "title": "geom_pointdensity",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n\n\n\n\ngroup\n\n\n\n\n\n\nshape\n\n\no\n\n\n\n\nsize\n\n\n1.5\n\n\n\n\nstroke\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_pointdensity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_polygon.html",
    "href": "reference/geom_polygon.html",
    "title": "geom_polygon",
    "section": "",
    "text": "geoms.geom_polygon()\nPolygon, a filled path\nUsage\ngeom_polygon(mapping=None, data=None, stat='identity', position='identity',\n             na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n             **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\nAll paths in the same group aesthetic value make up a polygon."
  },
  {
    "objectID": "reference/geom_polygon.html#parameters",
    "href": "reference/geom_polygon.html#parameters",
    "title": "geom_polygon",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_polygon.html#notes",
    "href": "reference/geom_polygon.html#notes",
    "title": "geom_polygon",
    "section": "",
    "text": "All paths in the same group aesthetic value make up a polygon."
  },
  {
    "objectID": "reference/geom_qq_line.html",
    "href": "reference/geom_qq_line.html",
    "title": "geom_qq_line",
    "section": "",
    "text": "geoms.geom_qq_line()\nQuantile-Quantile Line plot\nUsage\ngeom_qq_line(mapping=None, data=None, stat='qq_line', position='identity',\n             na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n             **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_qq_line) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_qq_line.html#parameters",
    "href": "reference/geom_qq_line.html#parameters",
    "title": "geom_qq_line",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_qq_line) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_raster.html",
    "href": "reference/geom_raster.html",
    "title": "geom_raster",
    "section": "",
    "text": "geoms.geom_raster(self, mapping=None, data=None, **kwargs)\nRasterized Rectangles specified using center points\nUsage\ngeom_raster(mapping=None, data=None, stat='identity', position='identity',\n            na_rm=False, inherit_aes=True, show_legend=None, raster=True,\n            filterrad=4.0, interpolation=None, vjust=0.5, hjust=0.5, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_rect\nplotnine.geoms.geom_tile"
  },
  {
    "objectID": "reference/geom_raster.html#parameters",
    "href": "reference/geom_raster.html#parameters",
    "title": "geom_raster",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone"
  },
  {
    "objectID": "reference/geom_raster.html#see-also",
    "href": "reference/geom_raster.html#see-also",
    "title": "geom_raster",
    "section": "",
    "text": "plotnine.geoms.geom_rect\nplotnine.geoms.geom_tile"
  },
  {
    "objectID": "reference/geom_ribbon.html",
    "href": "reference/geom_ribbon.html",
    "title": "geom_ribbon",
    "section": "",
    "text": "geoms.geom_ribbon()\nRibbon plot\nUsage\ngeom_ribbon(mapping=None, data=None, stat='identity', position='identity',\n            na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n            outline_type='both', **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nnone\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nwhere\n\n\nTrue\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n.. rubric:: Aesthetics Descriptions\n\nwhere\n    Define where to exclude horizontal regions from being filled.\n    Regions between any two ``False`` values are skipped.\n    For sensible demarcation the value used in the *where* predicate\n    expression should match the ``ymin`` value or expression. i.e.\n\n    ::\n\n        aes(ymin=0, ymax='col1', where='col1 &gt; 0')  # good\n        aes(ymin=0, ymax='col1', where='col1 &gt; 10')  # bad\n\n        aes(ymin=col2, ymax='col1', where='col1 &gt; col2')  # good\n        aes(ymin=col2, ymax='col1', where='col1 &gt; col3')  # bad\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\noutline_type : ‘upper’ | ‘lower’ | ‘both’ | ‘full’ How to stroke to outline of the region / area. * ‘upper’ - draw only upper bounding line’ * ‘lower’ - draw only lower bounding line’ * ‘both’ - draw both upper & lower bounding lines * ‘full’ - draw closed polygon around the area."
  },
  {
    "objectID": "reference/geom_ribbon.html#parameters",
    "href": "reference/geom_ribbon.html#parameters",
    "title": "geom_ribbon",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nnone\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nwhere\n\n\nTrue\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n.. rubric:: Aesthetics Descriptions\n\nwhere\n    Define where to exclude horizontal regions from being filled.\n    Regions between any two ``False`` values are skipped.\n    For sensible demarcation the value used in the *where* predicate\n    expression should match the ``ymin`` value or expression. i.e.\n\n    ::\n\n        aes(ymin=0, ymax='col1', where='col1 &gt; 0')  # good\n        aes(ymin=0, ymax='col1', where='col1 &gt; 10')  # bad\n\n        aes(ymin=col2, ymax='col1', where='col1 &gt; col2')  # good\n        aes(ymin=col2, ymax='col1', where='col1 &gt; col3')  # bad\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\noutline_type : ‘upper’ | ‘lower’ | ‘both’ | ‘full’ How to stroke to outline of the region / area. * ‘upper’ - draw only upper bounding line’ * ‘lower’ - draw only lower bounding line’ * ‘both’ - draw both upper & lower bounding lines * ‘full’ - draw closed polygon around the area."
  },
  {
    "objectID": "reference/geom_segment.html",
    "href": "reference/geom_segment.html",
    "title": "geom_segment",
    "section": "",
    "text": "geoms.geom_segment()\nLine segments\nUsage\ngeom_segment(mapping=None, data=None, stat='identity', position='identity',\n             na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n             lineend='butt', arrow=None, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nxend\n\n\n\n\n\n\ny\n\n\n\n\n\n\nyend\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_path.arrow: for adding arrowhead(s)to segments.\n\n\n\n\n\n\n# NOTE: This notebook uses the polars package\nimport pandas as pd\nimport pandas.api.types as pdtypes\nimport numpy as np\n\nfrom plotnine import *\nimport polars as pl\nfrom polars import col\n\n\n\nComparing the point to point difference of many similar variables\nRead the data.\nSource: Pew Research Global Attitudes Spring 2015\n\n!head -n 20 'data/survey-social-media.csv'\n\nPSRAID,COUNTRY,Q145,Q146,Q70,Q74\n100000,Ethiopia,Female,35,No, \n100001,Ethiopia,Female,25,No, \n100002,Ethiopia,Male,40,Don’t know, \n100003,Ethiopia,Female,30,Don’t know, \n100004,Ethiopia,Male,22,No, \n100005,Ethiopia,Male,40,No, \n100006,Ethiopia,Female,20,No, \n100007,Ethiopia,Female,18,No,No\n100008,Ethiopia,Male,50,No, \n100009,Ethiopia,Male,35,No, \n100010,Ethiopia,Female,20,No, \n100011,Ethiopia,Female,30,Don’t know, \n100012,Ethiopia,Male,60,No, \n100013,Ethiopia,Male,18,No, \n100014,Ethiopia,Male,40,No, \n100015,Ethiopia,Male,28,Don’t know, \n100016,Ethiopia,Female,55,Don’t know, \n100017,Ethiopia,Male,30,Don’t know, \n100018,Ethiopia,Female,22,No, \n\n\n\ncolumns = dict(\n    COUNTRY='country',\n    Q145='gender',\n    Q146='age',\n    Q70='use_internet',\n    Q74='use_social_media'\n)\n\ndata = pl.scan_csv(\n    'data/survey-social-media.csv',\n    dtypes=dict(Q146=pl.Utf8),\n).rename(\n    columns\n).select([\n    'country',\n    'age',\n    'use_social_media'\n]).collect()\n\ndata.sample(10, seed=123)\n\n\n\nshape: (10, 3)\n\n\n\n\ncountry\n\n\nage\n\n\nuse_social_media\n\n\n\n\nstr\n\n\nstr\n\n\nstr\n\n\n\n\n\n\n\"Venezuela\"\n\n\n\"47\"\n\n\n\"Yes\"\n\n\n\n\n\"Israel\"\n\n\n\"63\"\n\n\n\" \"\n\n\n\n\n\"Germany\"\n\n\n\"60\"\n\n\n\"Yes\"\n\n\n\n\n\"France\"\n\n\n\"60\"\n\n\n\"No\"\n\n\n\n\n\"Philippines\"\n\n\n\"25\"\n\n\n\" \"\n\n\n\n\n\"China\"\n\n\n\"40\"\n\n\n\" \"\n\n\n\n\n\"Senegal\"\n\n\n\"20\"\n\n\n\" \"\n\n\n\n\n\"Argentina\"\n\n\n\"47\"\n\n\n\"Yes\"\n\n\n\n\n\"India\"\n\n\n\"53\"\n\n\n\"No\"\n\n\n\n\n\"Jordan\"\n\n\n\"24\"\n\n\n\" \"\n\n\n\n\n\n\n\nCreate age groups for users of social media\n\nyes_no = ['Yes', 'No']\nvalid_age_groups = ['18-34', '35-49', '50+']\n\nrdata = data.with_columns([\n    pl\n    .when(col('age') &lt;= '34').then('18-34')\n    .when(col('age') &lt;= '49').then('35-49')\n    .when(col('age') &lt; '98').then('50+')\n    .otherwise(\"\")\n    .alias('age_group'),\n    pl.count().over(\"country\").alias('country_count')\n]).filter(\n    col('age_group').is_in(valid_age_groups) &\n    col('use_social_media').is_in(yes_no)\n).groupby(['country', 'age_group']).agg([\n    # social media use percentage\n    ((col('use_social_media') == 'Yes').sum() * 100 / pl.count()).alias('sm_use_percent'),\n    \n    # social media question response rate\n    (col('use_social_media').is_in(yes_no).sum() * 100 / col('country_count').first()).alias('smq_response_rate')\n]).sort(['country', 'age_group'])\n\nrdata.head()\n\n\n\nshape: (5, 4)\n\n\n\n\ncountry\n\n\nage_group\n\n\nsm_use_percent\n\n\nsmq_response_rate\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\n\n\n\n\n\"Argentina\"\n\n\n\"18-34\"\n\n\n90.883191\n\n\n35.1\n\n\n\n\n\"Argentina\"\n\n\n\"35-49\"\n\n\n84.40367\n\n\n21.8\n\n\n\n\n\"Argentina\"\n\n\n\"50+\"\n\n\n67.333333\n\n\n15.0\n\n\n\n\n\"Australia\"\n\n\n\"18-34\"\n\n\n90.862944\n\n\n19.621514\n\n\n\n\n\"Australia\"\n\n\n\"35-49\"\n\n\n78.04878\n\n\n20.418327\n\n\n\n\n\n\n\nTop 14 countries by response rate to the social media question.\n\ndef col_format(name, fmt):\n    # Format useing python formating\n    # for more control over\n    return col(name).apply(lambda x: fmt.format(x=x))\n\ndef float_to_str_round(name):\n    return col_format(name, '{x:.0f}')\n\nn = 14\n\ntop = rdata.groupby('country').agg([\n    col('smq_response_rate').sum().alias('r')\n]).sort('r', reverse=True).head(n)\ntop_countries = top['country']\n\nexpr = float_to_str_round('sm_use_percent')\nexpr_pct = expr + '%'\n\npoint_data = rdata.filter(\n    col('country').is_in(top_countries)\n).with_column(\n    pl.when(col('country') == 'France').then(expr_pct).otherwise(expr).alias('sm_use_percent_str')\n)\n\npoint_data.head()\n\n\n\nshape: (5, 5)\n\n\n\n\ncountry\n\n\nage_group\n\n\nsm_use_percent\n\n\nsmq_response_rate\n\n\nsm_use_percent_str\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nstr\n\n\n\n\n\n\n\"Australia\"\n\n\n\"18-34\"\n\n\n90.862944\n\n\n19.621514\n\n\n\"91\"\n\n\n\n\n\"Australia\"\n\n\n\"35-49\"\n\n\n78.04878\n\n\n20.418327\n\n\n\"78\"\n\n\n\n\n\"Australia\"\n\n\n\"50+\"\n\n\n48.479087\n\n\n52.390438\n\n\n\"48\"\n\n\n\n\n\"Canada\"\n\n\n\"18-34\"\n\n\n92.063492\n\n\n25.099602\n\n\n\"92\"\n\n\n\n\n\"Canada\"\n\n\n\"35-49\"\n\n\n75.925926\n\n\n21.513944\n\n\n\"76\"\n\n\n\n\n\n\n\n\nsegment_data = point_data.groupby('country').agg([\n    col('sm_use_percent').min().alias('min'),\n    col('sm_use_percent').max().alias('max'),\n]).with_column(\n    (col('max') - col('min')).alias('gap')\n).sort(\n    'gap',\n).with_columns([\n    float_to_str_round('min').alias('min_str'),\n    float_to_str_round('max').alias('max_str'),\n    float_to_str_round('gap').alias('gap_str')\n])\n\nsegment_data.head()\n\n\n\nshape: (5, 7)\n\n\n\n\ncountry\n\n\nmin\n\n\nmax\n\n\ngap\n\n\nmin_str\n\n\nmax_str\n\n\ngap_str\n\n\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\nstr\n\n\n\n\n\n\n\"Russia\"\n\n\n76.07362\n\n\n95.151515\n\n\n19.077896\n\n\n\"76\"\n\n\n\"95\"\n\n\n\"19\"\n\n\n\n\n\"Israel\"\n\n\n55.405405\n\n\n88.311688\n\n\n32.906283\n\n\n\"55\"\n\n\n\"88\"\n\n\n\"33\"\n\n\n\n\n\"United Kingdom...\n\n\n52.74463\n\n\n86.096257\n\n\n33.351627\n\n\n\"53\"\n\n\n\"86\"\n\n\n\"33\"\n\n\n\n\n\"United States\"\n\n\n52.597403\n\n\n88.669951\n\n\n36.072548\n\n\n\"53\"\n\n\n\"89\"\n\n\n\"36\"\n\n\n\n\n\"Canada\"\n\n\n53.986333\n\n\n92.063492\n\n\n38.077159\n\n\n\"54\"\n\n\n\"92\"\n\n\n\"38\"\n\n\n\n\n\n\n\nFormat the floating point data that will be plotted into strings\nSet the order of the countries along the y-axis by setting the country variable to an ordered categorical.\n\ncountry_expr = col('country').cast(pl.Categorical)\nsegment_data = segment_data.with_column(country_expr)\npoint_data = point_data.with_columns(country_expr)\n\nFirst plot\n\n# The right column (youngest-oldest gap) location\nxgap = 112\n\n(ggplot()\n # Range strip\n + geom_segment(\n     segment_data,\n     aes(x='min', xend='max', y='country', yend='country'),\n     size=6,\n     color='#a7a9ac'\n )\n # Age group markers\n + geom_point(\n     point_data,\n     aes('sm_use_percent', 'country', color='age_group', fill='age_group'),\n     size=5,\n     stroke=0.7,\n )\n # Age group percentages\n + geom_text(\n     point_data.filter(col('age_group')==\"50+\"),\n     aes(x='sm_use_percent-2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='right'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"35-49\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str'),\n     size=8,\n     ha='left',\n     va='center',\n     color='white'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"18-34\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='left',\n )\n # gap difference\n + geom_text(\n     segment_data,\n     aes(x=xgap, y='country', label='gap_str'),\n     size=9,\n     fontweight='bold',\n     format_string='+{}'\n )\n)\n\n\n\n\nTweak it\n\n# The right column (youngest-oldest gap) location\nxgap = 115\n\n# Gallery Plot\n\n(ggplot()\n # Background Strips                                     # new\n + geom_segment(\n     segment_data,\n     aes(y='country', yend='country'),\n     x=0, xend=100,\n     size=8.5,\n     color='#edece3'\n )\n # vertical grid lines along the strips                  # new\n + annotate(\n     'segment',\n     x=list(range(10, 100, 10)) * n,\n     xend=list(range(10, 100, 10)) * n,\n     y=np.tile(np.arange(1, n+1), 9)-.25,\n     yend=np.tile(np.arange(1, n+1), 9) + .25,\n     color='#CCCCCC'\n )\n # Range strip\n + geom_segment(\n     segment_data,\n     aes(x='min', xend='max', y='country', yend='country'),\n     size=6,\n     color='#a7a9ac'\n )\n # Age group markers\n + geom_point(\n     point_data,\n     aes('sm_use_percent', 'country', color='age_group', fill='age_group'),\n     size=5,\n     stroke=0.7,\n )\n # Age group percentages\n + geom_text(\n     point_data.filter(col('age_group')==\"50+\"),\n     aes(x='sm_use_percent-2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='right',\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"35-49\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str'),\n     size=8,\n     ha='left',\n     va='center',\n     color='white'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"18-34\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='left',\n )\n # countries right-hand-size (instead of y-axis)         # new\n + geom_text(\n     segment_data,\n     aes(y='country', label='country'),\n     x=-1,\n     size=8,\n     ha='right',\n     fontweight='bold',\n     color='#222222'\n )\n # gap difference\n + geom_vline(xintercept=xgap, color='#edece3', size=32)  # new\n + geom_text(\n     segment_data,\n     aes(x=xgap, y='country', label='gap_str'),\n     size=9,\n     fontweight='bold',\n     format_string='+{}'\n )\n # Annotations                                            # new\n + annotate('text', x=31, y=n+1.1, label='50+', size=9, color='#ea9f2f', va='top')\n + annotate('text', x=56, y=n+1.1, label='35-49', size=9, color='#6d6e71', va='top')\n + annotate('text', x=85, y=n+1.1, label='18-34', size=9, color='#939c49', va='top')\n + annotate('text', x=xgap, y=n+.5, label='Youngest-\\nOldest Gap', size=9, color='#444444', va='bottom', ha='center')\n + annotate('point', x=[31, 56, 85], y=n+.3, alpha=0.85, stroke=0)\n + annotate('segment', x=[31, 56, 85], xend=[31, 56, 85], y=n+.3, yend=n+.8, alpha=0.85)\n + annotate('hline', yintercept=[x+0.5 for x in range(2, n, 2)], alpha=.5, linetype='dotted', size=0.7)\n \n # Better spacing and color                              # new\n + scale_x_continuous(limits=(-18, xgap+2))\n + scale_y_discrete(expand=(0, 0.25, 0.1, 0))\n + scale_fill_manual(values=['#c3ca8c', '#d1d3d4', '#f2c480'])\n + scale_color_manual(values=['#939c49', '#6d6e71', '#ea9f2f'])\n + guides(color=None, fill=None)\n + theme_void()\n + theme(figure_size=(8, 8.5))\n)\n\n\n\n\nInstead of looking at this plot as having a country variable on the y-axis and a percentage variable on the x-axis, we can view it as having vertically stacked up many indepedent variables, the values of which have a similar scale.\nProtip: Save a pdf file.\n\n\n\nComparing a group of ranked items at two different times\nRead the data.\nSource: World Bank - Infanct Mortality Rate (per 1,000 live births)b\n\ndata = pl.read_csv(\n    'data/API_SP.DYN.IMRT.IN_DS2_en_csv_v2/API_SP.DYN.IMRT.IN_DS2_en_csv_v2.csv',\n    skip_rows=4,\n    null_values=\"\",\n)\n\n# Columns as valid python variables\nyear_columns = {c: f'y{c}' for c in data.columns if c[:2] in {'19', '20'}}\ndata = data.rename({\n    'Country Name': 'country',\n    'Country Code': 'code',\n    **year_columns\n}).drop(['Indicator Name', 'Indicator Code'])\ndata.head()\n\n\n\nshape: (5, 59)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\n\n\n\n\n\"Aruba\"\n\n\n\"ABW\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n\n\n\"Afghanistan\"\n\n\n\"AFG\"\n\n\nnull\n\n\n240.5\n\n\n236.3\n\n\n232.3\n\n\n228.5\n\n\n224.6\n\n\n220.7\n\n\n217.0\n\n\n213.3\n\n\n209.8\n\n\n206.1\n\n\n202.2\n\n\n198.2\n\n\n194.3\n\n\n190.3\n\n\n186.6\n\n\n182.6\n\n\n178.7\n\n\n174.5\n\n\n170.4\n\n\n166.1\n\n\n161.8\n\n\n157.5\n\n\n153.2\n\n\n148.7\n\n\n144.5\n\n\n140.2\n\n\n135.7\n\n\n131.3\n\n\n126.8\n\n\n122.5\n\n\n118.3\n\n\n114.4\n\n\n110.9\n\n\n107.7\n\n\n105.0\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.2\n\n\n95.4\n\n\n93.4\n\n\n91.2\n\n\n89.0\n\n\n86.7\n\n\n84.4\n\n\n82.3\n\n\n80.4\n\n\n78.6\n\n\n76.8\n\n\n75.1\n\n\n73.4\n\n\n71.7\n\n\n69.9\n\n\n68.1\n\n\n66.3\n\n\nnull\n\n\n\n\n\"Angola\"\n\n\n\"AGO\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n138.3\n\n\n137.5\n\n\n136.8\n\n\n136.0\n\n\n135.3\n\n\n134.9\n\n\n134.4\n\n\n134.1\n\n\n133.8\n\n\n133.6\n\n\n133.5\n\n\n133.5\n\n\n133.5\n\n\n133.4\n\n\n133.2\n\n\n132.8\n\n\n132.3\n\n\n131.5\n\n\n130.6\n\n\n129.5\n\n\n128.3\n\n\n126.9\n\n\n125.5\n\n\n124.1\n\n\n122.8\n\n\n121.2\n\n\n119.4\n\n\n117.1\n\n\n114.7\n\n\n112.2\n\n\n109.6\n\n\n106.8\n\n\n104.1\n\n\n101.4\n\n\n98.8\n\n\n96.0\n\n\nnull\n\n\n\n\n\"Albania\"\n\n\n\"ALB\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n73.0\n\n\n68.4\n\n\n64.0\n\n\n59.9\n\n\n56.1\n\n\n52.4\n\n\n49.1\n\n\n45.9\n\n\n43.2\n\n\n40.8\n\n\n38.6\n\n\n36.7\n\n\n35.1\n\n\n33.7\n\n\n32.5\n\n\n31.4\n\n\n30.3\n\n\n29.1\n\n\n27.9\n\n\n26.8\n\n\n25.5\n\n\n24.4\n\n\n23.2\n\n\n22.1\n\n\n21.0\n\n\n20.0\n\n\n19.1\n\n\n18.3\n\n\n17.4\n\n\n16.7\n\n\n16.0\n\n\n15.4\n\n\n14.8\n\n\n14.3\n\n\n13.8\n\n\n13.3\n\n\n12.9\n\n\n12.5\n\n\nnull\n\n\n\n\n\"Andorra\"\n\n\n\"AND\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n7.5\n\n\n7.0\n\n\n6.5\n\n\n6.1\n\n\n5.6\n\n\n5.2\n\n\n5.0\n\n\n4.6\n\n\n4.3\n\n\n4.1\n\n\n3.9\n\n\n3.7\n\n\n3.5\n\n\n3.3\n\n\n3.2\n\n\n3.1\n\n\n2.9\n\n\n2.8\n\n\n2.7\n\n\n2.6\n\n\n2.5\n\n\n2.4\n\n\n2.3\n\n\n2.2\n\n\n2.1\n\n\n2.1\n\n\nnull\n\n\n\n\n\n\n\nThe data includes regional aggregates. To tell apart the regional aggregates we need the metadata. Every row in the data table has a corresponding row in the metadata table. Where the row has regional aggregate data, the Region column in the metadata table is NaN.\n\ndef ordered_categorical(s, categories=None):\n    \"\"\"\n    Create a categorical ordered according to the categories\n    \"\"\"\n    name = getattr(s, 'name', '')\n    if categories is None:\n        return pl.Series(name, s).cast(pl.Categorical)\n\n    with pl.StringCache():\n        pl.Series(categories).cast(pl.Categorical)\n        return pl.Series(name, s).cast(pl.Categorical)\n\ncolumns = {\n    'Country Code': 'code',\n    'Region': 'region',\n    'IncomeGroup': 'income_group'\n}\n\nmetadata = pl.scan_csv(\n    'data/API_SP.DYN.IMRT.IN_DS2_en_csv_v2/Metadata_Country_API_SP.DYN.IMRT.IN_DS2_en_csv_v2.csv'\n).rename(\n    columns\n).select(\n    list(columns.values())\n).filter(\n    # Drop the regional aggregate information\n    (col('region') != '') & (col('income_group') != '')\n).collect()\n\ncat_order = ['High income', 'Upper middle income', 'Lower middle income', 'Low income']\nmetadata = metadata.with_columns([\n    ordered_categorical(metadata['income_group'], cat_order)\n])\n\nmetadata.head(10)\n\n\n\nshape: (10, 3)\n\n\n\n\ncode\n\n\nregion\n\n\nincome_group\n\n\n\n\nstr\n\n\nstr\n\n\ncat\n\n\n\n\n\n\n\"ABW\"\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\"AFG\"\n\n\n\"South Asia\"\n\n\n\"Low income\"\n\n\n\n\n\"AGO\"\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n\n\n\"ALB\"\n\n\n\"Europe & Centr...\n\n\n\"Upper middle i...\n\n\n\n\n\"AND\"\n\n\n\"Europe & Centr...\n\n\n\"High income\"\n\n\n\n\n\"ARE\"\n\n\n\"Middle East & ...\n\n\n\"High income\"\n\n\n\n\n\"ARG\"\n\n\n\"Latin America ...\n\n\n\"Upper middle i...\n\n\n\n\n\"ARM\"\n\n\n\"Europe & Centr...\n\n\n\"Lower middle i...\n\n\n\n\n\"ASM\"\n\n\n\"East Asia & Pa...\n\n\n\"Upper middle i...\n\n\n\n\n\"ATG\"\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\n\n\nRemove the regional aggregates, to create a table with only country data\n\ncountry_data = data.join(metadata, on='code')\ncountry_data.head()\n\n\n\nshape: (5, 61)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\nregion\n\n\nincome_group\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\ncat\n\n\n\n\n\n\n\"Aruba\"\n\n\n\"ABW\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\"Afghanistan\"\n\n\n\"AFG\"\n\n\nnull\n\n\n240.5\n\n\n236.3\n\n\n232.3\n\n\n228.5\n\n\n224.6\n\n\n220.7\n\n\n217.0\n\n\n213.3\n\n\n209.8\n\n\n206.1\n\n\n202.2\n\n\n198.2\n\n\n194.3\n\n\n190.3\n\n\n186.6\n\n\n182.6\n\n\n178.7\n\n\n174.5\n\n\n170.4\n\n\n166.1\n\n\n161.8\n\n\n157.5\n\n\n153.2\n\n\n148.7\n\n\n144.5\n\n\n140.2\n\n\n135.7\n\n\n131.3\n\n\n126.8\n\n\n122.5\n\n\n118.3\n\n\n114.4\n\n\n110.9\n\n\n107.7\n\n\n105.0\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.2\n\n\n95.4\n\n\n93.4\n\n\n91.2\n\n\n89.0\n\n\n86.7\n\n\n84.4\n\n\n82.3\n\n\n80.4\n\n\n78.6\n\n\n76.8\n\n\n75.1\n\n\n73.4\n\n\n71.7\n\n\n69.9\n\n\n68.1\n\n\n66.3\n\n\nnull\n\n\n\"South Asia\"\n\n\n\"Low income\"\n\n\n\n\n\"Angola\"\n\n\n\"AGO\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n138.3\n\n\n137.5\n\n\n136.8\n\n\n136.0\n\n\n135.3\n\n\n134.9\n\n\n134.4\n\n\n134.1\n\n\n133.8\n\n\n133.6\n\n\n133.5\n\n\n133.5\n\n\n133.5\n\n\n133.4\n\n\n133.2\n\n\n132.8\n\n\n132.3\n\n\n131.5\n\n\n130.6\n\n\n129.5\n\n\n128.3\n\n\n126.9\n\n\n125.5\n\n\n124.1\n\n\n122.8\n\n\n121.2\n\n\n119.4\n\n\n117.1\n\n\n114.7\n\n\n112.2\n\n\n109.6\n\n\n106.8\n\n\n104.1\n\n\n101.4\n\n\n98.8\n\n\n96.0\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n\n\n\"Albania\"\n\n\n\"ALB\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n73.0\n\n\n68.4\n\n\n64.0\n\n\n59.9\n\n\n56.1\n\n\n52.4\n\n\n49.1\n\n\n45.9\n\n\n43.2\n\n\n40.8\n\n\n38.6\n\n\n36.7\n\n\n35.1\n\n\n33.7\n\n\n32.5\n\n\n31.4\n\n\n30.3\n\n\n29.1\n\n\n27.9\n\n\n26.8\n\n\n25.5\n\n\n24.4\n\n\n23.2\n\n\n22.1\n\n\n21.0\n\n\n20.0\n\n\n19.1\n\n\n18.3\n\n\n17.4\n\n\n16.7\n\n\n16.0\n\n\n15.4\n\n\n14.8\n\n\n14.3\n\n\n13.8\n\n\n13.3\n\n\n12.9\n\n\n12.5\n\n\nnull\n\n\n\"Europe & Centr...\n\n\n\"Upper middle i...\n\n\n\n\n\"Andorra\"\n\n\n\"AND\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n7.5\n\n\n7.0\n\n\n6.5\n\n\n6.1\n\n\n5.6\n\n\n5.2\n\n\n5.0\n\n\n4.6\n\n\n4.3\n\n\n4.1\n\n\n3.9\n\n\n3.7\n\n\n3.5\n\n\n3.3\n\n\n3.2\n\n\n3.1\n\n\n2.9\n\n\n2.8\n\n\n2.7\n\n\n2.6\n\n\n2.5\n\n\n2.4\n\n\n2.3\n\n\n2.2\n\n\n2.1\n\n\n2.1\n\n\nnull\n\n\n\"Europe & Centr...\n\n\n\"High income\"\n\n\n\n\n\n\n\nWe are interested in the changes in rank between 1960 and 2015. To plot a reasonable sized graph, we randomly sample 35 countries.\n\nsampled_data = country_data.drop_nulls(\n    subset=['y1960', 'y2015']\n).sample(\n    n=35,\n    seed=123\n).with_columns([\n    col('y1960').rank(method='ordinal').cast(pl.Int64).suffix('_rank'),\n    col('y2015').rank(method='ordinal').cast(pl.Int64).suffix('_rank')\n]).sort('y2015_rank', reverse=True)\n\nsampled_data.head()\n\n\n\nshape: (5, 63)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\nregion\n\n\nincome_group\n\n\ny1960_rank\n\n\ny2015_rank\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\ncat\n\n\ni64\n\n\ni64\n\n\n\n\n\n\n\"Togo\"\n\n\n\"TGO\"\n\n\n162.4\n\n\n159.4\n\n\n156.4\n\n\n153.5\n\n\n150.5\n\n\n147.7\n\n\n144.7\n\n\n141.8\n\n\n138.8\n\n\n135.8\n\n\n132.8\n\n\n130.0\n\n\n127.2\n\n\n124.4\n\n\n121.8\n\n\n119.2\n\n\n116.6\n\n\n114.1\n\n\n111.7\n\n\n109.2\n\n\n106.9\n\n\n104.8\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.1\n\n\n95.5\n\n\n94.0\n\n\n92.6\n\n\n91.4\n\n\n90.2\n\n\n89.0\n\n\n87.9\n\n\n86.8\n\n\n85.5\n\n\n84.2\n\n\n82.8\n\n\n81.2\n\n\n79.6\n\n\n77.9\n\n\n76.2\n\n\n74.4\n\n\n72.6\n\n\n70.8\n\n\n69.1\n\n\n67.4\n\n\n65.7\n\n\n64.1\n\n\n62.5\n\n\n60.9\n\n\n59.3\n\n\n57.9\n\n\n56.5\n\n\n55.0\n\n\n53.6\n\n\n52.3\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n33\n\n\n35\n\n\n\n\n\"Haiti\"\n\n\n\"HTI\"\n\n\n194.8\n\n\n191.5\n\n\n188.3\n\n\n185.2\n\n\n182.2\n\n\n179.1\n\n\n176.0\n\n\n172.9\n\n\n169.8\n\n\n166.6\n\n\n163.4\n\n\n160.1\n\n\n156.6\n\n\n153.0\n\n\n149.5\n\n\n146.0\n\n\n142.6\n\n\n139.2\n\n\n135.8\n\n\n132.5\n\n\n129.4\n\n\n126.2\n\n\n123.0\n\n\n120.0\n\n\n117.1\n\n\n114.3\n\n\n111.5\n\n\n108.8\n\n\n106.1\n\n\n103.5\n\n\n101.0\n\n\n98.4\n\n\n95.8\n\n\n93.1\n\n\n90.4\n\n\n87.8\n\n\n85.1\n\n\n82.4\n\n\n79.9\n\n\n77.4\n\n\n75.0\n\n\n72.8\n\n\n70.7\n\n\n68.9\n\n\n67.2\n\n\n65.6\n\n\n64.1\n\n\n62.7\n\n\n61.3\n\n\n60.0\n\n\n85.5\n\n\n57.5\n\n\n56.2\n\n\n54.8\n\n\n53.5\n\n\n52.2\n\n\nnull\n\n\n\"Latin America ...\n\n\n\"Low income\"\n\n\n35\n\n\n34\n\n\n\n\n\"Gambia, The\"\n\n\n\"GMB\"\n\n\n148.4\n\n\n146.1\n\n\n143.8\n\n\n141.5\n\n\n139.3\n\n\n137.1\n\n\n134.9\n\n\n132.6\n\n\n130.5\n\n\n128.3\n\n\n126.0\n\n\n123.8\n\n\n121.5\n\n\n119.1\n\n\n116.7\n\n\n114.4\n\n\n112.1\n\n\n109.8\n\n\n107.6\n\n\n105.4\n\n\n103.2\n\n\n100.9\n\n\n98.6\n\n\n96.2\n\n\n93.7\n\n\n91.3\n\n\n88.9\n\n\n86.5\n\n\n84.3\n\n\n82.1\n\n\n80.0\n\n\n78.0\n\n\n76.1\n\n\n74.3\n\n\n72.6\n\n\n70.9\n\n\n69.3\n\n\n67.7\n\n\n66.2\n\n\n64.8\n\n\n63.3\n\n\n62.0\n\n\n60.6\n\n\n59.3\n\n\n58.0\n\n\n56.8\n\n\n55.6\n\n\n54.5\n\n\n53.6\n\n\n52.6\n\n\n51.7\n\n\n50.9\n\n\n50.1\n\n\n49.4\n\n\n48.6\n\n\n47.9\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n32\n\n\n33\n\n\n\n\n\"Zimbabwe\"\n\n\n\"ZWE\"\n\n\n92.6\n\n\n90.1\n\n\n87.6\n\n\n85.3\n\n\n82.8\n\n\n80.5\n\n\n78.3\n\n\n76.3\n\n\n74.7\n\n\n73.4\n\n\n72.4\n\n\n71.6\n\n\n71.1\n\n\n70.7\n\n\n70.5\n\n\n70.3\n\n\n70.1\n\n\n69.8\n\n\n69.2\n\n\n68.1\n\n\n66.4\n\n\n64.2\n\n\n61.6\n\n\n58.8\n\n\n56.0\n\n\n53.6\n\n\n51.7\n\n\n50.4\n\n\n49.8\n\n\n50.2\n\n\n51.2\n\n\n52.6\n\n\n54.5\n\n\n56.4\n\n\n58.1\n\n\n60.1\n\n\n61.6\n\n\n62.7\n\n\n63.3\n\n\n63.5\n\n\n63.5\n\n\n63.2\n\n\n62.7\n\n\n61.9\n\n\n61.5\n\n\n61.0\n\n\n60.3\n\n\n59.9\n\n\n58.9\n\n\n57.7\n\n\n55.8\n\n\n54.0\n\n\n49.4\n\n\n48.8\n\n\n47.6\n\n\n46.6\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n19\n\n\n32\n\n\n\n\n\"Zambia\"\n\n\n\"ZMB\"\n\n\n123.2\n\n\n120.9\n\n\n118.7\n\n\n116.7\n\n\n115.1\n\n\n114.0\n\n\n113.3\n\n\n112.9\n\n\n112.2\n\n\n111.1\n\n\n109.3\n\n\n106.7\n\n\n103.7\n\n\n100.7\n\n\n98.1\n\n\n96.3\n\n\n95.3\n\n\n95.1\n\n\n95.3\n\n\n95.6\n\n\n96.1\n\n\n97.0\n\n\n98.3\n\n\n100.2\n\n\n102.7\n\n\n105.6\n\n\n108.3\n\n\n110.6\n\n\n112.2\n\n\n113.1\n\n\n113.3\n\n\n113.0\n\n\n112.4\n\n\n111.3\n\n\n109.7\n\n\n107.8\n\n\n106.1\n\n\n104.6\n\n\n103.1\n\n\n100.9\n\n\n97.6\n\n\n92.7\n\n\n86.5\n\n\n80.0\n\n\n73.9\n\n\n68.7\n\n\n64.9\n\n\n61.3\n\n\n58.7\n\n\n55.6\n\n\n52.9\n\n\n51.1\n\n\n49.0\n\n\n46.5\n\n\n44.7\n\n\n43.3\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n23\n\n\n31\n\n\n\n\n\n\n\nFirst graph\n\n(ggplot(sampled_data)\n + geom_text(aes(1, 'y1960_rank', label='country'), ha='right', size=9)\n + geom_text(aes(2, 'y2015_rank', label='country'), ha='left', size=9)\n + geom_point(aes(1, 'y1960_rank', color='income_group'), size=2.5)\n + geom_point(aes(2, 'y2015_rank', color='income_group'), size=2.5)\n + geom_segment(aes(x=1, y='y1960_rank', xend=2, yend='y2015_rank', color='income_group'))\n + scale_y_reverse()\n)\n\n\n\n\nIt has the form we want, but we need to tweak it.\n\n# Text colors\nblack1 = '#252525'\nblack2 = '#222222'\n\n# Gallery Plot\n\n(ggplot(sampled_data)\n # Slight modifications for the original lines,\n # 1. Nudge the text to either sides of the points\n # 2. Alter the color and alpha values\n + geom_text(aes(1, 'y1960_rank', label='country'), nudge_x=-0.05, ha='right', size=9, color=black1)\n + geom_text(aes(2, 'y2015_rank', label='country'), nudge_x=0.05, ha='left', size=9, color=black1)\n + geom_point(aes(1, 'y1960_rank', color='income_group'), size=2.5, alpha=.7)\n + geom_point(aes(2, 'y2015_rank', color='income_group'), size=2.5, alpha=.7)\n + geom_segment(aes(x=1, y='y1960_rank', xend=2, yend='y2015_rank', color='income_group'), alpha=.7)\n \n # Text Annotations\n #+ annotate('text', x=1, y=0, label='Rank in 1960', fontweight='bold', ha='right', size=10, color=black2)\n #+ annotate('text', x=2, y=0, label='Rank in 2015', fontweight='bold', ha='left', size=10, color=black2)\n + annotate('text', x=1.5, y=0, label='Lines show change in rank', size=9, color=black1)\n #+ annotate('label', x=1.5, y=3, label='Lower infant\\ndeath rates', size=9, color=black1,\n #           label_size=0, fontstyle='italic')\n #+ annotate('label', x=1.5, y=33, label='Higher infant\\ndeath rates', size=9, color=black1,\n #           label_size=0, fontstyle='italic')\n \n # Prevent country names from being chopped off\n + lims(x=(0.35, 2.65))\n + labs(color='Income Group')\n # Countries with lower rates on top\n + scale_y_reverse()\n # Change colors\n + scale_color_brewer(type='qual', palette=2)\n # Removes all decorations\n + theme_void()\n # Changing the figure size prevents the country names from squishing up\n + theme(figure_size=(8, 11))\n)\n\n\n\n\n\nSource: NOTE: This notebook uses the polars package"
  },
  {
    "objectID": "reference/geom_segment.html#parameters",
    "href": "reference/geom_segment.html#parameters",
    "title": "geom_segment",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nxend\n\n\n\n\n\n\ny\n\n\n\n\n\n\nyend\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_segment.html#see-also",
    "href": "reference/geom_segment.html#see-also",
    "title": "geom_segment",
    "section": "",
    "text": "plotnine.geoms.geom_path.arrow: for adding arrowhead(s)to segments."
  },
  {
    "objectID": "reference/geom_segment.html#examples",
    "href": "reference/geom_segment.html#examples",
    "title": "geom_segment",
    "section": "",
    "text": "# NOTE: This notebook uses the polars package\nimport pandas as pd\nimport pandas.api.types as pdtypes\nimport numpy as np\n\nfrom plotnine import *\nimport polars as pl\nfrom polars import col\n\n\n\nComparing the point to point difference of many similar variables\nRead the data.\nSource: Pew Research Global Attitudes Spring 2015\n\n!head -n 20 'data/survey-social-media.csv'\n\nPSRAID,COUNTRY,Q145,Q146,Q70,Q74\n100000,Ethiopia,Female,35,No, \n100001,Ethiopia,Female,25,No, \n100002,Ethiopia,Male,40,Don’t know, \n100003,Ethiopia,Female,30,Don’t know, \n100004,Ethiopia,Male,22,No, \n100005,Ethiopia,Male,40,No, \n100006,Ethiopia,Female,20,No, \n100007,Ethiopia,Female,18,No,No\n100008,Ethiopia,Male,50,No, \n100009,Ethiopia,Male,35,No, \n100010,Ethiopia,Female,20,No, \n100011,Ethiopia,Female,30,Don’t know, \n100012,Ethiopia,Male,60,No, \n100013,Ethiopia,Male,18,No, \n100014,Ethiopia,Male,40,No, \n100015,Ethiopia,Male,28,Don’t know, \n100016,Ethiopia,Female,55,Don’t know, \n100017,Ethiopia,Male,30,Don’t know, \n100018,Ethiopia,Female,22,No, \n\n\n\ncolumns = dict(\n    COUNTRY='country',\n    Q145='gender',\n    Q146='age',\n    Q70='use_internet',\n    Q74='use_social_media'\n)\n\ndata = pl.scan_csv(\n    'data/survey-social-media.csv',\n    dtypes=dict(Q146=pl.Utf8),\n).rename(\n    columns\n).select([\n    'country',\n    'age',\n    'use_social_media'\n]).collect()\n\ndata.sample(10, seed=123)\n\n\n\nshape: (10, 3)\n\n\n\n\ncountry\n\n\nage\n\n\nuse_social_media\n\n\n\n\nstr\n\n\nstr\n\n\nstr\n\n\n\n\n\n\n\"Venezuela\"\n\n\n\"47\"\n\n\n\"Yes\"\n\n\n\n\n\"Israel\"\n\n\n\"63\"\n\n\n\" \"\n\n\n\n\n\"Germany\"\n\n\n\"60\"\n\n\n\"Yes\"\n\n\n\n\n\"France\"\n\n\n\"60\"\n\n\n\"No\"\n\n\n\n\n\"Philippines\"\n\n\n\"25\"\n\n\n\" \"\n\n\n\n\n\"China\"\n\n\n\"40\"\n\n\n\" \"\n\n\n\n\n\"Senegal\"\n\n\n\"20\"\n\n\n\" \"\n\n\n\n\n\"Argentina\"\n\n\n\"47\"\n\n\n\"Yes\"\n\n\n\n\n\"India\"\n\n\n\"53\"\n\n\n\"No\"\n\n\n\n\n\"Jordan\"\n\n\n\"24\"\n\n\n\" \"\n\n\n\n\n\n\n\nCreate age groups for users of social media\n\nyes_no = ['Yes', 'No']\nvalid_age_groups = ['18-34', '35-49', '50+']\n\nrdata = data.with_columns([\n    pl\n    .when(col('age') &lt;= '34').then('18-34')\n    .when(col('age') &lt;= '49').then('35-49')\n    .when(col('age') &lt; '98').then('50+')\n    .otherwise(\"\")\n    .alias('age_group'),\n    pl.count().over(\"country\").alias('country_count')\n]).filter(\n    col('age_group').is_in(valid_age_groups) &\n    col('use_social_media').is_in(yes_no)\n).groupby(['country', 'age_group']).agg([\n    # social media use percentage\n    ((col('use_social_media') == 'Yes').sum() * 100 / pl.count()).alias('sm_use_percent'),\n    \n    # social media question response rate\n    (col('use_social_media').is_in(yes_no).sum() * 100 / col('country_count').first()).alias('smq_response_rate')\n]).sort(['country', 'age_group'])\n\nrdata.head()\n\n\n\nshape: (5, 4)\n\n\n\n\ncountry\n\n\nage_group\n\n\nsm_use_percent\n\n\nsmq_response_rate\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\n\n\n\n\n\"Argentina\"\n\n\n\"18-34\"\n\n\n90.883191\n\n\n35.1\n\n\n\n\n\"Argentina\"\n\n\n\"35-49\"\n\n\n84.40367\n\n\n21.8\n\n\n\n\n\"Argentina\"\n\n\n\"50+\"\n\n\n67.333333\n\n\n15.0\n\n\n\n\n\"Australia\"\n\n\n\"18-34\"\n\n\n90.862944\n\n\n19.621514\n\n\n\n\n\"Australia\"\n\n\n\"35-49\"\n\n\n78.04878\n\n\n20.418327\n\n\n\n\n\n\n\nTop 14 countries by response rate to the social media question.\n\ndef col_format(name, fmt):\n    # Format useing python formating\n    # for more control over\n    return col(name).apply(lambda x: fmt.format(x=x))\n\ndef float_to_str_round(name):\n    return col_format(name, '{x:.0f}')\n\nn = 14\n\ntop = rdata.groupby('country').agg([\n    col('smq_response_rate').sum().alias('r')\n]).sort('r', reverse=True).head(n)\ntop_countries = top['country']\n\nexpr = float_to_str_round('sm_use_percent')\nexpr_pct = expr + '%'\n\npoint_data = rdata.filter(\n    col('country').is_in(top_countries)\n).with_column(\n    pl.when(col('country') == 'France').then(expr_pct).otherwise(expr).alias('sm_use_percent_str')\n)\n\npoint_data.head()\n\n\n\nshape: (5, 5)\n\n\n\n\ncountry\n\n\nage_group\n\n\nsm_use_percent\n\n\nsmq_response_rate\n\n\nsm_use_percent_str\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nstr\n\n\n\n\n\n\n\"Australia\"\n\n\n\"18-34\"\n\n\n90.862944\n\n\n19.621514\n\n\n\"91\"\n\n\n\n\n\"Australia\"\n\n\n\"35-49\"\n\n\n78.04878\n\n\n20.418327\n\n\n\"78\"\n\n\n\n\n\"Australia\"\n\n\n\"50+\"\n\n\n48.479087\n\n\n52.390438\n\n\n\"48\"\n\n\n\n\n\"Canada\"\n\n\n\"18-34\"\n\n\n92.063492\n\n\n25.099602\n\n\n\"92\"\n\n\n\n\n\"Canada\"\n\n\n\"35-49\"\n\n\n75.925926\n\n\n21.513944\n\n\n\"76\"\n\n\n\n\n\n\n\n\nsegment_data = point_data.groupby('country').agg([\n    col('sm_use_percent').min().alias('min'),\n    col('sm_use_percent').max().alias('max'),\n]).with_column(\n    (col('max') - col('min')).alias('gap')\n).sort(\n    'gap',\n).with_columns([\n    float_to_str_round('min').alias('min_str'),\n    float_to_str_round('max').alias('max_str'),\n    float_to_str_round('gap').alias('gap_str')\n])\n\nsegment_data.head()\n\n\n\nshape: (5, 7)\n\n\n\n\ncountry\n\n\nmin\n\n\nmax\n\n\ngap\n\n\nmin_str\n\n\nmax_str\n\n\ngap_str\n\n\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\nstr\n\n\n\n\n\n\n\"Russia\"\n\n\n76.07362\n\n\n95.151515\n\n\n19.077896\n\n\n\"76\"\n\n\n\"95\"\n\n\n\"19\"\n\n\n\n\n\"Israel\"\n\n\n55.405405\n\n\n88.311688\n\n\n32.906283\n\n\n\"55\"\n\n\n\"88\"\n\n\n\"33\"\n\n\n\n\n\"United Kingdom...\n\n\n52.74463\n\n\n86.096257\n\n\n33.351627\n\n\n\"53\"\n\n\n\"86\"\n\n\n\"33\"\n\n\n\n\n\"United States\"\n\n\n52.597403\n\n\n88.669951\n\n\n36.072548\n\n\n\"53\"\n\n\n\"89\"\n\n\n\"36\"\n\n\n\n\n\"Canada\"\n\n\n53.986333\n\n\n92.063492\n\n\n38.077159\n\n\n\"54\"\n\n\n\"92\"\n\n\n\"38\"\n\n\n\n\n\n\n\nFormat the floating point data that will be plotted into strings\nSet the order of the countries along the y-axis by setting the country variable to an ordered categorical.\n\ncountry_expr = col('country').cast(pl.Categorical)\nsegment_data = segment_data.with_column(country_expr)\npoint_data = point_data.with_columns(country_expr)\n\nFirst plot\n\n# The right column (youngest-oldest gap) location\nxgap = 112\n\n(ggplot()\n # Range strip\n + geom_segment(\n     segment_data,\n     aes(x='min', xend='max', y='country', yend='country'),\n     size=6,\n     color='#a7a9ac'\n )\n # Age group markers\n + geom_point(\n     point_data,\n     aes('sm_use_percent', 'country', color='age_group', fill='age_group'),\n     size=5,\n     stroke=0.7,\n )\n # Age group percentages\n + geom_text(\n     point_data.filter(col('age_group')==\"50+\"),\n     aes(x='sm_use_percent-2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='right'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"35-49\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str'),\n     size=8,\n     ha='left',\n     va='center',\n     color='white'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"18-34\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='left',\n )\n # gap difference\n + geom_text(\n     segment_data,\n     aes(x=xgap, y='country', label='gap_str'),\n     size=9,\n     fontweight='bold',\n     format_string='+{}'\n )\n)\n\n\n\n\nTweak it\n\n# The right column (youngest-oldest gap) location\nxgap = 115\n\n# Gallery Plot\n\n(ggplot()\n # Background Strips                                     # new\n + geom_segment(\n     segment_data,\n     aes(y='country', yend='country'),\n     x=0, xend=100,\n     size=8.5,\n     color='#edece3'\n )\n # vertical grid lines along the strips                  # new\n + annotate(\n     'segment',\n     x=list(range(10, 100, 10)) * n,\n     xend=list(range(10, 100, 10)) * n,\n     y=np.tile(np.arange(1, n+1), 9)-.25,\n     yend=np.tile(np.arange(1, n+1), 9) + .25,\n     color='#CCCCCC'\n )\n # Range strip\n + geom_segment(\n     segment_data,\n     aes(x='min', xend='max', y='country', yend='country'),\n     size=6,\n     color='#a7a9ac'\n )\n # Age group markers\n + geom_point(\n     point_data,\n     aes('sm_use_percent', 'country', color='age_group', fill='age_group'),\n     size=5,\n     stroke=0.7,\n )\n # Age group percentages\n + geom_text(\n     point_data.filter(col('age_group')==\"50+\"),\n     aes(x='sm_use_percent-2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='right',\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"35-49\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str'),\n     size=8,\n     ha='left',\n     va='center',\n     color='white'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"18-34\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='left',\n )\n # countries right-hand-size (instead of y-axis)         # new\n + geom_text(\n     segment_data,\n     aes(y='country', label='country'),\n     x=-1,\n     size=8,\n     ha='right',\n     fontweight='bold',\n     color='#222222'\n )\n # gap difference\n + geom_vline(xintercept=xgap, color='#edece3', size=32)  # new\n + geom_text(\n     segment_data,\n     aes(x=xgap, y='country', label='gap_str'),\n     size=9,\n     fontweight='bold',\n     format_string='+{}'\n )\n # Annotations                                            # new\n + annotate('text', x=31, y=n+1.1, label='50+', size=9, color='#ea9f2f', va='top')\n + annotate('text', x=56, y=n+1.1, label='35-49', size=9, color='#6d6e71', va='top')\n + annotate('text', x=85, y=n+1.1, label='18-34', size=9, color='#939c49', va='top')\n + annotate('text', x=xgap, y=n+.5, label='Youngest-\\nOldest Gap', size=9, color='#444444', va='bottom', ha='center')\n + annotate('point', x=[31, 56, 85], y=n+.3, alpha=0.85, stroke=0)\n + annotate('segment', x=[31, 56, 85], xend=[31, 56, 85], y=n+.3, yend=n+.8, alpha=0.85)\n + annotate('hline', yintercept=[x+0.5 for x in range(2, n, 2)], alpha=.5, linetype='dotted', size=0.7)\n \n # Better spacing and color                              # new\n + scale_x_continuous(limits=(-18, xgap+2))\n + scale_y_discrete(expand=(0, 0.25, 0.1, 0))\n + scale_fill_manual(values=['#c3ca8c', '#d1d3d4', '#f2c480'])\n + scale_color_manual(values=['#939c49', '#6d6e71', '#ea9f2f'])\n + guides(color=None, fill=None)\n + theme_void()\n + theme(figure_size=(8, 8.5))\n)\n\n\n\n\nInstead of looking at this plot as having a country variable on the y-axis and a percentage variable on the x-axis, we can view it as having vertically stacked up many indepedent variables, the values of which have a similar scale.\nProtip: Save a pdf file.\n\n\n\nComparing a group of ranked items at two different times\nRead the data.\nSource: World Bank - Infanct Mortality Rate (per 1,000 live births)b\n\ndata = pl.read_csv(\n    'data/API_SP.DYN.IMRT.IN_DS2_en_csv_v2/API_SP.DYN.IMRT.IN_DS2_en_csv_v2.csv',\n    skip_rows=4,\n    null_values=\"\",\n)\n\n# Columns as valid python variables\nyear_columns = {c: f'y{c}' for c in data.columns if c[:2] in {'19', '20'}}\ndata = data.rename({\n    'Country Name': 'country',\n    'Country Code': 'code',\n    **year_columns\n}).drop(['Indicator Name', 'Indicator Code'])\ndata.head()\n\n\n\nshape: (5, 59)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\n\n\n\n\n\"Aruba\"\n\n\n\"ABW\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n\n\n\"Afghanistan\"\n\n\n\"AFG\"\n\n\nnull\n\n\n240.5\n\n\n236.3\n\n\n232.3\n\n\n228.5\n\n\n224.6\n\n\n220.7\n\n\n217.0\n\n\n213.3\n\n\n209.8\n\n\n206.1\n\n\n202.2\n\n\n198.2\n\n\n194.3\n\n\n190.3\n\n\n186.6\n\n\n182.6\n\n\n178.7\n\n\n174.5\n\n\n170.4\n\n\n166.1\n\n\n161.8\n\n\n157.5\n\n\n153.2\n\n\n148.7\n\n\n144.5\n\n\n140.2\n\n\n135.7\n\n\n131.3\n\n\n126.8\n\n\n122.5\n\n\n118.3\n\n\n114.4\n\n\n110.9\n\n\n107.7\n\n\n105.0\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.2\n\n\n95.4\n\n\n93.4\n\n\n91.2\n\n\n89.0\n\n\n86.7\n\n\n84.4\n\n\n82.3\n\n\n80.4\n\n\n78.6\n\n\n76.8\n\n\n75.1\n\n\n73.4\n\n\n71.7\n\n\n69.9\n\n\n68.1\n\n\n66.3\n\n\nnull\n\n\n\n\n\"Angola\"\n\n\n\"AGO\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n138.3\n\n\n137.5\n\n\n136.8\n\n\n136.0\n\n\n135.3\n\n\n134.9\n\n\n134.4\n\n\n134.1\n\n\n133.8\n\n\n133.6\n\n\n133.5\n\n\n133.5\n\n\n133.5\n\n\n133.4\n\n\n133.2\n\n\n132.8\n\n\n132.3\n\n\n131.5\n\n\n130.6\n\n\n129.5\n\n\n128.3\n\n\n126.9\n\n\n125.5\n\n\n124.1\n\n\n122.8\n\n\n121.2\n\n\n119.4\n\n\n117.1\n\n\n114.7\n\n\n112.2\n\n\n109.6\n\n\n106.8\n\n\n104.1\n\n\n101.4\n\n\n98.8\n\n\n96.0\n\n\nnull\n\n\n\n\n\"Albania\"\n\n\n\"ALB\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n73.0\n\n\n68.4\n\n\n64.0\n\n\n59.9\n\n\n56.1\n\n\n52.4\n\n\n49.1\n\n\n45.9\n\n\n43.2\n\n\n40.8\n\n\n38.6\n\n\n36.7\n\n\n35.1\n\n\n33.7\n\n\n32.5\n\n\n31.4\n\n\n30.3\n\n\n29.1\n\n\n27.9\n\n\n26.8\n\n\n25.5\n\n\n24.4\n\n\n23.2\n\n\n22.1\n\n\n21.0\n\n\n20.0\n\n\n19.1\n\n\n18.3\n\n\n17.4\n\n\n16.7\n\n\n16.0\n\n\n15.4\n\n\n14.8\n\n\n14.3\n\n\n13.8\n\n\n13.3\n\n\n12.9\n\n\n12.5\n\n\nnull\n\n\n\n\n\"Andorra\"\n\n\n\"AND\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n7.5\n\n\n7.0\n\n\n6.5\n\n\n6.1\n\n\n5.6\n\n\n5.2\n\n\n5.0\n\n\n4.6\n\n\n4.3\n\n\n4.1\n\n\n3.9\n\n\n3.7\n\n\n3.5\n\n\n3.3\n\n\n3.2\n\n\n3.1\n\n\n2.9\n\n\n2.8\n\n\n2.7\n\n\n2.6\n\n\n2.5\n\n\n2.4\n\n\n2.3\n\n\n2.2\n\n\n2.1\n\n\n2.1\n\n\nnull\n\n\n\n\n\n\n\nThe data includes regional aggregates. To tell apart the regional aggregates we need the metadata. Every row in the data table has a corresponding row in the metadata table. Where the row has regional aggregate data, the Region column in the metadata table is NaN.\n\ndef ordered_categorical(s, categories=None):\n    \"\"\"\n    Create a categorical ordered according to the categories\n    \"\"\"\n    name = getattr(s, 'name', '')\n    if categories is None:\n        return pl.Series(name, s).cast(pl.Categorical)\n\n    with pl.StringCache():\n        pl.Series(categories).cast(pl.Categorical)\n        return pl.Series(name, s).cast(pl.Categorical)\n\ncolumns = {\n    'Country Code': 'code',\n    'Region': 'region',\n    'IncomeGroup': 'income_group'\n}\n\nmetadata = pl.scan_csv(\n    'data/API_SP.DYN.IMRT.IN_DS2_en_csv_v2/Metadata_Country_API_SP.DYN.IMRT.IN_DS2_en_csv_v2.csv'\n).rename(\n    columns\n).select(\n    list(columns.values())\n).filter(\n    # Drop the regional aggregate information\n    (col('region') != '') & (col('income_group') != '')\n).collect()\n\ncat_order = ['High income', 'Upper middle income', 'Lower middle income', 'Low income']\nmetadata = metadata.with_columns([\n    ordered_categorical(metadata['income_group'], cat_order)\n])\n\nmetadata.head(10)\n\n\n\nshape: (10, 3)\n\n\n\n\ncode\n\n\nregion\n\n\nincome_group\n\n\n\n\nstr\n\n\nstr\n\n\ncat\n\n\n\n\n\n\n\"ABW\"\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\"AFG\"\n\n\n\"South Asia\"\n\n\n\"Low income\"\n\n\n\n\n\"AGO\"\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n\n\n\"ALB\"\n\n\n\"Europe & Centr...\n\n\n\"Upper middle i...\n\n\n\n\n\"AND\"\n\n\n\"Europe & Centr...\n\n\n\"High income\"\n\n\n\n\n\"ARE\"\n\n\n\"Middle East & ...\n\n\n\"High income\"\n\n\n\n\n\"ARG\"\n\n\n\"Latin America ...\n\n\n\"Upper middle i...\n\n\n\n\n\"ARM\"\n\n\n\"Europe & Centr...\n\n\n\"Lower middle i...\n\n\n\n\n\"ASM\"\n\n\n\"East Asia & Pa...\n\n\n\"Upper middle i...\n\n\n\n\n\"ATG\"\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\n\n\nRemove the regional aggregates, to create a table with only country data\n\ncountry_data = data.join(metadata, on='code')\ncountry_data.head()\n\n\n\nshape: (5, 61)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\nregion\n\n\nincome_group\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\ncat\n\n\n\n\n\n\n\"Aruba\"\n\n\n\"ABW\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\"Afghanistan\"\n\n\n\"AFG\"\n\n\nnull\n\n\n240.5\n\n\n236.3\n\n\n232.3\n\n\n228.5\n\n\n224.6\n\n\n220.7\n\n\n217.0\n\n\n213.3\n\n\n209.8\n\n\n206.1\n\n\n202.2\n\n\n198.2\n\n\n194.3\n\n\n190.3\n\n\n186.6\n\n\n182.6\n\n\n178.7\n\n\n174.5\n\n\n170.4\n\n\n166.1\n\n\n161.8\n\n\n157.5\n\n\n153.2\n\n\n148.7\n\n\n144.5\n\n\n140.2\n\n\n135.7\n\n\n131.3\n\n\n126.8\n\n\n122.5\n\n\n118.3\n\n\n114.4\n\n\n110.9\n\n\n107.7\n\n\n105.0\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.2\n\n\n95.4\n\n\n93.4\n\n\n91.2\n\n\n89.0\n\n\n86.7\n\n\n84.4\n\n\n82.3\n\n\n80.4\n\n\n78.6\n\n\n76.8\n\n\n75.1\n\n\n73.4\n\n\n71.7\n\n\n69.9\n\n\n68.1\n\n\n66.3\n\n\nnull\n\n\n\"South Asia\"\n\n\n\"Low income\"\n\n\n\n\n\"Angola\"\n\n\n\"AGO\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n138.3\n\n\n137.5\n\n\n136.8\n\n\n136.0\n\n\n135.3\n\n\n134.9\n\n\n134.4\n\n\n134.1\n\n\n133.8\n\n\n133.6\n\n\n133.5\n\n\n133.5\n\n\n133.5\n\n\n133.4\n\n\n133.2\n\n\n132.8\n\n\n132.3\n\n\n131.5\n\n\n130.6\n\n\n129.5\n\n\n128.3\n\n\n126.9\n\n\n125.5\n\n\n124.1\n\n\n122.8\n\n\n121.2\n\n\n119.4\n\n\n117.1\n\n\n114.7\n\n\n112.2\n\n\n109.6\n\n\n106.8\n\n\n104.1\n\n\n101.4\n\n\n98.8\n\n\n96.0\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n\n\n\"Albania\"\n\n\n\"ALB\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n73.0\n\n\n68.4\n\n\n64.0\n\n\n59.9\n\n\n56.1\n\n\n52.4\n\n\n49.1\n\n\n45.9\n\n\n43.2\n\n\n40.8\n\n\n38.6\n\n\n36.7\n\n\n35.1\n\n\n33.7\n\n\n32.5\n\n\n31.4\n\n\n30.3\n\n\n29.1\n\n\n27.9\n\n\n26.8\n\n\n25.5\n\n\n24.4\n\n\n23.2\n\n\n22.1\n\n\n21.0\n\n\n20.0\n\n\n19.1\n\n\n18.3\n\n\n17.4\n\n\n16.7\n\n\n16.0\n\n\n15.4\n\n\n14.8\n\n\n14.3\n\n\n13.8\n\n\n13.3\n\n\n12.9\n\n\n12.5\n\n\nnull\n\n\n\"Europe & Centr...\n\n\n\"Upper middle i...\n\n\n\n\n\"Andorra\"\n\n\n\"AND\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n7.5\n\n\n7.0\n\n\n6.5\n\n\n6.1\n\n\n5.6\n\n\n5.2\n\n\n5.0\n\n\n4.6\n\n\n4.3\n\n\n4.1\n\n\n3.9\n\n\n3.7\n\n\n3.5\n\n\n3.3\n\n\n3.2\n\n\n3.1\n\n\n2.9\n\n\n2.8\n\n\n2.7\n\n\n2.6\n\n\n2.5\n\n\n2.4\n\n\n2.3\n\n\n2.2\n\n\n2.1\n\n\n2.1\n\n\nnull\n\n\n\"Europe & Centr...\n\n\n\"High income\"\n\n\n\n\n\n\n\nWe are interested in the changes in rank between 1960 and 2015. To plot a reasonable sized graph, we randomly sample 35 countries.\n\nsampled_data = country_data.drop_nulls(\n    subset=['y1960', 'y2015']\n).sample(\n    n=35,\n    seed=123\n).with_columns([\n    col('y1960').rank(method='ordinal').cast(pl.Int64).suffix('_rank'),\n    col('y2015').rank(method='ordinal').cast(pl.Int64).suffix('_rank')\n]).sort('y2015_rank', reverse=True)\n\nsampled_data.head()\n\n\n\nshape: (5, 63)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\nregion\n\n\nincome_group\n\n\ny1960_rank\n\n\ny2015_rank\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\ncat\n\n\ni64\n\n\ni64\n\n\n\n\n\n\n\"Togo\"\n\n\n\"TGO\"\n\n\n162.4\n\n\n159.4\n\n\n156.4\n\n\n153.5\n\n\n150.5\n\n\n147.7\n\n\n144.7\n\n\n141.8\n\n\n138.8\n\n\n135.8\n\n\n132.8\n\n\n130.0\n\n\n127.2\n\n\n124.4\n\n\n121.8\n\n\n119.2\n\n\n116.6\n\n\n114.1\n\n\n111.7\n\n\n109.2\n\n\n106.9\n\n\n104.8\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.1\n\n\n95.5\n\n\n94.0\n\n\n92.6\n\n\n91.4\n\n\n90.2\n\n\n89.0\n\n\n87.9\n\n\n86.8\n\n\n85.5\n\n\n84.2\n\n\n82.8\n\n\n81.2\n\n\n79.6\n\n\n77.9\n\n\n76.2\n\n\n74.4\n\n\n72.6\n\n\n70.8\n\n\n69.1\n\n\n67.4\n\n\n65.7\n\n\n64.1\n\n\n62.5\n\n\n60.9\n\n\n59.3\n\n\n57.9\n\n\n56.5\n\n\n55.0\n\n\n53.6\n\n\n52.3\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n33\n\n\n35\n\n\n\n\n\"Haiti\"\n\n\n\"HTI\"\n\n\n194.8\n\n\n191.5\n\n\n188.3\n\n\n185.2\n\n\n182.2\n\n\n179.1\n\n\n176.0\n\n\n172.9\n\n\n169.8\n\n\n166.6\n\n\n163.4\n\n\n160.1\n\n\n156.6\n\n\n153.0\n\n\n149.5\n\n\n146.0\n\n\n142.6\n\n\n139.2\n\n\n135.8\n\n\n132.5\n\n\n129.4\n\n\n126.2\n\n\n123.0\n\n\n120.0\n\n\n117.1\n\n\n114.3\n\n\n111.5\n\n\n108.8\n\n\n106.1\n\n\n103.5\n\n\n101.0\n\n\n98.4\n\n\n95.8\n\n\n93.1\n\n\n90.4\n\n\n87.8\n\n\n85.1\n\n\n82.4\n\n\n79.9\n\n\n77.4\n\n\n75.0\n\n\n72.8\n\n\n70.7\n\n\n68.9\n\n\n67.2\n\n\n65.6\n\n\n64.1\n\n\n62.7\n\n\n61.3\n\n\n60.0\n\n\n85.5\n\n\n57.5\n\n\n56.2\n\n\n54.8\n\n\n53.5\n\n\n52.2\n\n\nnull\n\n\n\"Latin America ...\n\n\n\"Low income\"\n\n\n35\n\n\n34\n\n\n\n\n\"Gambia, The\"\n\n\n\"GMB\"\n\n\n148.4\n\n\n146.1\n\n\n143.8\n\n\n141.5\n\n\n139.3\n\n\n137.1\n\n\n134.9\n\n\n132.6\n\n\n130.5\n\n\n128.3\n\n\n126.0\n\n\n123.8\n\n\n121.5\n\n\n119.1\n\n\n116.7\n\n\n114.4\n\n\n112.1\n\n\n109.8\n\n\n107.6\n\n\n105.4\n\n\n103.2\n\n\n100.9\n\n\n98.6\n\n\n96.2\n\n\n93.7\n\n\n91.3\n\n\n88.9\n\n\n86.5\n\n\n84.3\n\n\n82.1\n\n\n80.0\n\n\n78.0\n\n\n76.1\n\n\n74.3\n\n\n72.6\n\n\n70.9\n\n\n69.3\n\n\n67.7\n\n\n66.2\n\n\n64.8\n\n\n63.3\n\n\n62.0\n\n\n60.6\n\n\n59.3\n\n\n58.0\n\n\n56.8\n\n\n55.6\n\n\n54.5\n\n\n53.6\n\n\n52.6\n\n\n51.7\n\n\n50.9\n\n\n50.1\n\n\n49.4\n\n\n48.6\n\n\n47.9\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n32\n\n\n33\n\n\n\n\n\"Zimbabwe\"\n\n\n\"ZWE\"\n\n\n92.6\n\n\n90.1\n\n\n87.6\n\n\n85.3\n\n\n82.8\n\n\n80.5\n\n\n78.3\n\n\n76.3\n\n\n74.7\n\n\n73.4\n\n\n72.4\n\n\n71.6\n\n\n71.1\n\n\n70.7\n\n\n70.5\n\n\n70.3\n\n\n70.1\n\n\n69.8\n\n\n69.2\n\n\n68.1\n\n\n66.4\n\n\n64.2\n\n\n61.6\n\n\n58.8\n\n\n56.0\n\n\n53.6\n\n\n51.7\n\n\n50.4\n\n\n49.8\n\n\n50.2\n\n\n51.2\n\n\n52.6\n\n\n54.5\n\n\n56.4\n\n\n58.1\n\n\n60.1\n\n\n61.6\n\n\n62.7\n\n\n63.3\n\n\n63.5\n\n\n63.5\n\n\n63.2\n\n\n62.7\n\n\n61.9\n\n\n61.5\n\n\n61.0\n\n\n60.3\n\n\n59.9\n\n\n58.9\n\n\n57.7\n\n\n55.8\n\n\n54.0\n\n\n49.4\n\n\n48.8\n\n\n47.6\n\n\n46.6\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n19\n\n\n32\n\n\n\n\n\"Zambia\"\n\n\n\"ZMB\"\n\n\n123.2\n\n\n120.9\n\n\n118.7\n\n\n116.7\n\n\n115.1\n\n\n114.0\n\n\n113.3\n\n\n112.9\n\n\n112.2\n\n\n111.1\n\n\n109.3\n\n\n106.7\n\n\n103.7\n\n\n100.7\n\n\n98.1\n\n\n96.3\n\n\n95.3\n\n\n95.1\n\n\n95.3\n\n\n95.6\n\n\n96.1\n\n\n97.0\n\n\n98.3\n\n\n100.2\n\n\n102.7\n\n\n105.6\n\n\n108.3\n\n\n110.6\n\n\n112.2\n\n\n113.1\n\n\n113.3\n\n\n113.0\n\n\n112.4\n\n\n111.3\n\n\n109.7\n\n\n107.8\n\n\n106.1\n\n\n104.6\n\n\n103.1\n\n\n100.9\n\n\n97.6\n\n\n92.7\n\n\n86.5\n\n\n80.0\n\n\n73.9\n\n\n68.7\n\n\n64.9\n\n\n61.3\n\n\n58.7\n\n\n55.6\n\n\n52.9\n\n\n51.1\n\n\n49.0\n\n\n46.5\n\n\n44.7\n\n\n43.3\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n23\n\n\n31\n\n\n\n\n\n\n\nFirst graph\n\n(ggplot(sampled_data)\n + geom_text(aes(1, 'y1960_rank', label='country'), ha='right', size=9)\n + geom_text(aes(2, 'y2015_rank', label='country'), ha='left', size=9)\n + geom_point(aes(1, 'y1960_rank', color='income_group'), size=2.5)\n + geom_point(aes(2, 'y2015_rank', color='income_group'), size=2.5)\n + geom_segment(aes(x=1, y='y1960_rank', xend=2, yend='y2015_rank', color='income_group'))\n + scale_y_reverse()\n)\n\n\n\n\nIt has the form we want, but we need to tweak it.\n\n# Text colors\nblack1 = '#252525'\nblack2 = '#222222'\n\n# Gallery Plot\n\n(ggplot(sampled_data)\n # Slight modifications for the original lines,\n # 1. Nudge the text to either sides of the points\n # 2. Alter the color and alpha values\n + geom_text(aes(1, 'y1960_rank', label='country'), nudge_x=-0.05, ha='right', size=9, color=black1)\n + geom_text(aes(2, 'y2015_rank', label='country'), nudge_x=0.05, ha='left', size=9, color=black1)\n + geom_point(aes(1, 'y1960_rank', color='income_group'), size=2.5, alpha=.7)\n + geom_point(aes(2, 'y2015_rank', color='income_group'), size=2.5, alpha=.7)\n + geom_segment(aes(x=1, y='y1960_rank', xend=2, yend='y2015_rank', color='income_group'), alpha=.7)\n \n # Text Annotations\n #+ annotate('text', x=1, y=0, label='Rank in 1960', fontweight='bold', ha='right', size=10, color=black2)\n #+ annotate('text', x=2, y=0, label='Rank in 2015', fontweight='bold', ha='left', size=10, color=black2)\n + annotate('text', x=1.5, y=0, label='Lines show change in rank', size=9, color=black1)\n #+ annotate('label', x=1.5, y=3, label='Lower infant\\ndeath rates', size=9, color=black1,\n #           label_size=0, fontstyle='italic')\n #+ annotate('label', x=1.5, y=33, label='Higher infant\\ndeath rates', size=9, color=black1,\n #           label_size=0, fontstyle='italic')\n \n # Prevent country names from being chopped off\n + lims(x=(0.35, 2.65))\n + labs(color='Income Group')\n # Countries with lower rates on top\n + scale_y_reverse()\n # Change colors\n + scale_color_brewer(type='qual', palette=2)\n # Removes all decorations\n + theme_void()\n # Changing the figure size prevents the country names from squishing up\n + theme(figure_size=(8, 11))\n)\n\n\n\n\n\nSource: NOTE: This notebook uses the polars package"
  },
  {
    "objectID": "reference/geom_smooth.html",
    "href": "reference/geom_smooth.html",
    "title": "geom_smooth",
    "section": "",
    "text": "geoms.geom_smooth()\nA smoothed conditional mean\nUsage\ngeom_smooth(mapping=None, data=None, stat='smooth', position='identity',\n            na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n            legend_fill_ratio=0.5, **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n0.4\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n#999999\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n1\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_smooth) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nlegend_fill_ratio : float (default: 0.5) How much (vertically) of the legend box should be filled by the color that indicates the confidence intervals. Should be in the range [0, 1].\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_smooth,\n    labs\n)\nfrom plotnine.data import mpg\n\n\n\nAids the eye in seeing patterns in the presence of overplotting.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nUse span to control the “wiggliness” of the default loess smoother. The span is the fraction of points used to fit each local regression: small numbers make a wigglier curve, larger numbers make a smoother curve.\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth(span=.3)\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can remove confidence interval around smooth with se=False:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth(span=.3, se=False)\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nInstead of a loess smooth, you can use any other modelling function:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth(method='lm')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n# Gallery Plot\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy', color='factor(drv)')) \n    + geom_point()\n    + geom_smooth(method='lm')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Smoothed conditional means"
  },
  {
    "objectID": "reference/geom_smooth.html#parameters",
    "href": "reference/geom_smooth.html#parameters",
    "title": "geom_smooth",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n0.4\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\nfill\n\n\n#999999\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n1\n\n\n\n\nymax\n\n\n\n\n\n\nymin\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_smooth) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: True) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\nlegend_fill_ratio : float (default: 0.5) How much (vertically) of the legend box should be filled by the color that indicates the confidence intervals. Should be in the range [0, 1]."
  },
  {
    "objectID": "reference/geom_smooth.html#examples",
    "href": "reference/geom_smooth.html#examples",
    "title": "geom_smooth",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_smooth,\n    labs\n)\nfrom plotnine.data import mpg\n\n\n\nAids the eye in seeing patterns in the presence of overplotting.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nUse span to control the “wiggliness” of the default loess smoother. The span is the fraction of points used to fit each local regression: small numbers make a wigglier curve, larger numbers make a smoother curve.\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth(span=.3)\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can remove confidence interval around smooth with se=False:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth(span=.3, se=False)\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nInstead of a loess smooth, you can use any other modelling function:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_smooth(method='lm')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n# Gallery Plot\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy', color='factor(drv)')) \n    + geom_point()\n    + geom_smooth(method='lm')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Smoothed conditional means"
  },
  {
    "objectID": "reference/geom_step.html",
    "href": "reference/geom_step.html",
    "title": "geom_step",
    "section": "",
    "text": "geoms.geom_step()\nStepped connected points\nUsage\ngeom_step(mapping=None, data=None, stat='identity', position='identity',\n          na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n          direction='hv', **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_path: For documentation of extraparameters.\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_step,\n    geom_line,\n    labs,\n    theme,\n    element_text\n)\nfrom plotnine.data import economics\n\n\n\ngeom_step() connects points using ‘steps’ instead of a line.\n\n# inspect the data\neconomics.head()\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n\n\n\n\n\n\n\nPlot a step plot using geom_plot(). Notice from the first point the line travels vertically then horizontally:\n\n(\n    ggplot(economics.iloc[:20],                 # filter for first twenty rows (dates) to make steps more visible\n           aes('date', 'unemploy')) \n    + geom_step()                               # step plot\n    + labs(x='date', y='unemployment (,000)')   # label x & y-axis\n    + theme(axis_text_x=element_text(angle=45)) # rotate x-axis text for readability\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can see how geom_path() (shown in pink) differs from geom_line() (black):\n\n(\n    ggplot(economics.iloc[:20], \n           aes('date', 'unemploy')) \n    + geom_step(colour='#ff69b4',              # plot geom_step as the first layer - colour pink\n                alpha=0.5,                     # line transparency\n                size=2.5)                      # line thickness\n    + geom_line()                              # plot geom_line as the second layer\n    + labs(x='date', y='unemployment (,000)')\n    + theme(axis_text_x=element_text(angle=45))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nRather than a line that travels vertically then horizontally, this order can be switched by specifying direction='vh' within geom_step(). Below direction='vh' is shown in black with the default direction='hv' shown in pink:\n\n(\n    ggplot(economics.iloc[:20], \n           aes('date', 'unemploy')) \n    + geom_step(colour='#ff69b4', # plot geom_path with default direction as the first layer - colour pink\n                linetype='dashed',# line type\n                size=2,           # line thickness\n                alpha=0.5)        # line transparency        \n    + geom_step(direction='vh')   # plot geom_path with step order reversed\n    + labs(x='date', y='unemployment (,000)')\n    + theme(axis_text_x=element_text(angle=45))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Step plots"
  },
  {
    "objectID": "reference/geom_step.html#parameters",
    "href": "reference/geom_step.html#parameters",
    "title": "geom_step",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_step.html#see-also",
    "href": "reference/geom_step.html#see-also",
    "title": "geom_step",
    "section": "",
    "text": "plotnine.geoms.geom_path: For documentation of extraparameters."
  },
  {
    "objectID": "reference/geom_step.html#examples",
    "href": "reference/geom_step.html#examples",
    "title": "geom_step",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_step,\n    geom_line,\n    labs,\n    theme,\n    element_text\n)\nfrom plotnine.data import economics\n\n\n\ngeom_step() connects points using ‘steps’ instead of a line.\n\n# inspect the data\neconomics.head()\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n\n\n\n\n\n\n\nPlot a step plot using geom_plot(). Notice from the first point the line travels vertically then horizontally:\n\n(\n    ggplot(economics.iloc[:20],                 # filter for first twenty rows (dates) to make steps more visible\n           aes('date', 'unemploy')) \n    + geom_step()                               # step plot\n    + labs(x='date', y='unemployment (,000)')   # label x & y-axis\n    + theme(axis_text_x=element_text(angle=45)) # rotate x-axis text for readability\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can see how geom_path() (shown in pink) differs from geom_line() (black):\n\n(\n    ggplot(economics.iloc[:20], \n           aes('date', 'unemploy')) \n    + geom_step(colour='#ff69b4',              # plot geom_step as the first layer - colour pink\n                alpha=0.5,                     # line transparency\n                size=2.5)                      # line thickness\n    + geom_line()                              # plot geom_line as the second layer\n    + labs(x='date', y='unemployment (,000)')\n    + theme(axis_text_x=element_text(angle=45))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nRather than a line that travels vertically then horizontally, this order can be switched by specifying direction='vh' within geom_step(). Below direction='vh' is shown in black with the default direction='hv' shown in pink:\n\n(\n    ggplot(economics.iloc[:20], \n           aes('date', 'unemploy')) \n    + geom_step(colour='#ff69b4', # plot geom_path with default direction as the first layer - colour pink\n                linetype='dashed',# line type\n                size=2,           # line thickness\n                alpha=0.5)        # line transparency        \n    + geom_step(direction='vh')   # plot geom_path with step order reversed\n    + labs(x='date', y='unemployment (,000)')\n    + theme(axis_text_x=element_text(angle=45))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Step plots"
  },
  {
    "objectID": "reference/geom_tile.html",
    "href": "reference/geom_tile.html",
    "title": "geom_tile",
    "section": "",
    "text": "geoms.geom_tile()\nRectangles specified using a center points\nUsage\ngeom_tile(mapping=None, data=None, stat='identity', position='identity',\n          na_rm=False, inherit_aes=True, show_legend=None, raster=False,\n          **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.1\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.geoms.geom_rect\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_tile,\n    geom_text,\n    scale_y_reverse,\n    scale_y_discrete,\n    scale_fill_brewer,\n    scale_color_manual,\n    coord_equal,\n    theme,\n    theme_void,\n    element_blank,\n    element_rect,\n    element_text,\n)\n\n\n\nGraphing of highly organised tabular information\nRead the data.\n\nelements = pd.read_csv('data/elements.csv')\nelements.head()\n\n\n\n\n\n\n\n\natomic number\nsymbol\nname\natomic mass\nCPK\nelectronic configuration\nelectronegativity\natomic radius\nion radius\nvan der Waals radius\n...\nEA\nstandard state\nbonding type\nmelting point\nboiling point\ndensity\nmetal\nyear discovered\ngroup\nperiod\n\n\n\n\n0\n1\nH\nHydrogen\n1.00794\n#FFFFFF\n1s1\n2.20\n37.0\nNaN\n120.0\n...\n-73.0\ngas\ndiatomic\n14.0\n20.0\n0.00009\nnonmetal\n1766\n1\n1\n\n\n1\n2\nHe\nHelium\n4.002602\n#D9FFFF\n1s2\nNaN\n32.0\nNaN\n140.0\n...\n0.0\ngas\natomic\nNaN\n4.0\n0.00000\nnoble gas\n1868\n18\n1\n\n\n2\n3\nLi\nLithium\n6.941\n#CC80FF\n[He] 2s1\n0.98\n134.0\n76 (+1)\n182.0\n...\n-60.0\nsolid\nmetallic\n454.0\n1615.0\n0.54000\nalkali metal\n1817\n1\n2\n\n\n3\n4\nBe\nBeryllium\n9.012182\n#C2FF00\n[He] 2s2\n1.57\n90.0\n45 (+2)\nNaN\n...\n0.0\nsolid\nmetallic\n1560.0\n2743.0\n1.85000\nalkaline earth metal\n1798\n2\n2\n\n\n4\n5\nB\nBoron\n10.811\n#FFB5B5\n[He] 2s2 2p1\n2.04\n82.0\n27 (+3)\nNaN\n...\n-27.0\nsolid\ncovalent network\n2348.0\n4273.0\n2.46000\nmetalloid\n1807\n13\n2\n\n\n\n\n5 rows × 21 columns\n\n\n\nAlter the data types of the information that will be plotted. This makes it convenient to work with.\n\nelements['group'] = [-1 if g == '-' else int(g) for g in elements.group]\nelements['bonding type'] = elements['bonding type'].astype('category')\nelements['metal'] = elements['metal'].astype('category')\nelements['atomic_number'] = elements['atomic number'].astype(str)\n\nThe periodic table has two tables, a top and bottom. The elements in the top have groups, and those in the bottom have no groups. We make separate dataframes for both – they have different alignments.\n\ntop = elements.query('group != -1').copy()\nbottom = elements.query('group == -1').copy()\n\nThe top table is nice and well behaving. The x location of the elements indicate the group and the y locations the period.\n\ntop['x'] = top.group\ntop['y'] = top.period\n\nThe bottom table has 2 rows, with the atomic number increasing to the right. We create an x based on the atomic number and add a horizontal shift. As the dataframe is ordered by atomic number, the operation is easier. The bottom elements are labelled with a “period”. We add a vertical shift to give us a good y location that gives the appearance of two tables.\n\nnrows = 2\nhshift = 3.5\nvshift = 3\nbottom['x'] = np.tile(np.arange(len(bottom)//nrows), nrows) + hshift\nbottom['y'] = bottom.period + vshift\n\nWe will be plotting using tiles and we want to have some space between the tiles. We have set the x and y locations above to take up a unit of space. To get a good effect, the tile dimensions should be less than 1.\n\ntile_width = 0.95\ntile_height = 0.95\n\nFirst peak\n\n(ggplot(aes('x', 'y'))\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe table upside down. We could have been more careful when creating the y locations since the periods are drawn in descending order. But, we can fix that with a reverse scale.\n\n(ggplot(aes('x', 'y'))\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + scale_y_reverse() # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nLet us apply some color to it.\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')  # new\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + scale_y_reverse()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\nGoal: To add text to the tiles\nThere are four pieces of text that we shall add to the tiles, that is 4 geom_text additions. As we have two tables, that comes to 8 geom_text additions. When any geom is added to a ggplot object, behind the scenes a layer is created and added. We can create a group of layers that can be added to a ggplot object in one go using a list.\nWe use a function that accepts a dataframe, and returns a list of geoms.\n\ndef inner_text(data):\n    layers = [geom_text(data, aes(label='atomic_number'), nudge_x=-0.40, nudge_y=0.40,\n                        ha='left', va='top', fontweight='normal', size=6),\n              geom_text(data, aes(label='symbol'), nudge_y=.1, size=9),\n              geom_text(data, aes(label='name'), nudge_y=-0.125, fontweight='normal', size=4.5),\n              geom_text(data, aes(label='atomic mass'), nudge_y=-.3, fontweight='normal', size=4.5)]\n    return layers\n\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)    # new\n + inner_text(bottom) # new\n + scale_y_reverse()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nIt is crowded in there and the tiles do not have equal dimentions. Use the theme create a larger figure. coord_equal give us equal units along the axes, this makes the tiles square.\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + scale_y_reverse()\n + coord_equal(expand=False)   # new\n + theme(figure_size=(12, 6))  # new\n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nIt is has all the information we want, except one for complication. Elements Lu and Lr also belong in the bottom table. One way to show this duality is to have tiles with two colors split horizontally.\nThe colors are determined by the metal field, and we know the x and y locations. We create a dataframe with this information to create a half-tile. A half-tile is centered at the quarter mark.\n\nsplit_df = pd.DataFrame({\n    'x': 3-tile_width/4,\n    'y': [6, 7],\n    'metal': pd.Categorical(['lanthanoid', 'actinoid'])\n})\n\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(split_df, aes(width=tile_width/2, height=tile_height))  # new\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + scale_y_reverse()\n + coord_equal(expand=False)\n + theme(figure_size=(12, 6))\n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nChange the fill color for a different look and use a theme that clears out all the clutter.\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(split_df, aes(width=tile_width/2, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + scale_y_reverse()\n + scale_fill_brewer(type='qual', palette=3)         # new\n + coord_equal(expand=False)\n + theme_void()                                      # new\n + theme(figure_size=(12, 6),\n         plot_background=element_rect(fill='white')) # new\n        \n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nAdd the group number along the top most row of each column, and period number along the left side of the top table.\nFor the period number, we set the breaks on the y scale.\n\n# The location of the group number is the top most (and therefore smallest period)\n# element with the group\ngroupdf = top.groupby(\n    'group'\n).agg(\n    y=('period', np.min)\n).reset_index()\n\nFinally,\n\n# Gallery Plot\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(split_df, aes(width=tile_width/2, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + geom_text(groupdf, aes('group', 'y', label='group'), color='gray', nudge_y=.525,\n             va='bottom',fontweight='normal', size=9, inherit_aes=False)    # new\n + scale_y_reverse(breaks=range(1, 8), limits=(0, 10.5))                    # modified\n + scale_fill_brewer(type='qual', palette=3) \n + coord_equal(expand=False)\n + theme_void()\n + theme(figure_size=(12, 6),\n         plot_background=element_rect(fill='white'),\n         axis_text_y=element_text(margin={'r': 5}, color='gray', size=9)    # new\n         )\n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nWhat we could have done different:\n\nAfter we set the x and y positions in th the top and bottom dataframes, we could have concatenated them back together. Then, that Layers trick would not save us much.\n\nPro tip: Save the plot as a pdf.\n\n\n\n\nConditinous data recorded at discrete time intervals over many cycles\nRead data\n\nflights = pd.read_csv('data/flights.csv')\nmonths = flights['month'].unique()  # Months ordered January, ..., December\nflights['month'] = pd.Categorical(flights['month'], categories=months)\nflights.head()\n\n\n\n\n\n\n\n\nyear\nmonth\npassengers\n\n\n\n\n0\n1949\nJanuary\n112\n\n\n1\n1949\nFebruary\n118\n\n\n2\n1949\nMarch\n132\n\n\n3\n1949\nApril\n129\n\n\n4\n1949\nMay\n121\n\n\n\n\n\n\n\n\n# We use 'factor(year)' -- a discrete -- instead of 'year' so that all the years\n# are displayed along the x-axis.\n# The .95s create spacing between the tiles.\n\n(ggplot(flights, aes('factor(year)', 'month', fill='passengers'))\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers'), size=9)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat looks like what we want, but it could do with a few tweaks. First the contrast between the tiles and the text is not good for the lower passenger numbers. We use pd.cut to partition the number of passengers into two discrete groups.\n\nflights['p_group'] = pd.cut(flights['passengers'], (0, 300, 1000), labels=(\"low\", 'high'))\nflights.head()\n\n\n\n\n\n\n\n\nyear\nmonth\npassengers\np_group\n\n\n\n\n0\n1949\nJanuary\n112\nlow\n\n\n1\n1949\nFebruary\n118\nlow\n\n\n2\n1949\nMarch\n132\nlow\n\n\n3\n1949\nApril\n129\nlow\n\n\n4\n1949\nMay\n121\nlow\n\n\n\n\n\n\n\n\n(ggplot(flights, aes('factor(year)', 'month', fill='passengers'))\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers', color='p_group'), size=9, show_legend=False)  # modified\n + scale_color_manual(['white', 'black']) # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nLast tweaks, put January at the top and remove the axis ticks and plot background.\n\n# Gallery Plot\n\n(ggplot(flights, aes('factor(year)', 'month', fill='passengers'))\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers', color='p_group'), size=9, show_legend=False)\n + scale_color_manual(['white', 'black']) # new\n + scale_y_discrete(limits=months[::-1])          # new\n + theme(                                         # new\n     axis_ticks=element_blank(),\n     panel_background=element_rect(fill='white')\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can get similar results if you replace\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers', color='p_group'), size=9, show_legend=False)\nwith\n+ geom_label(aes(label='passengers', color='p_group'), size=9, show_legend=False)\nCredit: This example is a recreation of this seaborn example.\n\nSource: Periodic Table of Elements"
  },
  {
    "objectID": "reference/geom_tile.html#parameters",
    "href": "reference/geom_tile.html#parameters",
    "title": "geom_tile",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\n\n\n\n\nfill\n\n\n#333333\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.1\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/geom_tile.html#see-also",
    "href": "reference/geom_tile.html#see-also",
    "title": "geom_tile",
    "section": "",
    "text": "plotnine.geoms.geom_rect"
  },
  {
    "objectID": "reference/geom_tile.html#examples",
    "href": "reference/geom_tile.html#examples",
    "title": "geom_tile",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_tile,\n    geom_text,\n    scale_y_reverse,\n    scale_y_discrete,\n    scale_fill_brewer,\n    scale_color_manual,\n    coord_equal,\n    theme,\n    theme_void,\n    element_blank,\n    element_rect,\n    element_text,\n)\n\n\n\nGraphing of highly organised tabular information\nRead the data.\n\nelements = pd.read_csv('data/elements.csv')\nelements.head()\n\n\n\n\n\n\n\n\natomic number\nsymbol\nname\natomic mass\nCPK\nelectronic configuration\nelectronegativity\natomic radius\nion radius\nvan der Waals radius\n...\nEA\nstandard state\nbonding type\nmelting point\nboiling point\ndensity\nmetal\nyear discovered\ngroup\nperiod\n\n\n\n\n0\n1\nH\nHydrogen\n1.00794\n#FFFFFF\n1s1\n2.20\n37.0\nNaN\n120.0\n...\n-73.0\ngas\ndiatomic\n14.0\n20.0\n0.00009\nnonmetal\n1766\n1\n1\n\n\n1\n2\nHe\nHelium\n4.002602\n#D9FFFF\n1s2\nNaN\n32.0\nNaN\n140.0\n...\n0.0\ngas\natomic\nNaN\n4.0\n0.00000\nnoble gas\n1868\n18\n1\n\n\n2\n3\nLi\nLithium\n6.941\n#CC80FF\n[He] 2s1\n0.98\n134.0\n76 (+1)\n182.0\n...\n-60.0\nsolid\nmetallic\n454.0\n1615.0\n0.54000\nalkali metal\n1817\n1\n2\n\n\n3\n4\nBe\nBeryllium\n9.012182\n#C2FF00\n[He] 2s2\n1.57\n90.0\n45 (+2)\nNaN\n...\n0.0\nsolid\nmetallic\n1560.0\n2743.0\n1.85000\nalkaline earth metal\n1798\n2\n2\n\n\n4\n5\nB\nBoron\n10.811\n#FFB5B5\n[He] 2s2 2p1\n2.04\n82.0\n27 (+3)\nNaN\n...\n-27.0\nsolid\ncovalent network\n2348.0\n4273.0\n2.46000\nmetalloid\n1807\n13\n2\n\n\n\n\n5 rows × 21 columns\n\n\n\nAlter the data types of the information that will be plotted. This makes it convenient to work with.\n\nelements['group'] = [-1 if g == '-' else int(g) for g in elements.group]\nelements['bonding type'] = elements['bonding type'].astype('category')\nelements['metal'] = elements['metal'].astype('category')\nelements['atomic_number'] = elements['atomic number'].astype(str)\n\nThe periodic table has two tables, a top and bottom. The elements in the top have groups, and those in the bottom have no groups. We make separate dataframes for both – they have different alignments.\n\ntop = elements.query('group != -1').copy()\nbottom = elements.query('group == -1').copy()\n\nThe top table is nice and well behaving. The x location of the elements indicate the group and the y locations the period.\n\ntop['x'] = top.group\ntop['y'] = top.period\n\nThe bottom table has 2 rows, with the atomic number increasing to the right. We create an x based on the atomic number and add a horizontal shift. As the dataframe is ordered by atomic number, the operation is easier. The bottom elements are labelled with a “period”. We add a vertical shift to give us a good y location that gives the appearance of two tables.\n\nnrows = 2\nhshift = 3.5\nvshift = 3\nbottom['x'] = np.tile(np.arange(len(bottom)//nrows), nrows) + hshift\nbottom['y'] = bottom.period + vshift\n\nWe will be plotting using tiles and we want to have some space between the tiles. We have set the x and y locations above to take up a unit of space. To get a good effect, the tile dimensions should be less than 1.\n\ntile_width = 0.95\ntile_height = 0.95\n\nFirst peak\n\n(ggplot(aes('x', 'y'))\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe table upside down. We could have been more careful when creating the y locations since the periods are drawn in descending order. But, we can fix that with a reverse scale.\n\n(ggplot(aes('x', 'y'))\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + scale_y_reverse() # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nLet us apply some color to it.\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')  # new\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + scale_y_reverse()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\nGoal: To add text to the tiles\nThere are four pieces of text that we shall add to the tiles, that is 4 geom_text additions. As we have two tables, that comes to 8 geom_text additions. When any geom is added to a ggplot object, behind the scenes a layer is created and added. We can create a group of layers that can be added to a ggplot object in one go using a list.\nWe use a function that accepts a dataframe, and returns a list of geoms.\n\ndef inner_text(data):\n    layers = [geom_text(data, aes(label='atomic_number'), nudge_x=-0.40, nudge_y=0.40,\n                        ha='left', va='top', fontweight='normal', size=6),\n              geom_text(data, aes(label='symbol'), nudge_y=.1, size=9),\n              geom_text(data, aes(label='name'), nudge_y=-0.125, fontweight='normal', size=4.5),\n              geom_text(data, aes(label='atomic mass'), nudge_y=-.3, fontweight='normal', size=4.5)]\n    return layers\n\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)    # new\n + inner_text(bottom) # new\n + scale_y_reverse()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nIt is crowded in there and the tiles do not have equal dimentions. Use the theme create a larger figure. coord_equal give us equal units along the axes, this makes the tiles square.\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + scale_y_reverse()\n + coord_equal(expand=False)   # new\n + theme(figure_size=(12, 6))  # new\n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nIt is has all the information we want, except one for complication. Elements Lu and Lr also belong in the bottom table. One way to show this duality is to have tiles with two colors split horizontally.\nThe colors are determined by the metal field, and we know the x and y locations. We create a dataframe with this information to create a half-tile. A half-tile is centered at the quarter mark.\n\nsplit_df = pd.DataFrame({\n    'x': 3-tile_width/4,\n    'y': [6, 7],\n    'metal': pd.Categorical(['lanthanoid', 'actinoid'])\n})\n\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(split_df, aes(width=tile_width/2, height=tile_height))  # new\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + scale_y_reverse()\n + coord_equal(expand=False)\n + theme(figure_size=(12, 6))\n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nChange the fill color for a different look and use a theme that clears out all the clutter.\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(split_df, aes(width=tile_width/2, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + scale_y_reverse()\n + scale_fill_brewer(type='qual', palette=3)         # new\n + coord_equal(expand=False)\n + theme_void()                                      # new\n + theme(figure_size=(12, 6),\n         plot_background=element_rect(fill='white')) # new\n        \n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nAdd the group number along the top most row of each column, and period number along the left side of the top table.\nFor the period number, we set the breaks on the y scale.\n\n# The location of the group number is the top most (and therefore smallest period)\n# element with the group\ngroupdf = top.groupby(\n    'group'\n).agg(\n    y=('period', np.min)\n).reset_index()\n\nFinally,\n\n# Gallery Plot\n\n(ggplot(aes('x', 'y'))\n + aes(fill='metal')\n + geom_tile(top, aes(width=tile_width, height=tile_height))\n + geom_tile(split_df, aes(width=tile_width/2, height=tile_height))\n + geom_tile(bottom, aes(width=tile_width, height=tile_height))\n + inner_text(top)\n + inner_text(bottom)\n + geom_text(groupdf, aes('group', 'y', label='group'), color='gray', nudge_y=.525,\n             va='bottom',fontweight='normal', size=9, inherit_aes=False)    # new\n + scale_y_reverse(breaks=range(1, 8), limits=(0, 10.5))                    # modified\n + scale_fill_brewer(type='qual', palette=3) \n + coord_equal(expand=False)\n + theme_void()\n + theme(figure_size=(12, 6),\n         plot_background=element_rect(fill='white'),\n         axis_text_y=element_text(margin={'r': 5}, color='gray', size=9)    # new\n         )\n)\n\n\n\n\n&lt;Figure Size: (1200 x 600)&gt;\n\n\nWhat we could have done different:\n\nAfter we set the x and y positions in th the top and bottom dataframes, we could have concatenated them back together. Then, that Layers trick would not save us much.\n\nPro tip: Save the plot as a pdf.\n\n\n\n\nConditinous data recorded at discrete time intervals over many cycles\nRead data\n\nflights = pd.read_csv('data/flights.csv')\nmonths = flights['month'].unique()  # Months ordered January, ..., December\nflights['month'] = pd.Categorical(flights['month'], categories=months)\nflights.head()\n\n\n\n\n\n\n\n\nyear\nmonth\npassengers\n\n\n\n\n0\n1949\nJanuary\n112\n\n\n1\n1949\nFebruary\n118\n\n\n2\n1949\nMarch\n132\n\n\n3\n1949\nApril\n129\n\n\n4\n1949\nMay\n121\n\n\n\n\n\n\n\n\n# We use 'factor(year)' -- a discrete -- instead of 'year' so that all the years\n# are displayed along the x-axis.\n# The .95s create spacing between the tiles.\n\n(ggplot(flights, aes('factor(year)', 'month', fill='passengers'))\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers'), size=9)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat looks like what we want, but it could do with a few tweaks. First the contrast between the tiles and the text is not good for the lower passenger numbers. We use pd.cut to partition the number of passengers into two discrete groups.\n\nflights['p_group'] = pd.cut(flights['passengers'], (0, 300, 1000), labels=(\"low\", 'high'))\nflights.head()\n\n\n\n\n\n\n\n\nyear\nmonth\npassengers\np_group\n\n\n\n\n0\n1949\nJanuary\n112\nlow\n\n\n1\n1949\nFebruary\n118\nlow\n\n\n2\n1949\nMarch\n132\nlow\n\n\n3\n1949\nApril\n129\nlow\n\n\n4\n1949\nMay\n121\nlow\n\n\n\n\n\n\n\n\n(ggplot(flights, aes('factor(year)', 'month', fill='passengers'))\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers', color='p_group'), size=9, show_legend=False)  # modified\n + scale_color_manual(['white', 'black']) # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nLast tweaks, put January at the top and remove the axis ticks and plot background.\n\n# Gallery Plot\n\n(ggplot(flights, aes('factor(year)', 'month', fill='passengers'))\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers', color='p_group'), size=9, show_legend=False)\n + scale_color_manual(['white', 'black']) # new\n + scale_y_discrete(limits=months[::-1])          # new\n + theme(                                         # new\n     axis_ticks=element_blank(),\n     panel_background=element_rect(fill='white')\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can get similar results if you replace\n + geom_tile(aes(width=.95, height=.95))\n + geom_text(aes(label='passengers', color='p_group'), size=9, show_legend=False)\nwith\n+ geom_label(aes(label='passengers', color='p_group'), size=9, show_legend=False)\nCredit: This example is a recreation of this seaborn example.\n\nSource: Periodic Table of Elements"
  },
  {
    "objectID": "reference/geom_vline.html",
    "href": "reference/geom_vline.html",
    "title": "geom_vline",
    "section": "",
    "text": "geoms.geom_vline(self, mapping=None, data=None, **kwargs)\nVertical line\nUsage\ngeom_vline(mapping=None, data=None, stat='identity', position='identity',\n           na_rm=False, inherit_aes=False, show_legend=None, raster=False,\n           **kwargs)\nOnly the data and mapping can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the stat.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nxintercept\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: False) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format.\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_vline,\n    facet_grid,\n    labs,\n)\nfrom plotnine.data import mpg\n\n\n\ngeom_vline() draws a vertical line, and is useful as a guide.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nIt’s useful to use geom_vline() with some data, so we start with a basic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd a vertical line to the scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=5) # add one vertical line\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add many vertical lines:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=[4,5,7]) # add many vertical lines using a list\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=[4,5,7],\n                 colour=['red','orange','green'],     # add colour\n                 size=[1,2,3],                          # set line thickness\n                 linetype='dotted'                      # set line type\n                ) \n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd vertical lines to a facet plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=5) # add a vertical line...\n    + facet_grid('drv ~ .')      # ... to a facet plot\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Vertical line"
  },
  {
    "objectID": "reference/geom_vline.html#parameters",
    "href": "reference/geom_vline.html#parameters",
    "title": "geom_vline",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nxintercept\n\n\n\n\n\n\nalpha\n\n\n1\n\n\n\n\ncolor\n\n\nblack\n\n\n\n\ngroup\n\n\n\n\n\n\nlinetype\n\n\nsolid\n\n\n\n\nsize\n\n\n0.5\n\n\n\n\nThe bold aesthetics are required.\n\n\nNone\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. stat : str or stat, optional (default: ~plotnine.stats.stat_identity) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values. inherit_aes : bool, optional (default: False) If False, overrides the default aesthetics. show_legend : bool or dict, optional (default: None) Whether this layer should be included in the legends. None the default, includes any aesthetics that are mapped. If a bool, False never includes and True always includes. A dict can be used to exclude specific aesthetis of the layer from showing in the legend. e.g :py:show_legend={'color': False}, any other aesthetic are included by default. raster : bool, optional (default: False) If True, draw onto this layer a raster (bitmap) object even ifthe final image is in vector format."
  },
  {
    "objectID": "reference/geom_vline.html#examples",
    "href": "reference/geom_vline.html#examples",
    "title": "geom_vline",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_vline,\n    facet_grid,\n    labs,\n)\nfrom plotnine.data import mpg\n\n\n\ngeom_vline() draws a vertical line, and is useful as a guide.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nIt’s useful to use geom_vline() with some data, so we start with a basic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd a vertical line to the scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=5) # add one vertical line\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add many vertical lines:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=[4,5,7]) # add many vertical lines using a list\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=[4,5,7],\n                 colour=['red','orange','green'],     # add colour\n                 size=[1,2,3],                          # set line thickness\n                 linetype='dotted'                      # set line type\n                ) \n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd vertical lines to a facet plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_vline(xintercept=5) # add a vertical line...\n    + facet_grid('drv ~ .')      # ... to a facet plot\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: Vertical line"
  },
  {
    "objectID": "reference/ggplot.html",
    "href": "reference/ggplot.html",
    "title": "ggplot",
    "section": "",
    "text": "ggplot(self, data=None, mapping=None, environment=None)\nCreate a new ggplot object\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nDefault data for plot. Every layer that does not have data of its own will use this one.\n\n\nNone\n\n\n\n\nmapping\n\n\naes\n\n\nDefault aesthetics mapping for the plot. These will be used by all layers unless specifically overridden.\n\n\nNone\n\n\n\n\nenvironment\n\n\n~patsy.Eval.EvalEnvironment\n\n\nIf a variable defined in the aesthetic mapping is not found in the data, ggplot will look for it in this namespace. It defaults to using the environment/namespace. in which ggplot() is called.\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndraw\nRender the complete plot\n\n\nsave\nSave a ggplot object as an image file\n\n\nsave_helper\nCreate MPL figure that will be saved\n\n\n\n\n\nggplot.draw(self, show=False)\nRender the complete plot\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nshow\n\n\nbool (default: False)\n\n\nWhether to show the plot.\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n~matplotlib.figure.Figure\n\n\nMatplotlib figure\n\n\n\n\n\n\n\n\nggplot.save(self, filename=None, format=None, path='', width=None, height=None, units='in', dpi=None, limitsize=True, verbose=True, **kwargs)\nSave a ggplot object as an image file\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfilename\n\n\nstr | pathlib.Path\n\n\nFile name to write the plot to. If not specified, a name like “plotnine-save-.” is used.\n\n\nNone\n\n\n\n\nformat\n\n\nstr\n\n\nImage format to use, automatically extract from file name extension.\n\n\nNone\n\n\n\n\npath\n\n\nstr\n\n\nPath to save plot to (if you just want to set path and not filename).\n\n\n''\n\n\n\n\nwidth\n\n\nnumber\n\n\nWidth (defaults to value set by the theme). If specified the height must also be given.\n\n\nNone\n\n\n\n\nheight\n\n\nnumber\n\n\nHeight (defaults to value set by the theme). If specified the width must also be given.\n\n\nNone\n\n\n\n\nunits\n\n\nstr\n\n\nUnits for width and height when either one is explicitly specified (in, cm, or mm).\n\n\n'in'\n\n\n\n\ndpi\n\n\nfloat\n\n\nDPI to use for raster graphics. If None, defaults to using the dpi of theme, if none is set then a dpi of 100.\n\n\nNone\n\n\n\n\nlimitsize\n\n\nbool\n\n\nIf True (the default), ggsave will not save images larger than 50x50 inches, to prevent the common error of specifying dimensions in pixels.\n\n\nTrue\n\n\n\n\nverbose\n\n\nbool\n\n\nIf True, print the saving information.\n\n\nTrue\n\n\n\n\nkwargs\n\n\ndict\n\n\nAdditional arguments to pass to matplotlib savefig().\n\n\n{}\n\n\n\n\n\n\n\n\nggplot.save_helper(self, filename=None, format=None, path=None, width=None, height=None, units='in', dpi=None, limitsize=True, verbose=True, **kwargs)\n\n\nThis method has the same arguments as ggplot.save. Use it to get access to the figure that will be saved."
  },
  {
    "objectID": "reference/ggplot.html#parameters",
    "href": "reference/ggplot.html#parameters",
    "title": "ggplot",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nDefault data for plot. Every layer that does not have data of its own will use this one.\n\n\nNone\n\n\n\n\nmapping\n\n\naes\n\n\nDefault aesthetics mapping for the plot. These will be used by all layers unless specifically overridden.\n\n\nNone\n\n\n\n\nenvironment\n\n\n~patsy.Eval.EvalEnvironment\n\n\nIf a variable defined in the aesthetic mapping is not found in the data, ggplot will look for it in this namespace. It defaults to using the environment/namespace. in which ggplot() is called.\n\n\nNone"
  },
  {
    "objectID": "reference/ggplot.html#methods",
    "href": "reference/ggplot.html#methods",
    "title": "ggplot",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ndraw\nRender the complete plot\n\n\nsave\nSave a ggplot object as an image file\n\n\nsave_helper\nCreate MPL figure that will be saved\n\n\n\n\n\nggplot.draw(self, show=False)\nRender the complete plot\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nshow\n\n\nbool (default: False)\n\n\nWhether to show the plot.\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n~matplotlib.figure.Figure\n\n\nMatplotlib figure\n\n\n\n\n\n\n\n\nggplot.save(self, filename=None, format=None, path='', width=None, height=None, units='in', dpi=None, limitsize=True, verbose=True, **kwargs)\nSave a ggplot object as an image file\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nfilename\n\n\nstr | pathlib.Path\n\n\nFile name to write the plot to. If not specified, a name like “plotnine-save-.” is used.\n\n\nNone\n\n\n\n\nformat\n\n\nstr\n\n\nImage format to use, automatically extract from file name extension.\n\n\nNone\n\n\n\n\npath\n\n\nstr\n\n\nPath to save plot to (if you just want to set path and not filename).\n\n\n''\n\n\n\n\nwidth\n\n\nnumber\n\n\nWidth (defaults to value set by the theme). If specified the height must also be given.\n\n\nNone\n\n\n\n\nheight\n\n\nnumber\n\n\nHeight (defaults to value set by the theme). If specified the width must also be given.\n\n\nNone\n\n\n\n\nunits\n\n\nstr\n\n\nUnits for width and height when either one is explicitly specified (in, cm, or mm).\n\n\n'in'\n\n\n\n\ndpi\n\n\nfloat\n\n\nDPI to use for raster graphics. If None, defaults to using the dpi of theme, if none is set then a dpi of 100.\n\n\nNone\n\n\n\n\nlimitsize\n\n\nbool\n\n\nIf True (the default), ggsave will not save images larger than 50x50 inches, to prevent the common error of specifying dimensions in pixels.\n\n\nTrue\n\n\n\n\nverbose\n\n\nbool\n\n\nIf True, print the saving information.\n\n\nTrue\n\n\n\n\nkwargs\n\n\ndict\n\n\nAdditional arguments to pass to matplotlib savefig().\n\n\n{}\n\n\n\n\n\n\n\n\nggplot.save_helper(self, filename=None, format=None, path=None, width=None, height=None, units='in', dpi=None, limitsize=True, verbose=True, **kwargs)\n\n\nThis method has the same arguments as ggplot.save. Use it to get access to the figure that will be saved."
  },
  {
    "objectID": "reference/guide.html",
    "href": "reference/guide.html",
    "title": "guide",
    "section": "",
    "text": "guide\nguides.guide"
  },
  {
    "objectID": "reference/guide_legend.html",
    "href": "reference/guide_legend.html",
    "title": "guide_legend",
    "section": "",
    "text": "guides.guide_legend()\nLegend guide\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nnrow\n\n\nint\n\n\nNumber of rows of legends.\n\n\nrequired\n\n\n\n\nncol\n\n\nint\n\n\nNumber of columns of legends.\n\n\nrequired\n\n\n\n\nbyrow\n\n\nbool\n\n\nWhether to fill the legend row-wise or column-wise.\n\n\nrequired\n\n\n\n\nkeywidth\n\n\nfloat\n\n\nWidth of the legend key.\n\n\nrequired\n\n\n\n\nkeyheight\n\n\nfloat\n\n\nHeight of the legend key.\n\n\nrequired\n\n\n\n\nkwargs\n\n\ndict\n\n\nParameters passed on to .guide\n\n\nrequired"
  },
  {
    "objectID": "reference/guide_legend.html#parameters",
    "href": "reference/guide_legend.html#parameters",
    "title": "guide_legend",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nnrow\n\n\nint\n\n\nNumber of rows of legends.\n\n\nrequired\n\n\n\n\nncol\n\n\nint\n\n\nNumber of columns of legends.\n\n\nrequired\n\n\n\n\nbyrow\n\n\nbool\n\n\nWhether to fill the legend row-wise or column-wise.\n\n\nrequired\n\n\n\n\nkeywidth\n\n\nfloat\n\n\nWidth of the legend key.\n\n\nrequired\n\n\n\n\nkeyheight\n\n\nfloat\n\n\nHeight of the legend key.\n\n\nrequired\n\n\n\n\nkwargs\n\n\ndict\n\n\nParameters passed on to .guide\n\n\nrequired"
  },
  {
    "objectID": "reference/huron.html",
    "href": "reference/huron.html",
    "title": "huron",
    "section": "",
    "text": "huron\ndata.huron\nLevel of Lake Huron 1875–1972\n.. rubric:: Description\nAnnual measurements of the level, in feet, of Lake Huron 1875–1972.\n.. rubric:: Format\n========= ============== Column Description ========= ============== year Year level Water level decade Decade ========= ==============\n.. rubric:: Source\nBrockwell, P. J. and Davis, R. A. (1991). Time Series and Forecasting Methods. Second edition. Springer, New York. Series A, page 555.\nBrockwell, P. J. and Davis, R. A. (1996). Introduction to Time Series and Forecasting. Springer, New York. Sections 5.1 and 7.6."
  },
  {
    "objectID": "reference/labelling.as_labeller.html",
    "href": "reference/labelling.as_labeller.html",
    "title": "labelling.as_labeller",
    "section": "",
    "text": "facets.labelling.as_labeller(x=None, default=label_value, multi_line=True)\nCoerse to labeller\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nfunction | dict\n\n\nObject to coerce\n\n\nNone\n\n\n\n\ndefault\n\n\nstr | function\n\n\nDefault labeller. If it is a string, it should be the name of one the labelling functions provided by plotnine.\n\n\nlabel_value\n\n\n\n\nmulti_line\n\n\nbool\n\n\nWhether to place each variable on a separate line\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nlabeller\n\n\nLabelling function"
  },
  {
    "objectID": "reference/labelling.as_labeller.html#parameters",
    "href": "reference/labelling.as_labeller.html#parameters",
    "title": "labelling.as_labeller",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nfunction | dict\n\n\nObject to coerce\n\n\nNone\n\n\n\n\ndefault\n\n\nstr | function\n\n\nDefault labeller. If it is a string, it should be the name of one the labelling functions provided by plotnine.\n\n\nlabel_value\n\n\n\n\nmulti_line\n\n\nbool\n\n\nWhether to place each variable on a separate line\n\n\nTrue"
  },
  {
    "objectID": "reference/labelling.as_labeller.html#returns",
    "href": "reference/labelling.as_labeller.html#returns",
    "title": "labelling.as_labeller",
    "section": "",
    "text": "Type\n\n\nDescription\n\n\n\n\n\n\nlabeller\n\n\nLabelling function"
  },
  {
    "objectID": "reference/labelling.label_context.html",
    "href": "reference/labelling.label_context.html",
    "title": "labelling.label_context",
    "section": "",
    "text": "facets.labelling.label_context(label_info, multi_line=True, sep=': ')\nCreate an unabiguous label string\nIf facetting over a single variable, label_value is used, if two or more variables then label_both is used.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlabel_info\n\n\nstrip_label_details\n\n\nLabel information\n\n\nrequired\n\n\n\n\nmulti_line\n\n\nbool\n\n\nWhether to place each variable on a separate line\n\n\nTrue\n\n\n\n\nsep\n\n\nstr\n\n\nSeparation between variable name and value\n\n\n': '\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nstr\n\n\nContatenated label values (or pairs of variable names & values)"
  },
  {
    "objectID": "reference/labelling.label_context.html#parameters",
    "href": "reference/labelling.label_context.html#parameters",
    "title": "labelling.label_context",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlabel_info\n\n\nstrip_label_details\n\n\nLabel information\n\n\nrequired\n\n\n\n\nmulti_line\n\n\nbool\n\n\nWhether to place each variable on a separate line\n\n\nTrue\n\n\n\n\nsep\n\n\nstr\n\n\nSeparation between variable name and value\n\n\n': '"
  },
  {
    "objectID": "reference/labelling.label_context.html#returns",
    "href": "reference/labelling.label_context.html#returns",
    "title": "labelling.label_context",
    "section": "",
    "text": "Type\n\n\nDescription\n\n\n\n\n\n\nstr\n\n\nContatenated label values (or pairs of variable names & values)"
  },
  {
    "objectID": "reference/labelling.labeller.html",
    "href": "reference/labelling.labeller.html",
    "title": "labelling.labeller",
    "section": "",
    "text": "facets.labelling.labeller(self, rows=None, cols=None, multi_line=True, default='label_value', **kwargs)\nFacet Strip Labelling\nWhen called with strip_label_details knows how to alter the strip labels along either dimension.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrows\n\n\nstr | function | None\n\n\nHow to label the rows\n\n\nNone\n\n\n\n\ncols\n\n\nstr | function | None\n\n\nHow to label the columns\n\n\nNone\n\n\n\n\nmulti_line\n\n\nbool\n\n\nWhether to place each variable on a separate line\n\n\nTrue\n\n\n\n\ndefault\n\n\nfunction | str\n\n\nFallback labelling function. If it is a string, it should be the name of one the labelling functions provided by plotnine.\n\n\n'label_value'\n\n\n\n\nkwargs\n\n\ndict\n\n\n{variable name : function | string} pairs for renaming variables. A function to rename the variable or a string name.\n\n\n{}"
  },
  {
    "objectID": "reference/labelling.labeller.html#parameters",
    "href": "reference/labelling.labeller.html#parameters",
    "title": "labelling.labeller",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrows\n\n\nstr | function | None\n\n\nHow to label the rows\n\n\nNone\n\n\n\n\ncols\n\n\nstr | function | None\n\n\nHow to label the columns\n\n\nNone\n\n\n\n\nmulti_line\n\n\nbool\n\n\nWhether to place each variable on a separate line\n\n\nTrue\n\n\n\n\ndefault\n\n\nfunction | str\n\n\nFallback labelling function. If it is a string, it should be the name of one the labelling functions provided by plotnine.\n\n\n'label_value'\n\n\n\n\nkwargs\n\n\ndict\n\n\n{variable name : function | string} pairs for renaming variables. A function to rename the variable or a string name.\n\n\n{}"
  },
  {
    "objectID": "reference/layer.html",
    "href": "reference/layer.html",
    "title": "layer",
    "section": "",
    "text": "layer\n\n\n\n\n\nName\nDescription\n\n\n\n\nLayers\nList of layers\n\n\nlayer\nLayer\n\n\n\n\n\nlayer.Layers()\nList of layers\nDuring the plot building pipeline, many operations are applied at all layers in the plot. This class makes those tasks easier.\n\n\n\nlayer.layer(self, geom, stat, *, mapping, data, position, inherit_aes=True, show_legend=None, raster=False)\nLayer\nWhen a geom or stat is added to a ggplot object, it creates a single layer. This class is a representation of that layer.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ngeom\n\n\ngeom\n\n\ngeom to used to draw this layer.\n\n\nrequired\n\n\n\n\nstat\n\n\nstat\n\n\nstat used for the statistical transformation of data in this layer\n\n\nrequired\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings.\n\n\nrequired\n\n\n\n\ndata\n\n\ndataframe\n\n\nData plotted in this layer. If None, the data from the ggplot object will be used.\n\n\nrequired\n\n\n\n\nposition\n\n\nposition\n\n\nPosition object to adjust the geometries in this layer.\n\n\nrequired\n\n\n\n\ninherit_aes\n\n\nbool\n\n\nIf True inherit from the aesthetic mappings of the ggplot object. Default True.\n\n\nTrue\n\n\n\n\nshow_legend\n\n\nbool or None\n\n\nWhether to make up and show a legend for the mappings of this layer. If None then an automatic/good choice is made. Default is None.\n\n\nNone\n\n\n\n\nraster\n\n\nbool, optional (default: False)\n\n\nIf True, draw onto this layer a raster (bitmap) object even if the final image format is vector.\n\n\nFalse\n\n\n\n\n\n\n\nThere is no benefit to manually creating a layer. You should always use a geom or stat.\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncompute_aesthetics\nReturn a dataframe where the columns match the aesthetic mappings\n\n\ncompute_position\nCompute the position of each geometric object\n\n\ncompute_statistic\nCompute & return statistics for this layer\n\n\ndraw\nDraw geom\n\n\nfinish_statistics\nPrepare/modify data for plotting\n\n\nfrom_geom\nCreate a layer given a :class:geom\n\n\nmap_statistic\nMapping aesthetics to computed statistics\n\n\nsetup\nPrepare layer for the plot building\n\n\nsetup_data\nPrepare/modify data for plotting\n\n\nuse_defaults\nPrepare/modify data for plotting\n\n\n\n\n\nlayer.layer.compute_aesthetics(self, plot)\nReturn a dataframe where the columns match the aesthetic mappings\nTransformations like ‘factor(cyl)’ and other expression evaluation are made in here\n\n\n\nlayer.layer.compute_position(self, layout)\nCompute the position of each geometric object\nThis is in concert with the other objects in the panel depending on the position class of the geom\n\n\n\nlayer.layer.compute_statistic(self, layout)\nCompute & return statistics for this layer\n\n\n\nlayer.layer.draw(self, layout, coord)\nDraw geom\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlayout\n\n\nLayout\n\n\nLayout object created when the plot is getting built\n\n\nrequired\n\n\n\n\ncoord\n\n\ncoord\n\n\nType of coordinate axes\n\n\nrequired\n\n\n\n\n\n\n\n\nlayer.layer.finish_statistics(self)\nPrepare/modify data for plotting\n\n\n\nlayer.layer.from_geom(geom)\nCreate a layer given a geom\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ngeom\n\n\ngeom\n\n\ngeom from which a layer will be created\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nlayer\n\n\nLayer that represents the specific geom.\n\n\n\n\n\n\n\n\nlayer.layer.map_statistic(self, plot)\nMapping aesthetics to computed statistics\n\n\n\nlayer.layer.setup(self, plot)\nPrepare layer for the plot building\nGive the layer access to the data, mapping and environment\n\n\n\nlayer.layer.setup_data(self)\nPrepare/modify data for plotting\n\n\n\nlayer.layer.use_defaults(self, data=None, aes_modifiers=None)\nPrepare/modify data for plotting\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData\n\n\nNone\n\n\n\n\naes_modifiers\n\n\ndict\n\n\nExpression to evaluate and replace aesthetics in the data.\n\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_group\nAdd group to the dataframe\n\n\ndiscrete_columns\nReturn a list of the discrete columns in the dataframe\n\n\n\n\n\nlayer.add_group(data)\nAdd group to the dataframe\nThe group depends on the interaction of the discrete aesthetic columns in the dataframe.\n\n\n\nlayer.discrete_columns(df, ignore)\nReturn a list of the discrete columns in the dataframe\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndf\n\n\ndataframe\n\n\nData\n\n\nrequired\n\n\n\n\nignore\n\n\nlist[str]\n\n\nA list|set|tuple with the names of the columns to skip.\n\n\nrequired"
  },
  {
    "objectID": "reference/layer.html#classes",
    "href": "reference/layer.html#classes",
    "title": "layer",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nLayers\nList of layers\n\n\nlayer\nLayer\n\n\n\n\n\nlayer.Layers()\nList of layers\nDuring the plot building pipeline, many operations are applied at all layers in the plot. This class makes those tasks easier.\n\n\n\nlayer.layer(self, geom, stat, *, mapping, data, position, inherit_aes=True, show_legend=None, raster=False)\nLayer\nWhen a geom or stat is added to a ggplot object, it creates a single layer. This class is a representation of that layer.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ngeom\n\n\ngeom\n\n\ngeom to used to draw this layer.\n\n\nrequired\n\n\n\n\nstat\n\n\nstat\n\n\nstat used for the statistical transformation of data in this layer\n\n\nrequired\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings.\n\n\nrequired\n\n\n\n\ndata\n\n\ndataframe\n\n\nData plotted in this layer. If None, the data from the ggplot object will be used.\n\n\nrequired\n\n\n\n\nposition\n\n\nposition\n\n\nPosition object to adjust the geometries in this layer.\n\n\nrequired\n\n\n\n\ninherit_aes\n\n\nbool\n\n\nIf True inherit from the aesthetic mappings of the ggplot object. Default True.\n\n\nTrue\n\n\n\n\nshow_legend\n\n\nbool or None\n\n\nWhether to make up and show a legend for the mappings of this layer. If None then an automatic/good choice is made. Default is None.\n\n\nNone\n\n\n\n\nraster\n\n\nbool, optional (default: False)\n\n\nIf True, draw onto this layer a raster (bitmap) object even if the final image format is vector.\n\n\nFalse\n\n\n\n\n\n\n\nThere is no benefit to manually creating a layer. You should always use a geom or stat.\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncompute_aesthetics\nReturn a dataframe where the columns match the aesthetic mappings\n\n\ncompute_position\nCompute the position of each geometric object\n\n\ncompute_statistic\nCompute & return statistics for this layer\n\n\ndraw\nDraw geom\n\n\nfinish_statistics\nPrepare/modify data for plotting\n\n\nfrom_geom\nCreate a layer given a :class:geom\n\n\nmap_statistic\nMapping aesthetics to computed statistics\n\n\nsetup\nPrepare layer for the plot building\n\n\nsetup_data\nPrepare/modify data for plotting\n\n\nuse_defaults\nPrepare/modify data for plotting\n\n\n\n\n\nlayer.layer.compute_aesthetics(self, plot)\nReturn a dataframe where the columns match the aesthetic mappings\nTransformations like ‘factor(cyl)’ and other expression evaluation are made in here\n\n\n\nlayer.layer.compute_position(self, layout)\nCompute the position of each geometric object\nThis is in concert with the other objects in the panel depending on the position class of the geom\n\n\n\nlayer.layer.compute_statistic(self, layout)\nCompute & return statistics for this layer\n\n\n\nlayer.layer.draw(self, layout, coord)\nDraw geom\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlayout\n\n\nLayout\n\n\nLayout object created when the plot is getting built\n\n\nrequired\n\n\n\n\ncoord\n\n\ncoord\n\n\nType of coordinate axes\n\n\nrequired\n\n\n\n\n\n\n\n\nlayer.layer.finish_statistics(self)\nPrepare/modify data for plotting\n\n\n\nlayer.layer.from_geom(geom)\nCreate a layer given a geom\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ngeom\n\n\ngeom\n\n\ngeom from which a layer will be created\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nlayer\n\n\nLayer that represents the specific geom.\n\n\n\n\n\n\n\n\nlayer.layer.map_statistic(self, plot)\nMapping aesthetics to computed statistics\n\n\n\nlayer.layer.setup(self, plot)\nPrepare layer for the plot building\nGive the layer access to the data, mapping and environment\n\n\n\nlayer.layer.setup_data(self)\nPrepare/modify data for plotting\n\n\n\nlayer.layer.use_defaults(self, data=None, aes_modifiers=None)\nPrepare/modify data for plotting\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndata\n\n\ndataframe\n\n\nData\n\n\nNone\n\n\n\n\naes_modifiers\n\n\ndict\n\n\nExpression to evaluate and replace aesthetics in the data.\n\n\nNone"
  },
  {
    "objectID": "reference/layer.html#functions",
    "href": "reference/layer.html#functions",
    "title": "layer",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_group\nAdd group to the dataframe\n\n\ndiscrete_columns\nReturn a list of the discrete columns in the dataframe\n\n\n\n\n\nlayer.add_group(data)\nAdd group to the dataframe\nThe group depends on the interaction of the discrete aesthetic columns in the dataframe.\n\n\n\nlayer.discrete_columns(df, ignore)\nReturn a list of the discrete columns in the dataframe\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndf\n\n\ndataframe\n\n\nData\n\n\nrequired\n\n\n\n\nignore\n\n\nlist[str]\n\n\nA list|set|tuple with the names of the columns to skip.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_box.html",
    "href": "reference/legend_box.html",
    "title": "legend_box",
    "section": "",
    "text": "themes.themeable.legend_box()\nHow to box up multiple legends\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr in ['vertical', 'horizontal']\n\n\nWhether to stack up the legends vertically or horizontally.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_box.html#parameters",
    "href": "reference/legend_box.html#parameters",
    "title": "legend_box",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr in ['vertical', 'horizontal']\n\n\nWhether to stack up the legends vertically or horizontally.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_box_just.html",
    "href": "reference/legend_box_just.html",
    "title": "legend_box_just",
    "section": "",
    "text": "themes.themeable.legend_box_just()\nJustification of legend boxes\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr\n\n\nOne of left, right, center, top or bottom depending the value of legend_box.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_box_just.html#parameters",
    "href": "reference/legend_box_just.html#parameters",
    "title": "legend_box_just",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr\n\n\nOne of left, right, center, top or bottom depending the value of legend_box.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_box_spacing.html",
    "href": "reference/legend_box_spacing.html",
    "title": "legend_box_spacing",
    "section": "",
    "text": "themes.themeable.legend_box_spacing()\nSpacing between the legend and the plotting area\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_box_spacing.html#parameters",
    "href": "reference/legend_box_spacing.html#parameters",
    "title": "legend_box_spacing",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_entry_spacing.html",
    "href": "reference/legend_entry_spacing.html",
    "title": "legend_entry_spacing",
    "section": "",
    "text": "themes.themeable.legend_entry_spacing()\nSpacing between two entries in a legend\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize in points\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_entry_spacing.html#parameters",
    "href": "reference/legend_entry_spacing.html#parameters",
    "title": "legend_entry_spacing",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize in points\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_entry_spacing_y.html",
    "href": "reference/legend_entry_spacing_y.html",
    "title": "legend_entry_spacing_y",
    "section": "",
    "text": "themes.themeable.legend_entry_spacing_y()\nVertical spacing between two entries in a legend\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize in points\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_entry_spacing_y.html#parameters",
    "href": "reference/legend_entry_spacing_y.html#parameters",
    "title": "legend_entry_spacing_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize in points\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_key_height.html",
    "href": "reference/legend_key_height.html",
    "title": "legend_key_height",
    "section": "",
    "text": "themes.themeable.legend_key_height()\nLegend key background height\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_key_height.html#parameters",
    "href": "reference/legend_key_height.html#parameters",
    "title": "legend_key_height",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_key_width.html",
    "href": "reference/legend_key_width.html",
    "title": "legend_key_width",
    "section": "",
    "text": "themes.themeable.legend_key_width()\nLegend key background width\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_key_width.html#parameters",
    "href": "reference/legend_key_width.html#parameters",
    "title": "legend_key_width",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue in points\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_position.html",
    "href": "reference/legend_position.html",
    "title": "legend_position",
    "section": "",
    "text": "themes.themeable.legend_position()\nLocation of legend\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr or tuple\n\n\nIf a string it should be one of right, left, top bottom or none. If a tuple, it should be two floats each in the approximate range [0, 1]. The tuple specifies the location of the legend in screen coordinates.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_position.html#parameters",
    "href": "reference/legend_position.html#parameters",
    "title": "legend_position",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr or tuple\n\n\nIf a string it should be one of right, left, top bottom or none. If a tuple, it should be two floats each in the approximate range [0, 1]. The tuple specifies the location of the legend in screen coordinates.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_text.html",
    "href": "reference/legend_text.html",
    "title": "legend_text",
    "section": "",
    "text": "themes.themeable.legend_text()\nLegend text\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_text.html#parameters",
    "href": "reference/legend_text.html#parameters",
    "title": "legend_text",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_text_legend.html",
    "href": "reference/legend_text_legend.html",
    "title": "legend_text_legend",
    "section": "",
    "text": "themes.themeable.legend_text_legend()\nLegend text for the common legend\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired\n\n\n\n\n\n\n\nThis themeable exists mainly to cater for differences in how the text is aligned compared to the colorbar. Unless you experience those alignment issues (i.e when using parameters va or ha), you should use legend_text."
  },
  {
    "objectID": "reference/legend_text_legend.html#parameters",
    "href": "reference/legend_text_legend.html#parameters",
    "title": "legend_text_legend",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_text_legend.html#notes",
    "href": "reference/legend_text_legend.html#notes",
    "title": "legend_text_legend",
    "section": "",
    "text": "This themeable exists mainly to cater for differences in how the text is aligned compared to the colorbar. Unless you experience those alignment issues (i.e when using parameters va or ha), you should use legend_text."
  },
  {
    "objectID": "reference/legend_title_align.html",
    "href": "reference/legend_title_align.html",
    "title": "legend_title_align",
    "section": "",
    "text": "themes.themeable.legend_title_align()\nAlignment of legend title\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr or tuple\n\n\nIf a string it should be one of right, left, center, top or bottom.\n\n\nrequired"
  },
  {
    "objectID": "reference/legend_title_align.html#parameters",
    "href": "reference/legend_title_align.html#parameters",
    "title": "legend_title_align",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nstr or tuple\n\n\nIf a string it should be one of right, left, center, top or bottom.\n\n\nrequired"
  },
  {
    "objectID": "reference/line.html",
    "href": "reference/line.html",
    "title": "line",
    "section": "",
    "text": "themes.themeable.line()\nAll line elements\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/line.html#parameters",
    "href": "reference/line.html#parameters",
    "title": "line",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/meat.html",
    "href": "reference/meat.html",
    "title": "meat",
    "section": "",
    "text": "meat\ndata.meat"
  },
  {
    "objectID": "reference/mpg.html",
    "href": "reference/mpg.html",
    "title": "mpg",
    "section": "",
    "text": "mpg\ndata.mpg\nFuel economy data from 1999 and 2008 for 38 popular models of car\n.. rubric:: Description\nThis dataset contains a subset of the fuel economy data that the EPA makes available on http://fueleconomy.gov. It contains only models which had a new release every year between 1999 and 2008 - this was used as a proxy for the popularity of the car.\n.. rubric:: Format\nA data frame with 234 rows and 11 variables\n============ ==================================================== Column Description ============ ==================================================== manufacturer model displ engine displacement, in litres year cyl number of cylinders trans type of transmission drv f = front-wheel drive, r = rear wheel drive, 4 = 4wd cty city miles per gallon hwy highway miles per gallon fl class ============ ===================================================="
  },
  {
    "objectID": "reference/mtcars.html",
    "href": "reference/mtcars.html",
    "title": "mtcars",
    "section": "",
    "text": "mtcars\ndata.mtcars\nMotor Trend Car Road Tests\n.. rubric:: Description\nThe data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).\n.. rubric:: Format\nA data frame with 32 observations on 11 variables.\n====== ========================================= Column Description ====== ========================================= mpg Miles/(US) gallon cyl Number of cylinders disp Displacement (cu.in.) hp Gross horsepower drat Rear axle ratio wt Weight (1000 lbs) qsec 1/4 mile time vs V/S am Transmission (0 = automatic, 1 = manual) gear Number of forward gears carb Number of carburetors ====== =========================================\n.. rubric:: Source\nHenderson and Velleman (1981), Building multiple regression models interactively. Biometrics, 37, 391–411."
  },
  {
    "objectID": "reference/panel_background.html",
    "href": "reference/panel_background.html",
    "title": "panel_background",
    "section": "",
    "text": "themes.themeable.panel_background()\nPanel background\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_background.html#parameters",
    "href": "reference/panel_background.html#parameters",
    "title": "panel_background",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid.html",
    "href": "reference/panel_grid.html",
    "title": "panel_grid",
    "section": "",
    "text": "themes.themeable.panel_grid()\nGrid lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid.html#parameters",
    "href": "reference/panel_grid.html#parameters",
    "title": "panel_grid",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_major_x.html",
    "href": "reference/panel_grid_major_x.html",
    "title": "panel_grid_major_x",
    "section": "",
    "text": "themes.themeable.panel_grid_major_x()\nVertical major grid lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_major_x.html#parameters",
    "href": "reference/panel_grid_major_x.html#parameters",
    "title": "panel_grid_major_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_minor.html",
    "href": "reference/panel_grid_minor.html",
    "title": "panel_grid_minor",
    "section": "",
    "text": "themes.themeable.panel_grid_minor()\nMinor grid lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_minor.html#parameters",
    "href": "reference/panel_grid_minor.html#parameters",
    "title": "panel_grid_minor",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_minor_y.html",
    "href": "reference/panel_grid_minor_y.html",
    "title": "panel_grid_minor_y",
    "section": "",
    "text": "themes.themeable.panel_grid_minor_y()\nHorizontal minor grid lines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_grid_minor_y.html#parameters",
    "href": "reference/panel_grid_minor_y.html#parameters",
    "title": "panel_grid_minor_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_line\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_spacing.html",
    "href": "reference/panel_spacing.html",
    "title": "panel_spacing",
    "section": "",
    "text": "themes.themeable.panel_spacing()\nSpacing between the facet panels\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize in inches of the space between the facet panels\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_spacing.html#parameters",
    "href": "reference/panel_spacing.html#parameters",
    "title": "panel_spacing",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize in inches of the space between the facet panels\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_spacing_y.html",
    "href": "reference/panel_spacing_y.html",
    "title": "panel_spacing_y",
    "section": "",
    "text": "themes.themeable.panel_spacing_y()\nVertical spacing between the facet panels\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize as a fraction of the figure width.\n\n\nrequired\n\n\n\n\n\n\n\nIt is deliberate to have the vertical spacing be a fraction of the width. That means that when panel_spacing_x is the equal panel_spacing_x, the spaces in both directions will be equal."
  },
  {
    "objectID": "reference/panel_spacing_y.html#parameters",
    "href": "reference/panel_spacing_y.html#parameters",
    "title": "panel_spacing_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nSize as a fraction of the figure width.\n\n\nrequired"
  },
  {
    "objectID": "reference/panel_spacing_y.html#notes",
    "href": "reference/panel_spacing_y.html#notes",
    "title": "panel_spacing_y",
    "section": "",
    "text": "It is deliberate to have the vertical spacing be a fraction of the width. That means that when panel_spacing_x is the equal panel_spacing_x, the spaces in both directions will be equal."
  },
  {
    "objectID": "reference/plot_margin.html",
    "href": "reference/plot_margin.html",
    "title": "plot_margin",
    "section": "",
    "text": "themes.themeable.plot_margin()\nPlot Margin\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nMust be in the [0, 1] range. It is specified as a fraction of the figure width and figure height.\n\n\nrequired"
  },
  {
    "objectID": "reference/plot_margin.html#parameters",
    "href": "reference/plot_margin.html#parameters",
    "title": "plot_margin",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nMust be in the [0, 1] range. It is specified as a fraction of the figure width and figure height.\n\n\nrequired"
  },
  {
    "objectID": "reference/position_dodge.html",
    "href": "reference/position_dodge.html",
    "title": "position_dodge",
    "section": "",
    "text": "positions.position_dodge(self, width=None, preserve='total')\nDodge overlaps and place objects side-by-side\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nwidth\n\n\n\n\nDodging width, when different to the width of the individual elements. This is useful when you want to align narrow geoms with wider geoms\n\n\nNone\n\n\n\n\npreserve\n\n\n\n\nShould dodging preserve the total width of all elements at a position, or the width of a single element?\n\n\n'total'"
  },
  {
    "objectID": "reference/position_dodge.html#parameters",
    "href": "reference/position_dodge.html#parameters",
    "title": "position_dodge",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nwidth\n\n\n\n\nDodging width, when different to the width of the individual elements. This is useful when you want to align narrow geoms with wider geoms\n\n\nNone\n\n\n\n\npreserve\n\n\n\n\nShould dodging preserve the total width of all elements at a position, or the width of a single element?\n\n\n'total'"
  },
  {
    "objectID": "reference/position_fill.html",
    "href": "reference/position_fill.html",
    "title": "position_fill",
    "section": "",
    "text": "position_fill\npositions.position_fill()\nNormalise stacked objects to unit height"
  },
  {
    "objectID": "reference/position_jitter.html",
    "href": "reference/position_jitter.html",
    "title": "position_jitter",
    "section": "",
    "text": "positions.position_jitter(self, width=None, height=None, random_state=None)\nJitter points to avoid overplotting\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nwidth\n\n\nfloat\n\n\nProportion to jitter in horizontal direction. Default is 0.4 of the resolution of the data.\n\n\nNone\n\n\n\n\nheight\n\n\nfloat\n\n\nProportion to jitter in vertical direction. Default is 0.4 of the resolution of the data.\n\n\nNone\n\n\n\n\nrandom_state\n\n\nint or ~numpy.random.RandomState\n\n\nSeed or Random number generator to use. If None, then numpy global generator numpy.random is used.\n\n\nNone"
  },
  {
    "objectID": "reference/position_jitter.html#parameters",
    "href": "reference/position_jitter.html#parameters",
    "title": "position_jitter",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nwidth\n\n\nfloat\n\n\nProportion to jitter in horizontal direction. Default is 0.4 of the resolution of the data.\n\n\nNone\n\n\n\n\nheight\n\n\nfloat\n\n\nProportion to jitter in vertical direction. Default is 0.4 of the resolution of the data.\n\n\nNone\n\n\n\n\nrandom_state\n\n\nint or ~numpy.random.RandomState\n\n\nSeed or Random number generator to use. If None, then numpy global generator numpy.random is used.\n\n\nNone"
  },
  {
    "objectID": "reference/position_nudge.html",
    "href": "reference/position_nudge.html",
    "title": "position_nudge",
    "section": "",
    "text": "positions.position_nudge(self, x=0, y=0)\nNudge points\nUseful to nudge labels away from the points being labels.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nfloat\n\n\nHorizontal nudge\n\n\n0\n\n\n\n\ny\n\n\nfloat\n\n\nVertical nudge\n\n\n0"
  },
  {
    "objectID": "reference/position_nudge.html#parameters",
    "href": "reference/position_nudge.html#parameters",
    "title": "position_nudge",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nx\n\n\nfloat\n\n\nHorizontal nudge\n\n\n0\n\n\n\n\ny\n\n\nfloat\n\n\nVertical nudge\n\n\n0"
  },
  {
    "objectID": "reference/presidential.html",
    "href": "reference/presidential.html",
    "title": "presidential",
    "section": "",
    "text": "presidential\ndata.presidential\nTerms of 11 presidents from Eisenhower to Obama.\n.. rubric:: Description\nThe names of each president, the start and end date of their term, and their party of 11 US presidents from Eisenhower to Obama.\n========== =========================== Column Description ========== =========================== name Name of president start Start of presidential term end End of presidential term party Political Party ========== ===========================\n.. rubric:: Format\nA data frame with 11 rows and 4 variables"
  },
  {
    "objectID": "reference/rect.html",
    "href": "reference/rect.html",
    "title": "rect",
    "section": "",
    "text": "themes.themeable.rect()\nAll rectangle elements\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/rect.html#parameters",
    "href": "reference/rect.html#parameters",
    "title": "rect",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/scale.html",
    "href": "reference/scale.html",
    "title": "scale",
    "section": "",
    "text": "scales.scale.scale(self, **kwargs)\nBase class for all scales\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale.html#parameters",
    "href": "reference/scale.html#parameters",
    "title": "scale",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_alpha_continuous.html",
    "href": "reference/scale_alpha_continuous.html",
    "title": "scale_alpha_continuous",
    "section": "",
    "text": "scales.scale_alpha.scale_alpha_continuous(self, range=(0.1, 1), **kwargs)\nContinuous Alpha Scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1. Default is (0.1, 1)\n\n\n(0.1, 1)\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_alpha_continuous.html#parameters",
    "href": "reference/scale_alpha_continuous.html#parameters",
    "title": "scale_alpha_continuous",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1. Default is (0.1, 1)\n\n\n(0.1, 1)\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_alpha_discrete.html",
    "href": "reference/scale_alpha_discrete.html",
    "title": "scale_alpha_discrete",
    "section": "",
    "text": "scales.scale_alpha.scale_alpha_discrete(self, **kwargs)\nDiscrete Alpha Scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1. Default is (0.1, 1)\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_alpha_discrete.html#parameters",
    "href": "reference/scale_alpha_discrete.html#parameters",
    "title": "scale_alpha_discrete",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nRange ([Minimum, Maximum]) of output alpha values. Should be between 0 and 1. Default is (0.1, 1)\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_alpha_manual.html",
    "href": "reference/scale_alpha_manual.html",
    "title": "scale_alpha_manual",
    "section": "",
    "text": "scales.scale_alpha_manual()\nCustom discrete alpha scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nAlpha values (in the [0, 1] range) that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to alpha values.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_alpha_manual.html#parameters",
    "href": "reference/scale_alpha_manual.html#parameters",
    "title": "scale_alpha_manual",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nAlpha values (in the [0, 1] range) that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to alpha values.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_cmap.html",
    "href": "reference/scale_color_cmap.html",
    "title": "scale_color_cmap",
    "section": "",
    "text": "scales.scale_color_cmap(self, cmap_name='viridis', **kwargs)\nCreate color scales using Matplotlib colormaps\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\n'viridis'\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired\n\n\n\n\n\n\n\n\nmatplotlib.cm\nmatplotlib.colors"
  },
  {
    "objectID": "reference/scale_color_cmap.html#parameters",
    "href": "reference/scale_color_cmap.html#parameters",
    "title": "scale_color_cmap",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\n'viridis'\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_cmap.html#see-also",
    "href": "reference/scale_color_cmap.html#see-also",
    "title": "scale_color_cmap",
    "section": "",
    "text": "matplotlib.cm\nmatplotlib.colors"
  },
  {
    "objectID": "reference/scale_color_datetime.html",
    "href": "reference/scale_color_datetime.html",
    "title": "scale_color_datetime",
    "section": "",
    "text": "scales.scale_color_datetime()\nDatetime color scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\nrequired\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_datetime.html#parameters",
    "href": "reference/scale_color_datetime.html#parameters",
    "title": "scale_color_datetime",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\nrequired\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_discrete.html",
    "href": "reference/scale_color_discrete.html",
    "title": "scale_color_discrete",
    "section": "",
    "text": "scales.scale_color_hue(self, h=0.01, l=0.6, s=0.65, color_space='hls', **kwargs)\nQualitative color scale with evenly spaced hues\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nh\n\n\nfloat\n\n\nfirst hue. Must be in the range [0, 1] Default is 0.01\n\n\n0.01\n\n\n\n\nl\n\n\nfloat\n\n\nlightness. Must be in the range [0, 1] Default is 0.6\n\n\n0.6\n\n\n\n\ns\n\n\nfloat\n\n\nsaturation. Must be in the range [0, 1] Default is 0.65\n\n\n0.65\n\n\n\n\ncolorspace\n\n\nstr in ['hls', 'husl']\n\n\nColor space to use. hls &lt;https://en.wikipedia.org/wiki/HSL_and_HSV&gt;_ husl &lt;http://www.husl-colors.org/&gt;_\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is '#7F7F7F'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_discrete.html#parameters",
    "href": "reference/scale_color_discrete.html#parameters",
    "title": "scale_color_discrete",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nh\n\n\nfloat\n\n\nfirst hue. Must be in the range [0, 1] Default is 0.01\n\n\n0.01\n\n\n\n\nl\n\n\nfloat\n\n\nlightness. Must be in the range [0, 1] Default is 0.6\n\n\n0.6\n\n\n\n\ns\n\n\nfloat\n\n\nsaturation. Must be in the range [0, 1] Default is 0.65\n\n\n0.65\n\n\n\n\ncolorspace\n\n\nstr in ['hls', 'husl']\n\n\nColor space to use. hls &lt;https://en.wikipedia.org/wiki/HSL_and_HSV&gt;_ husl &lt;http://www.husl-colors.org/&gt;_\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is '#7F7F7F'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_gradient.html",
    "href": "reference/scale_color_gradient.html",
    "title": "scale_color_gradient",
    "section": "",
    "text": "scales.scale_color_gradient(self, low='#132B43', high='#56B1F7', **kwargs)\nCreate a 2 point color gradient\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlow\n\n\nstr\n\n\nlow color\n\n\n'#132B43'\n\n\n\n\nhigh\n\n\nstr\n\n\nhigh color\n\n\n'#56B1F7'\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired\n\n\n\n\n\n\n\n\n.scale_color_gradient2\n.scale_color_gradientn"
  },
  {
    "objectID": "reference/scale_color_gradient.html#parameters",
    "href": "reference/scale_color_gradient.html#parameters",
    "title": "scale_color_gradient",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlow\n\n\nstr\n\n\nlow color\n\n\n'#132B43'\n\n\n\n\nhigh\n\n\nstr\n\n\nhigh color\n\n\n'#56B1F7'\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_gradient.html#see-also",
    "href": "reference/scale_color_gradient.html#see-also",
    "title": "scale_color_gradient",
    "section": "",
    "text": ".scale_color_gradient2\n.scale_color_gradientn"
  },
  {
    "objectID": "reference/scale_color_gradientn.html",
    "href": "reference/scale_color_gradientn.html",
    "title": "scale_color_gradientn",
    "section": "",
    "text": "scales.scale_color_gradientn(self, colors, values=None, **kwargs)\nCreate a n color gradient\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncolors\n\n\nlist\n\n\nlist of colors\n\n\nrequired\n\n\n\n\nvalues\n\n\nlist\n\n\nlist of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors\n\n\nNone\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired\n\n\n\n\n\n\n\n\n.scale_color_gradient\n.scale_color_gradientn"
  },
  {
    "objectID": "reference/scale_color_gradientn.html#parameters",
    "href": "reference/scale_color_gradientn.html#parameters",
    "title": "scale_color_gradientn",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncolors\n\n\nlist\n\n\nlist of colors\n\n\nrequired\n\n\n\n\nvalues\n\n\nlist\n\n\nlist of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors\n\n\nNone\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_gradientn.html#see-also",
    "href": "reference/scale_color_gradientn.html#see-also",
    "title": "scale_color_gradientn",
    "section": "",
    "text": ".scale_color_gradient\n.scale_color_gradientn"
  },
  {
    "objectID": "reference/scale_color_grey.html",
    "href": "reference/scale_color_grey.html",
    "title": "scale_color_grey",
    "section": "",
    "text": "scales.scale_color_grey(self, start=0.2, end=0.8, **kwargs)\nSequential grey color scale.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstart\n\n\nfloat\n\n\ngrey value at low end of palette. Default is 0.2\n\n\n0.2\n\n\n\n\nend\n\n\nfloat\n\n\ngrey value at high end of palette Default is 0.8\n\n\n0.8\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_grey.html#parameters",
    "href": "reference/scale_color_grey.html#parameters",
    "title": "scale_color_grey",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstart\n\n\nfloat\n\n\ngrey value at low end of palette. Default is 0.2\n\n\n0.2\n\n\n\n\nend\n\n\nfloat\n\n\ngrey value at high end of palette Default is 0.8\n\n\n0.8\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_color_identity.html",
    "href": "reference/scale_color_identity.html",
    "title": "scale_color_identity",
    "section": "",
    "text": "scales.scale_identity.scale_color_identity()\nNo color scaling\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_color_identity.html#parameters",
    "href": "reference/scale_color_identity.html#parameters",
    "title": "scale_color_identity",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_colour_identity.html",
    "href": "reference/scale_colour_identity.html",
    "title": "scale_colour_identity",
    "section": "",
    "text": "scales.scale_color_identity()\nNo color scaling\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_colour_identity.html#parameters",
    "href": "reference/scale_colour_identity.html#parameters",
    "title": "scale_colour_identity",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_continuous.html",
    "href": "reference/scale_continuous.html",
    "title": "scale_continuous",
    "section": "",
    "text": "scales.scale_continuous.scale_continuous(self, **kwargs)\nBase class for all continuous scales\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\n\n\n\nIf using the class directly all arguments must be keyword arguments."
  },
  {
    "objectID": "reference/scale_continuous.html#parameters",
    "href": "reference/scale_continuous.html#parameters",
    "title": "scale_continuous",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_continuous.html#notes",
    "href": "reference/scale_continuous.html#notes",
    "title": "scale_continuous",
    "section": "",
    "text": "If using the class directly all arguments must be keyword arguments."
  },
  {
    "objectID": "reference/scale_discrete.html",
    "href": "reference/scale_discrete.html",
    "title": "scale_discrete",
    "section": "",
    "text": "scales.scale_discrete.scale_discrete()\nBase class for all discrete scales\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_discrete.html#parameters",
    "href": "reference/scale_discrete.html#parameters",
    "title": "scale_discrete",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_cmap.html",
    "href": "reference/scale_fill_cmap.html",
    "title": "scale_fill_cmap",
    "section": "",
    "text": "scales.scale_fill_cmap()\nCreate color scales using Matplotlib colormaps\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\nrequired\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_cmap.html#parameters",
    "href": "reference/scale_fill_cmap.html#parameters",
    "title": "scale_fill_cmap",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\nrequired\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_datetime.html",
    "href": "reference/scale_fill_datetime.html",
    "title": "scale_fill_datetime",
    "section": "",
    "text": "scales.scale_fill_datetime()\nDatetime fill scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\nrequired\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_datetime.html#parameters",
    "href": "reference/scale_fill_datetime.html#parameters",
    "title": "scale_fill_datetime",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\ncmap_name\n\n\nstr\n\n\nA standard Matplotlib colormap name. The default is viridis. For the list of names checkout the output of matplotlib.cm.cmap_d.keys() or see the documentation &lt;http://matplotlib.org/users/colormaps.html&gt;_.\n\n\nrequired\n\n\n\n\nlut\n\n\nNone | int\n\n\nThis is the number of entries desired in the lookup table. Default is None, leave it up Matplotlib.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_discrete.html",
    "href": "reference/scale_fill_discrete.html",
    "title": "scale_fill_discrete",
    "section": "",
    "text": "scales.scale_fill_hue()\nQualitative color scale with evenly spaced hues\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nh\n\n\nfloat\n\n\nfirst hue. Must be in the range [0, 1] Default is 0.01\n\n\nrequired\n\n\n\n\nl\n\n\nfloat\n\n\nlightness. Must be in the range [0, 1] Default is 0.6\n\n\nrequired\n\n\n\n\ns\n\n\nfloat\n\n\nsaturation. Must be in the range [0, 1] Default is 0.65\n\n\nrequired\n\n\n\n\ncolorspace\n\n\nstr in ['hls', 'husl']\n\n\nColor space to use. hls &lt;https://en.wikipedia.org/wiki/HSL_and_HSV&gt;_ husl &lt;http://www.husl-colors.org/&gt;_\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is '#7F7F7F'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_discrete.html#parameters",
    "href": "reference/scale_fill_discrete.html#parameters",
    "title": "scale_fill_discrete",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nh\n\n\nfloat\n\n\nfirst hue. Must be in the range [0, 1] Default is 0.01\n\n\nrequired\n\n\n\n\nl\n\n\nfloat\n\n\nlightness. Must be in the range [0, 1] Default is 0.6\n\n\nrequired\n\n\n\n\ns\n\n\nfloat\n\n\nsaturation. Must be in the range [0, 1] Default is 0.65\n\n\nrequired\n\n\n\n\ncolorspace\n\n\nstr in ['hls', 'husl']\n\n\nColor space to use. hls &lt;https://en.wikipedia.org/wiki/HSL_and_HSV&gt;_ husl &lt;http://www.husl-colors.org/&gt;_\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is '#7F7F7F'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_gradient.html",
    "href": "reference/scale_fill_gradient.html",
    "title": "scale_fill_gradient",
    "section": "",
    "text": "scales.scale_fill_gradient()\nCreate a 2 point color gradient\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlow\n\n\nstr\n\n\nlow color\n\n\nrequired\n\n\n\n\nhigh\n\n\nstr\n\n\nhigh color\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_gradient.html#parameters",
    "href": "reference/scale_fill_gradient.html#parameters",
    "title": "scale_fill_gradient",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nlow\n\n\nstr\n\n\nlow color\n\n\nrequired\n\n\n\n\nhigh\n\n\nstr\n\n\nhigh color\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_gradientn.html",
    "href": "reference/scale_fill_gradientn.html",
    "title": "scale_fill_gradientn",
    "section": "",
    "text": "scales.scale_fill_gradientn()\nCreate a n color gradient\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncolors\n\n\nlist\n\n\nlist of colors\n\n\nrequired\n\n\n\n\nvalues\n\n\nlist\n\n\nlist of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_gradientn.html#parameters",
    "href": "reference/scale_fill_gradientn.html#parameters",
    "title": "scale_fill_gradientn",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncolors\n\n\nlist\n\n\nlist of colors\n\n\nrequired\n\n\n\n\nvalues\n\n\nlist\n\n\nlist of points in the range [0, 1] at which to place each color. Must be the same size as colors. Default to evenly space the colors\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\nna_value\n\n\nstr\n\n\nColor of missing values. Default is 'None'\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_grey.html",
    "href": "reference/scale_fill_grey.html",
    "title": "scale_fill_grey",
    "section": "",
    "text": "scales.scale_fill_grey()\nSequential grey color scale.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstart\n\n\nfloat\n\n\ngrey value at low end of palette. Default is 0.2\n\n\nrequired\n\n\n\n\nend\n\n\nfloat\n\n\ngrey value at high end of palette Default is 0.8\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_grey.html#parameters",
    "href": "reference/scale_fill_grey.html#parameters",
    "title": "scale_fill_grey",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstart\n\n\nfloat\n\n\ngrey value at low end of palette. Default is 0.2\n\n\nrequired\n\n\n\n\nend\n\n\nfloat\n\n\ngrey value at high end of palette Default is 0.8\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_fill_identity.html",
    "href": "reference/scale_fill_identity.html",
    "title": "scale_fill_identity",
    "section": "",
    "text": "scales.scale_identity.scale_fill_identity()\nNo color scaling\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_fill_identity.html#parameters",
    "href": "reference/scale_fill_identity.html#parameters",
    "title": "scale_fill_identity",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_linetype.html",
    "href": "reference/scale_linetype.html",
    "title": "scale_linetype",
    "section": "",
    "text": "scales.scale_linetype(self, **kwargs)\nScale for line patterns\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\n\n\n\nThe available linetypes are 'solid', 'dashed', 'dashdot', 'dotted' If you need more custom linetypes, use scale_linetype_manual"
  },
  {
    "objectID": "reference/scale_linetype.html#parameters",
    "href": "reference/scale_linetype.html#parameters",
    "title": "scale_linetype",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_linetype.html#notes",
    "href": "reference/scale_linetype.html#notes",
    "title": "scale_linetype",
    "section": "",
    "text": "The available linetypes are 'solid', 'dashed', 'dashdot', 'dotted' If you need more custom linetypes, use scale_linetype_manual"
  },
  {
    "objectID": "reference/scale_linetype_identity.html",
    "href": "reference/scale_linetype_identity.html",
    "title": "scale_linetype_identity",
    "section": "",
    "text": "scales.scale_identity.scale_linetype_identity()\nNo linetype scaling\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_linetype_identity.html#parameters",
    "href": "reference/scale_linetype_identity.html#parameters",
    "title": "scale_linetype_identity",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_shape.html",
    "href": "reference/scale_shape.html",
    "title": "scale_shape",
    "section": "",
    "text": "scales.scale_shape(self, unfilled=False, **kwargs)\nScale for shapes\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nunfilled\n\n\nbool\n\n\nIf True, then all shapes will have no interiors that can be a filled.\n\n\nFalse\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_shape.html#parameters",
    "href": "reference/scale_shape.html#parameters",
    "title": "scale_shape",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nunfilled\n\n\nbool\n\n\nIf True, then all shapes will have no interiors that can be a filled.\n\n\nFalse\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_shape_identity.html",
    "href": "reference/scale_shape_identity.html",
    "title": "scale_shape_identity",
    "section": "",
    "text": "scales.scale_identity.scale_shape_identity()\nNo shape scaling\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_shape_identity.html#parameters",
    "href": "reference/scale_shape_identity.html#parameters",
    "title": "scale_shape_identity",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired\n\n\n\n\nguide : None | ‘legend’ Whether to include a legend. Default is None."
  },
  {
    "objectID": "reference/scale_size.html",
    "href": "reference/scale_size.html",
    "title": "scale_size",
    "section": "",
    "text": "scales.scale_size_continuous(self, range=(1, 6), **kwargs)\nContinuous area size scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nMinimum and maximum area of the plotting symbol. It must be of size 2.\n\n\n(1, 6)\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size.html#parameters",
    "href": "reference/scale_size.html#parameters",
    "title": "scale_size",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nMinimum and maximum area of the plotting symbol. It must be of size 2.\n\n\n(1, 6)\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_continuous.html",
    "href": "reference/scale_size_continuous.html",
    "title": "scale_size_continuous",
    "section": "",
    "text": "scales.scale_size_continuous(self, range=(1, 6), **kwargs)\nContinuous area size scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nMinimum and maximum area of the plotting symbol. It must be of size 2.\n\n\n(1, 6)\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_continuous.html#parameters",
    "href": "reference/scale_size_continuous.html#parameters",
    "title": "scale_size_continuous",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nMinimum and maximum area of the plotting symbol. It must be of size 2.\n\n\n(1, 6)\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_discrete.html",
    "href": "reference/scale_size_discrete.html",
    "title": "scale_size_discrete",
    "section": "",
    "text": "scales.scale_size_discrete(self, **kwargs)\nDiscrete area size scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nMinimum and maximum size of the plotting symbol. It must be of size 2.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_discrete.html#parameters",
    "href": "reference/scale_size_discrete.html#parameters",
    "title": "scale_size_discrete",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrange\n\n\narray_like\n\n\nMinimum and maximum size of the plotting symbol. It must be of size 2.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_manual.html",
    "href": "reference/scale_size_manual.html",
    "title": "scale_size_manual",
    "section": "",
    "text": "scales.scale_size_manual()\nCustom discrete size scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nSizes that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to sizes.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_size_manual.html#parameters",
    "href": "reference/scale_size_manual.html#parameters",
    "title": "scale_size_manual",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nvalues\n\n\narray_like | dict\n\n\nSizes that make up the palette. The values will be matched with the limits of the scale or the breaks if provided. If it is a dict then it should map data values to sizes.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. For scales that deal with categoricals, these may be a subset or superset of the categories. Data values that are not in the limits will be treated as missing data and represented with the na_value.\n\n\nrequired\n\n\n\n\ndrop\n\n\nbool\n\n\nWhether to drop unused categories from the scale\n\n\nrequired\n\n\n\n\nna_translate\n\n\nbool\n\n\nIf True translate missing values and show them. If False remove missing values. Default value is True\n\n\nrequired\n\n\n\n\nna_value\n\n\nobject\n\n\nIf na_translate=True, what aesthetic value should be assigned to the missing values. This parameter does not apply to position scales where nan is always placed on the right.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_continuous.html",
    "href": "reference/scale_x_continuous.html",
    "title": "scale_x_continuous",
    "section": "",
    "text": "scales.scale_x_continuous()\nContinuous x position\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport pandas as pd\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_path,\n    scale_x_continuous,\n    scale_y_continuous,\n    guides,\n    theme,\n    element_line,\n    element_rect\n)\nfrom mizani.transforms import trans\n\n\n\nUsing a transformed x-axis to visualise guitar chords\nThe x-axis is transformed to resemble the narrowing width of frets on a 25.5 inch Strat. To do that we create custom transformation.\nThe key parts of any transform object are the transform and inverse functions.\n\nclass frets_trans(trans):\n    \"\"\"\n    Frets Transformation\n    \"\"\"\n    number_of_frets = 23               # Including fret 0\n    domain = (0, number_of_frets-1)\n    \n    @staticmethod\n    def transform(x):\n        x = np.asarray(x)\n        return 25.5 - (25.5 / (2 ** (x/12)))\n    \n    @staticmethod\n    def inverse(x):\n        x = np.asarray(x)\n        return 12 * np.log2(25.5/(25.5-x))\n    \n    @classmethod\n    def breaks_(cls, limits):\n        # Fixed major breaks\n        return cls.domain\n    \n    @classmethod\n    def minor_breaks(cls, major, limits):\n        # The major breaks as passed to this method are in transformed space.\n        # The minor breaks are calculated in data space to reveal the \n        # non-linearity of the scale.\n        _major = cls.inverse(major)\n        minor = cls.transform(np.linspace(*_major, cls.number_of_frets))\n        return minor\n\nThe above transform is different from most in that, breaks and minor breaks do not change. This is common of very specialized scales. It can also be a key requirement when creating graphics for demontration purposes.\nSome chord Data\n\n# Notes: the 0 fret is an open strum, all other frets are played half-way between fret bars.\n# The strings are 1:low E, 2: A, 3: D, 4: G, 5: B, 6: E\nc_chord = pd.DataFrame({\n    'Fret':   [0, 2.5, 1.5, 0, 0.5, 0],\n    'String': [1, 2, 3, 4, 5, 6]\n})\n\n# Sequence based on the number of notes in the chord\nc_chord['Sequence'] = list(range(1, 1+len(c_chord['Fret'])))\n\n# Standard markings for a Stratocaster\nmarkings = pd.DataFrame({\n    'Fret':   [2.5, 4.5, 6.5, 8.5, 11.5, 11.5, 14.5, 16.5, 18.5, 20.5],\n    'String': [3.5, 3.5, 3.5, 3.5, 2, 5, 3.5, 3.5, 3.5, 3.5]\n})\n\nVisualizing the chord\n\n# Look and feel of the graphic\nneck_color = '#FFDDCC'\nfret_color = '#998888'\nstring_color = '#AA9944'\n\nneck_theme = theme(\n    figure_size=(10, 2),\n    panel_background=element_rect(fill=neck_color),\n    panel_grid_major_y=element_line(color=string_color, size=2.2),\n    panel_grid_major_x=element_line(color=fret_color, size=2.2),\n    panel_grid_minor_x=element_line(color=fret_color, size=1)\n)\n\n# Gallery Plot\n\n(ggplot(c_chord, aes('Fret', 'String'))\n + geom_path(aes(color='Sequence'), size=3)\n + geom_point(aes(color='Sequence'), fill='#FFFFFF', size=3)\n + geom_point(data=markings, fill='#000000', size=4)\n + scale_x_continuous(trans=frets_trans)\n + scale_y_continuous(breaks=range(0, 7), minor_breaks=[])\n + guides(color=False)\n + neck_theme\n)\n\n\n\n\n&lt;Figure Size: (1000 x 200)&gt;\n\n\nCredit: This example was motivated by Jonathan Vitale who wanted to create graphics for a guitar scale trainer.\n\nSource: Guitar Neck ###"
  },
  {
    "objectID": "reference/scale_x_continuous.html#parameters",
    "href": "reference/scale_x_continuous.html#parameters",
    "title": "scale_x_continuous",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_continuous.html#examples",
    "href": "reference/scale_x_continuous.html#examples",
    "title": "scale_x_continuous",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_path,\n    scale_x_continuous,\n    scale_y_continuous,\n    guides,\n    theme,\n    element_line,\n    element_rect\n)\nfrom mizani.transforms import trans\n\n\n\nUsing a transformed x-axis to visualise guitar chords\nThe x-axis is transformed to resemble the narrowing width of frets on a 25.5 inch Strat. To do that we create custom transformation.\nThe key parts of any transform object are the transform and inverse functions.\n\nclass frets_trans(trans):\n    \"\"\"\n    Frets Transformation\n    \"\"\"\n    number_of_frets = 23               # Including fret 0\n    domain = (0, number_of_frets-1)\n    \n    @staticmethod\n    def transform(x):\n        x = np.asarray(x)\n        return 25.5 - (25.5 / (2 ** (x/12)))\n    \n    @staticmethod\n    def inverse(x):\n        x = np.asarray(x)\n        return 12 * np.log2(25.5/(25.5-x))\n    \n    @classmethod\n    def breaks_(cls, limits):\n        # Fixed major breaks\n        return cls.domain\n    \n    @classmethod\n    def minor_breaks(cls, major, limits):\n        # The major breaks as passed to this method are in transformed space.\n        # The minor breaks are calculated in data space to reveal the \n        # non-linearity of the scale.\n        _major = cls.inverse(major)\n        minor = cls.transform(np.linspace(*_major, cls.number_of_frets))\n        return minor\n\nThe above transform is different from most in that, breaks and minor breaks do not change. This is common of very specialized scales. It can also be a key requirement when creating graphics for demontration purposes.\nSome chord Data\n\n# Notes: the 0 fret is an open strum, all other frets are played half-way between fret bars.\n# The strings are 1:low E, 2: A, 3: D, 4: G, 5: B, 6: E\nc_chord = pd.DataFrame({\n    'Fret':   [0, 2.5, 1.5, 0, 0.5, 0],\n    'String': [1, 2, 3, 4, 5, 6]\n})\n\n# Sequence based on the number of notes in the chord\nc_chord['Sequence'] = list(range(1, 1+len(c_chord['Fret'])))\n\n# Standard markings for a Stratocaster\nmarkings = pd.DataFrame({\n    'Fret':   [2.5, 4.5, 6.5, 8.5, 11.5, 11.5, 14.5, 16.5, 18.5, 20.5],\n    'String': [3.5, 3.5, 3.5, 3.5, 2, 5, 3.5, 3.5, 3.5, 3.5]\n})\n\nVisualizing the chord\n\n# Look and feel of the graphic\nneck_color = '#FFDDCC'\nfret_color = '#998888'\nstring_color = '#AA9944'\n\nneck_theme = theme(\n    figure_size=(10, 2),\n    panel_background=element_rect(fill=neck_color),\n    panel_grid_major_y=element_line(color=string_color, size=2.2),\n    panel_grid_major_x=element_line(color=fret_color, size=2.2),\n    panel_grid_minor_x=element_line(color=fret_color, size=1)\n)\n\n# Gallery Plot\n\n(ggplot(c_chord, aes('Fret', 'String'))\n + geom_path(aes(color='Sequence'), size=3)\n + geom_point(aes(color='Sequence'), fill='#FFFFFF', size=3)\n + geom_point(data=markings, fill='#000000', size=4)\n + scale_x_continuous(trans=frets_trans)\n + scale_y_continuous(breaks=range(0, 7), minor_breaks=[])\n + guides(color=False)\n + neck_theme\n)\n\n\n\n\n&lt;Figure Size: (1000 x 200)&gt;\n\n\nCredit: This example was motivated by Jonathan Vitale who wanted to create graphics for a guitar scale trainer.\n\nSource: Guitar Neck ###"
  },
  {
    "objectID": "reference/scale_x_datetime.html",
    "href": "reference/scale_x_datetime.html",
    "title": "scale_x_datetime",
    "section": "",
    "text": "scales.scale_x_datetime()\nContinuous x position for datetime data points\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_datetime.html#parameters",
    "href": "reference/scale_x_datetime.html#parameters",
    "title": "scale_x_datetime",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_log10.html",
    "href": "reference/scale_x_log10.html",
    "title": "scale_x_log10",
    "section": "",
    "text": "scales.scale_x_log10()\nContinuous x position log10 transformed scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_log10.html#parameters",
    "href": "reference/scale_x_log10.html#parameters",
    "title": "scale_x_log10",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_sqrt.html",
    "href": "reference/scale_x_sqrt.html",
    "title": "scale_x_sqrt",
    "section": "",
    "text": "scales.scale_x_sqrt()\nContinuous x position sqrt transformed scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_x_sqrt.html#parameters",
    "href": "reference/scale_x_sqrt.html#parameters",
    "title": "scale_x_sqrt",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_continuous.html",
    "href": "reference/scale_y_continuous.html",
    "title": "scale_y_continuous",
    "section": "",
    "text": "scales.scale_y_continuous()\nContinuous y position\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_continuous.html#parameters",
    "href": "reference/scale_y_continuous.html#parameters",
    "title": "scale_y_continuous",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_datetime.html",
    "href": "reference/scale_y_datetime.html",
    "title": "scale_y_datetime",
    "section": "",
    "text": "scales.scale_y_datetime()\nContinuous y position for datetime data points\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_datetime.html#parameters",
    "href": "reference/scale_y_datetime.html#parameters",
    "title": "scale_y_datetime",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ndate_breaks\n\n\nstr\n\n\nA string giving the distance between major breaks. For example '2 weeks', '5 years'. If specified, date_breaks takes precedence over breaks.\n\n\nrequired\n\n\n\n\ndate_labels\n\n\nstr\n\n\nFormat string for the labels. See :ref:strftime &lt;strftime-strptime-behavior&gt;. If specified, date_labels takes precedence over labels.\n\n\nrequired\n\n\n\n\ndate_minor_breaks\n\n\nstr\n\n\nA string giving the distance between minor breaks. For example '2 weeks', '5 years'. If specified, date_minor_breaks takes precedence over minor_breaks.\n\n\nrequired\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_log10.html",
    "href": "reference/scale_y_log10.html",
    "title": "scale_y_log10",
    "section": "",
    "text": "scales.scale_y_log10()\nContinuous y position log10 transformed scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_log10.html#parameters",
    "href": "reference/scale_y_log10.html#parameters",
    "title": "scale_y_log10",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_sqrt.html",
    "href": "reference/scale_y_sqrt.html",
    "title": "scale_y_sqrt",
    "section": "",
    "text": "scales.scale_y_sqrt()\nContinuous y position sqrt transformed scale\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/scale_y_sqrt.html#parameters",
    "href": "reference/scale_y_sqrt.html#parameters",
    "title": "scale_y_sqrt",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbreaks\n\n\narray_like or callable\n\n\nMajor break points. Alternatively, a callable that takes a tuple of limits and returns a list of breaks. Default is to automatically calculate the breaks.\n\n\nrequired\n\n\n\n\nexpand\n\n\ntuple\n\n\nMultiplicative and additive expansion constants that determine how the scale is expanded. If specified must be of length 2 or 4. Specifically the values are in this order:: (mul, add) (mul_low, add_low, mul_high, add_high) For example, - (0, 0) - Do not expand. - (0, 1) - Expand lower and upper limits by 1 unit. - (1, 0) - Expand lower and upper limits by 100%. - (0, 0, 0, 0) - Do not expand, as (0, 0). - (0, 0, 0, 1) - Expand upper limit by 1 unit. - (0, 1, 0.1, 0) - Expand lower limit by 1 unit and upper limit by 10%. - (0, 0, 0.1, 2) - Expand upper limit by 10% plus 2 units. If not specified, suitable defaults are chosen.\n\n\nrequired\n\n\n\n\nname\n\n\nstr\n\n\nName used as the label of the scale. This is what shows up as the axis label or legend title. Suitable defaults are chosen depending on the type of scale.\n\n\nrequired\n\n\n\n\nlabels\n\n\nlist or callable\n\n\nList of str. Labels at the breaks. Alternatively, a callable that takes an array_like of break points as input and returns a list of strings.\n\n\nrequired\n\n\n\n\nlimits\n\n\narray_like\n\n\nLimits of the scale. Most commonly, these are the min & max values for the scales. For scales that deal with categoricals, these may be a subset or superset of the categories.\n\n\nrequired\n\n\n\n\nna_value\n\n\nscalar\n\n\nWhat value to assign to missing values. Default is to assign np.nan.\n\n\nrequired\n\n\n\n\npalette\n\n\ncallable\n\n\nFunction to map data points onto the scale. Most scales define their own palettes.\n\n\nrequired\n\n\n\n\naesthetics\n\n\nlist\n\n\nlist of str. Aesthetics covered by the scale. These are defined by each scale and the user should probably not change them. Have fun.\n\n\nrequired\n\n\n\n\ntrans\n\n\nstr | function\n\n\nName of a trans function or a trans function. See mizani.transforms for possible options.\n\n\nrequired\n\n\n\n\noob\n\n\nfunction\n\n\nFunction to deal with out of bounds (limits) data points. Default is to turn them into np.nan, which then get dropped.\n\n\nrequired\n\n\n\n\nminor_breaks\n\n\nlist - like or int or callable or None\n\n\nIf a list-like, it is the minor breaks points. If an integer, it is the number of minor breaks between any set of major breaks. If a function, it should have the signature func(limits) and return a list-like of consisting of the minor break points. If None, no minor breaks are calculated. The default is to automatically calculate them.\n\n\nrequired\n\n\n\n\nrescaler\n\n\nfunction\n\n\nFunction to rescale data points so that they can be handled by the palette. Default is to rescale them onto the [0, 1] range. Scales that inherit from this class may have another default.\n\n\nrequired"
  },
  {
    "objectID": "reference/seals.html",
    "href": "reference/seals.html",
    "title": "seals",
    "section": "",
    "text": "seals\ndata.seals\nVector field of seal movements.\n.. rubric:: Description\nThis vector field was produced from the data described in Brillinger, D.R., Preisler, H.K., Ager, A.A. and Kie, J.G. “An exploratory data analysis (EDA) of the paths of moving animals”. J. Statistical Planning and Inference 122 (2004), 43-63, using the methods of Brillinger, D.R., “Learning a potential function from a trajectory”, Signal Processing Letters. December (2007).\n.. rubric:: Format\nA data frame with 1155 rows and 4 variables\n=========== =================== Column Description =========== =================== lat Latitude long Longitude delta_long Change in Longitude delta_lat Change in Latitude =========== ===================\n.. rubric:: References\nhttp://www.stat.berkeley.edu/~brill/Papers/jspifinal.pdf"
  },
  {
    "objectID": "reference/stage.html",
    "href": "reference/stage.html",
    "title": "stage",
    "section": "",
    "text": "mapping.stage(self, start=None, after_stat=None, after_scale=None)\nStage allows you evaluating mapping at more than one stage\nYou can evaluate an expression of a variable in a dataframe, and later evaluate an expression that modifies the values mapped to the scale.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstart\n\n\nexpression | array_like | scalar\n\n\nAesthetic expression using primary variables from the layer data.\n\n\nNone\n\n\n\n\nafter_stat\n\n\nexpression\n\n\nAesthetic expression using variables calculated by the stat.\n\n\nNone\n\n\n\n\nafter_scale\n\n\nexpression\n\n\nAesthetic expression using aesthetics of the layer.\n\n\nNone\n\n\n\n\n\n\n\n\n\n%load_ext autoreload\n%autoreload 2\n%aimport plotnine\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    stage,\n    geom_bar,\n    geom_text,\n    geom_bin_2d,\n    stat_bin_2d,\n)\n\n\n\n\ndf = pd.DataFrame({\n    'var1': list('abbcccddddeeeee'),\n    'cat': list('RSRSRSRRRSRSSRS')\n})\n\n(ggplot(df, aes('var1'))\n + geom_bar()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd the corresponding count on top of each bar.\n\n(ggplot(df, aes('var1'))\n + geom_bar()\n + geom_text(aes(label=after_stat('count')), stat='count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdjust the y position so that the counts do not overlap the bars.\n\n(ggplot(df, aes('var1'))\n + geom_bar()\n + geom_text(aes(label=after_stat('count'), y=stage(after_stat='count', after_scale='y+.1')), stat='count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nNote that this will work even nicely for stacked bars where adjustig the position with nudge_y=0.1 would not.\n\n(ggplot(df, aes('var1', fill='cat'))\n + geom_bar()\n + geom_text(aes(label=after_stat('count'), y=stage(after_stat='count', after_scale='y+.1')), stat='count', position='stack')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\n\nnp.random.seed(123)\ndf = pd.DataFrame({\n    'col_1': np.random.rand(1000),\n    'col_2': np.random.rand(1000)\n})\n\n\n(ggplot(df, aes(x='col_1', y='col_2'))\n + geom_bin_2d(position='identity', binwidth=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd counts to the bins. stat_bin_2d bins are specified using retangular minimum and maximum end-points for dimension; we use these values to compute the mid-points at which to place the counts.\nFirst x and y aesthetics are mapped to col_1 and col_2 variables, then after the statistic consumes them and creates xmin, xmax, ymin & ymax values for each bin along with associated count. After the statistic computation the x and y aesthetics do not exist, but we create meaningful values using the minimum and maximum end-points.\nNote that the binning parameters for the geom and stat combination must be the same. In this case it is the binwidth.\n\n(ggplot(df, aes(x='col_1', y='col_2'))\n + geom_bin_2d(position='identity', binwidth=0.1)\n + stat_bin_2d(\n     aes(\n         x=stage(start='col_1', after_stat='(xmin+xmax)/2'),\n         y=stage(start='col_2', after_stat='(ymin+ymax)/2'),\n         label=after_stat('count')\n     ),\n     binwidth=0.1,\n     geom='text',\n     format_string='{:.0f}',\n     size=10\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: stage"
  },
  {
    "objectID": "reference/stage.html#parameters",
    "href": "reference/stage.html#parameters",
    "title": "stage",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstart\n\n\nexpression | array_like | scalar\n\n\nAesthetic expression using primary variables from the layer data.\n\n\nNone\n\n\n\n\nafter_stat\n\n\nexpression\n\n\nAesthetic expression using variables calculated by the stat.\n\n\nNone\n\n\n\n\nafter_scale\n\n\nexpression\n\n\nAesthetic expression using aesthetics of the layer.\n\n\nNone"
  },
  {
    "objectID": "reference/stage.html#examples",
    "href": "reference/stage.html#examples",
    "title": "stage",
    "section": "",
    "text": "%load_ext autoreload\n%autoreload 2\n%aimport plotnine\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    stage,\n    geom_bar,\n    geom_text,\n    geom_bin_2d,\n    stat_bin_2d,\n)\n\n\n\n\ndf = pd.DataFrame({\n    'var1': list('abbcccddddeeeee'),\n    'cat': list('RSRSRSRRRSRSSRS')\n})\n\n(ggplot(df, aes('var1'))\n + geom_bar()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd the corresponding count on top of each bar.\n\n(ggplot(df, aes('var1'))\n + geom_bar()\n + geom_text(aes(label=after_stat('count')), stat='count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdjust the y position so that the counts do not overlap the bars.\n\n(ggplot(df, aes('var1'))\n + geom_bar()\n + geom_text(aes(label=after_stat('count'), y=stage(after_stat='count', after_scale='y+.1')), stat='count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nNote that this will work even nicely for stacked bars where adjustig the position with nudge_y=0.1 would not.\n\n(ggplot(df, aes('var1', fill='cat'))\n + geom_bar()\n + geom_text(aes(label=after_stat('count'), y=stage(after_stat='count', after_scale='y+.1')), stat='count', position='stack')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\n\nnp.random.seed(123)\ndf = pd.DataFrame({\n    'col_1': np.random.rand(1000),\n    'col_2': np.random.rand(1000)\n})\n\n\n(ggplot(df, aes(x='col_1', y='col_2'))\n + geom_bin_2d(position='identity', binwidth=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd counts to the bins. stat_bin_2d bins are specified using retangular minimum and maximum end-points for dimension; we use these values to compute the mid-points at which to place the counts.\nFirst x and y aesthetics are mapped to col_1 and col_2 variables, then after the statistic consumes them and creates xmin, xmax, ymin & ymax values for each bin along with associated count. After the statistic computation the x and y aesthetics do not exist, but we create meaningful values using the minimum and maximum end-points.\nNote that the binning parameters for the geom and stat combination must be the same. In this case it is the binwidth.\n\n(ggplot(df, aes(x='col_1', y='col_2'))\n + geom_bin_2d(position='identity', binwidth=0.1)\n + stat_bin_2d(\n     aes(\n         x=stage(start='col_1', after_stat='(xmin+xmax)/2'),\n         y=stage(start='col_2', after_stat='(ymin+ymax)/2'),\n         label=after_stat('count')\n     ),\n     binwidth=0.1,\n     geom='text',\n     format_string='{:.0f}',\n     size=10\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nSource: stage"
  },
  {
    "objectID": "reference/stage.html#create-a-binned-2d-plot-with-counts",
    "href": "reference/stage.html#create-a-binned-2d-plot-with-counts",
    "title": "stage",
    "section": "",
    "text": "np.random.seed(123)\ndf = pd.DataFrame({\n    'col_1': np.random.rand(1000),\n    'col_2': np.random.rand(1000)\n})\n\n\n(ggplot(df, aes(x='col_1', y='col_2'))\n + geom_bin_2d(position='identity', binwidth=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd counts to the bins. stat_bin_2d bins are specified using retangular minimum and maximum end-points for dimension; we use these values to compute the mid-points at which to place the counts.\nFirst x and y aesthetics are mapped to col_1 and col_2 variables, then after the statistic consumes them and creates xmin, xmax, ymin & ymax values for each bin along with associated count. After the statistic computation the x and y aesthetics do not exist, but we create meaningful values using the minimum and maximum end-points.\nNote that the binning parameters for the geom and stat combination must be the same. In this case it is the binwidth.\n\n(ggplot(df, aes(x='col_1', y='col_2'))\n + geom_bin_2d(position='identity', binwidth=0.1)\n + stat_bin_2d(\n     aes(\n         x=stage(start='col_1', after_stat='(xmin+xmax)/2'),\n         y=stage(start='col_2', after_stat='(ymin+ymax)/2'),\n         label=after_stat('count')\n     ),\n     binwidth=0.1,\n     geom='text',\n     format_string='{:.0f}',\n     size=10\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "reference/stat_bin.html",
    "href": "reference/stat_bin.html",
    "title": "stat_bin",
    "section": "",
    "text": "stats.stat_bin()\nCount cases in each interval\nUsage\nstat_bin(mapping=None, data=None, geom='histogram', position='stack',\n         na_rm=False, boundary=None, closed='right', binwidth=None,\n         center=None, pad=False, breaks=None, bins=None, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nweight\n\n\n\n\n\n\ny\n\n\nafter_stat(‘count’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n.. rubric:: Options for computed aesthetics\n\n::\n\n     'count'    # number of points in bin\n     'density'  # density of points in bin, scaled to integrate to 1\n     'ncount'   # count, scaled to maximum of 1\n     'ndensity' # density, scaled to maximum of 1\n     'ngroup'   # number of points in group\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_histogram) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_stack) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values.\nbinwidth : float, optional (default: None) The width of the bins. The default is to use bins bins that cover the range of the data. You should always override this value, exploring multiple widths to find the best to illustrate the stories in your data. bins : int, optional (default: None) Number of bins. Overridden by binwidth. If None, a number is computed using the freedman-diaconis method. breaks : array-like, optional (default: None) Bin boundaries. This supercedes the binwidth, bins, center and boundary. center : float, optional (default: None) The center of one of the bins. Note that if center is above or below the range of the data, things will be shifted by an appropriate number of widths. To center on integers, for example, use :py:width=1 and :py:center=0, even if 0 i s outside the range of the data. At most one of center and boundary may be specified. boundary : float, optional (default: None) A boundary between two bins. As with center, things are shifted when boundary is outside the range of the data. For example, to center on integers, use :py:width=1 and :py:boundary=0.5, even if 1 is outside the range of the data. At most one of center and boundary may be specified. closed : str, optional (default: right) Which edge of the bins is included, left or right. pad : bool, optional (default: False) If True, adds empty bins at either side of x. This ensures that frequency polygons touch 0."
  },
  {
    "objectID": "reference/stat_bin.html#parameters",
    "href": "reference/stat_bin.html#parameters",
    "title": "stat_bin",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nweight\n\n\n\n\n\n\ny\n\n\nafter_stat(‘count’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n.. rubric:: Options for computed aesthetics\n\n::\n\n     'count'    # number of points in bin\n     'density'  # density of points in bin, scaled to integrate to 1\n     'ncount'   # count, scaled to maximum of 1\n     'ndensity' # density, scaled to maximum of 1\n     'ngroup'   # number of points in group\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_histogram) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_stack) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values.\nbinwidth : float, optional (default: None) The width of the bins. The default is to use bins bins that cover the range of the data. You should always override this value, exploring multiple widths to find the best to illustrate the stories in your data. bins : int, optional (default: None) Number of bins. Overridden by binwidth. If None, a number is computed using the freedman-diaconis method. breaks : array-like, optional (default: None) Bin boundaries. This supercedes the binwidth, bins, center and boundary. center : float, optional (default: None) The center of one of the bins. Note that if center is above or below the range of the data, things will be shifted by an appropriate number of widths. To center on integers, for example, use :py:width=1 and :py:center=0, even if 0 i s outside the range of the data. At most one of center and boundary may be specified. boundary : float, optional (default: None) A boundary between two bins. As with center, things are shifted when boundary is outside the range of the data. For example, to center on integers, use :py:width=1 and :py:boundary=0.5, even if 1 is outside the range of the data. At most one of center and boundary may be specified. closed : str, optional (default: right) Which edge of the bins is included, left or right. pad : bool, optional (default: False) If True, adds empty bins at either side of x. This ensures that frequency polygons touch 0."
  },
  {
    "objectID": "reference/stat_bindot.html",
    "href": "reference/stat_bindot.html",
    "title": "stat_bindot",
    "section": "",
    "text": "stats.stat_bindot()\nBinning for a dot plot\nUsage\nstat_bindot(mapping=None, data=None, geom='dotplot', position='identity',\n            na_rm=False, width=0.9, method='dotdensity', binwidth=None,\n            drop=False, binaxis='x', origin=None, binpositions='bygroup',\n            breaks=None, right=True, bins=None, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\nafter_stat(‘count’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.stats.stat_bin"
  },
  {
    "objectID": "reference/stat_bindot.html#parameters",
    "href": "reference/stat_bindot.html#parameters",
    "title": "stat_bindot",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\nafter_stat(‘count’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_bindot.html#see-also",
    "href": "reference/stat_bindot.html#see-also",
    "title": "stat_bindot",
    "section": "",
    "text": "plotnine.stats.stat_bin"
  },
  {
    "objectID": "reference/stat_count.html",
    "href": "reference/stat_count.html",
    "title": "stat_count",
    "section": "",
    "text": "stats.stat_count()\nCounts the number of cases at each x position\nUsage\nstat_count(mapping=None, data=None, geom='histogram', position='stack',\n           na_rm=False, width=None, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\nafter_stat(‘count’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nplotnine.stats.stat_bin"
  },
  {
    "objectID": "reference/stat_count.html#parameters",
    "href": "reference/stat_count.html#parameters",
    "title": "stat_count",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\nafter_stat(‘count’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_count.html#see-also",
    "href": "reference/stat_count.html#see-also",
    "title": "stat_count",
    "section": "",
    "text": "plotnine.stats.stat_bin"
  },
  {
    "objectID": "reference/stat_density_2d.html",
    "href": "reference/stat_density_2d.html",
    "title": "stat_density_2d",
    "section": "",
    "text": "stats.stat_density_2d()\nCompute 2D kernel density estimation\nUsage\nstat_density_2d(mapping=None, data=None, geom='density_2d',\n                position='identity', na_rm=False, levels=5,\n                package='statsmodels', n=64, contour=True, kde_params=None,\n                **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nstatsmodels.nonparametric.kde.KDEMultivariate\nscipy.stats.gaussian_kde\nsklearn.neighbors.KernelDensity"
  },
  {
    "objectID": "reference/stat_density_2d.html#parameters",
    "href": "reference/stat_density_2d.html#parameters",
    "title": "stat_density_2d",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_density_2d.html#see-also",
    "href": "reference/stat_density_2d.html#see-also",
    "title": "stat_density_2d",
    "section": "",
    "text": "statsmodels.nonparametric.kde.KDEMultivariate\nscipy.stats.gaussian_kde\nsklearn.neighbors.KernelDensity"
  },
  {
    "objectID": "reference/stat_ellipse.html",
    "href": "reference/stat_ellipse.html",
    "title": "stat_ellipse",
    "section": "",
    "text": "stats.stat_ellipse()\nCalculate normal confidence interval ellipse\nUsage\nstat_ellipse(mapping=None, data=None, geom='path', position='identity',\n             na_rm=False, type='t', level=0.95, segments=51, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_path) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values.\ntype : str in [‘t’, ‘norm’, ‘euclid’] (default: ‘t’) The type of ellipse.\n- ``'t'`` - assumes a multivariate t-distribution, and\n- ``'norm'`` - assumes a multivariate normal distribution.\n- ``'euclid'`` - draws a circle with the radius equal to\n  `level`, representing the euclidean distance from the\n  center.\nlevel : float, optional (default: 0.95) The confidence level at which to draw the ellipse. segments : int, optional (default: 51) Number of segments to be used in drawing the ellipse."
  },
  {
    "objectID": "reference/stat_ellipse.html#parameters",
    "href": "reference/stat_ellipse.html#parameters",
    "title": "stat_ellipse",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_path) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values.\ntype : str in [‘t’, ‘norm’, ‘euclid’] (default: ‘t’) The type of ellipse.\n- ``'t'`` - assumes a multivariate t-distribution, and\n- ``'norm'`` - assumes a multivariate normal distribution.\n- ``'euclid'`` - draws a circle with the radius equal to\n  `level`, representing the euclidean distance from the\n  center.\nlevel : float, optional (default: 0.95) The confidence level at which to draw the ellipse. segments : int, optional (default: 51) Number of segments to be used in drawing the ellipse."
  },
  {
    "objectID": "reference/stat_hull.html",
    "href": "reference/stat_hull.html",
    "title": "stat_hull",
    "section": "",
    "text": "stats.stat_hull()\n2 Dimensional Convex Hull\nUsage\nstat_hull(mapping=None, data=None, geom='path', position='identity',\n          na_rm=False, qhull_options=None, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n.. rubric:: Options for computed aesthetics\n\n::\n\n    'area'  # Area of the convex hull\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_path) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values.\nqhull_options: str, optional Additional options to pass to Qhull. See Qhull &lt;http://www.qhull.org/&gt;__ documentation for details.\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nQhullError\n\n\nRaised when Qhull encounters an error condition, such as geometrical degeneracy when options to resolve are not enabled."
  },
  {
    "objectID": "reference/stat_hull.html#parameters",
    "href": "reference/stat_hull.html#parameters",
    "title": "stat_hull",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n.. rubric:: Options for computed aesthetics\n\n::\n\n    'area'  # Area of the convex hull\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_path) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values.\nqhull_options: str, optional Additional options to pass to Qhull. See Qhull &lt;http://www.qhull.org/&gt;__ documentation for details."
  },
  {
    "objectID": "reference/stat_hull.html#raises",
    "href": "reference/stat_hull.html#raises",
    "title": "stat_hull",
    "section": "",
    "text": "Type\n\n\nDescription\n\n\n\n\n\n\nQhullError\n\n\nRaised when Qhull encounters an error condition, such as geometrical degeneracy when options to resolve are not enabled."
  },
  {
    "objectID": "reference/stat_qq.html",
    "href": "reference/stat_qq.html",
    "title": "stat_qq",
    "section": "",
    "text": "stats.stat_qq()\nCalculation for quantile-quantile plot\nUsage\nstat_qq(mapping=None, data=None, geom='qq', position='identity', na_rm=False,\n        dparams={}, quantiles=None, distribution='norm', alpha_beta=(0.375,\n        0.375), **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nsample\n\n\n\n\n\n\nx\n\n\nafter_stat(‘theoretical’)\n\n\n\n\ny\n\n\nafter_stat(‘sample’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nscipy.stats.mstats.plotting_positions: Uses alpha_betato calculate the quantiles."
  },
  {
    "objectID": "reference/stat_qq.html#parameters",
    "href": "reference/stat_qq.html#parameters",
    "title": "stat_qq",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nsample\n\n\n\n\n\n\nx\n\n\nafter_stat(‘theoretical’)\n\n\n\n\ny\n\n\nafter_stat(‘sample’)\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_qq.html#see-also",
    "href": "reference/stat_qq.html#see-also",
    "title": "stat_qq",
    "section": "",
    "text": "scipy.stats.mstats.plotting_positions: Uses alpha_betato calculate the quantiles."
  },
  {
    "objectID": "reference/stat_quantile.html",
    "href": "reference/stat_quantile.html",
    "title": "stat_quantile",
    "section": "",
    "text": "stats.stat_quantile()\nCompute quantile regression lines\nUsage\nstat_quantile(mapping=None, data=None, geom='quantile', position='identity',\n              na_rm=False, formula='y ~ x', method_args={}, quantiles=(0.25,\n              0.5, 0.75), **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nstatsmodels.regression.quantile_regression.QuantReg\nplotnine.geoms.geom_quantile"
  },
  {
    "objectID": "reference/stat_quantile.html#parameters",
    "href": "reference/stat_quantile.html#parameters",
    "title": "stat_quantile",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_quantile.html#see-also",
    "href": "reference/stat_quantile.html#see-also",
    "title": "stat_quantile",
    "section": "",
    "text": "statsmodels.regression.quantile_regression.QuantReg\nplotnine.geoms.geom_quantile"
  },
  {
    "objectID": "reference/stat_smooth.html",
    "href": "reference/stat_smooth.html",
    "title": "stat_smooth",
    "section": "",
    "text": "stats.stat_smooth()\nCalculate a smoothed conditional mean\nUsage\nstat_smooth(mapping=None, data=None, geom='smooth', position='identity',\n            na_rm=False, formula=None, span=0.75, method='auto',\n            fullrange=False, level=0.95, n=80, se=True, method_args={},\n            **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\n\nstatsmodels.regression.linear_model.OLS\nstatsmodels.regression.linear_model.WLS\nstatsmodels.robust.robust_linear_model.RLM\nstatsmodels.genmod.generalized_linear_model.GLM\nstatsmodels.regression.linear_model.GLS\nstatsmodels.nonparametric.smoothers_lowess.lowess\nskmisc.loess.loess\npandas.DataFrame.rolling\nsklearn.gaussian_process.GaussianProcessRegressor\n\n\n\n\ngeom_smooth and .stat_smooth are effectively aliases, they both use the same arguments. Use geom_smooth unless you want to display the results with a non-standard geom."
  },
  {
    "objectID": "reference/stat_smooth.html#parameters",
    "href": "reference/stat_smooth.html#parameters",
    "title": "stat_smooth",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_smooth.html#see-also",
    "href": "reference/stat_smooth.html#see-also",
    "title": "stat_smooth",
    "section": "",
    "text": "statsmodels.regression.linear_model.OLS\nstatsmodels.regression.linear_model.WLS\nstatsmodels.robust.robust_linear_model.RLM\nstatsmodels.genmod.generalized_linear_model.GLM\nstatsmodels.regression.linear_model.GLS\nstatsmodels.nonparametric.smoothers_lowess.lowess\nskmisc.loess.loess\npandas.DataFrame.rolling\nsklearn.gaussian_process.GaussianProcessRegressor"
  },
  {
    "objectID": "reference/stat_smooth.html#notes",
    "href": "reference/stat_smooth.html#notes",
    "title": "stat_smooth",
    "section": "",
    "text": "geom_smooth and .stat_smooth are effectively aliases, they both use the same arguments. Use geom_smooth unless you want to display the results with a non-standard geom."
  },
  {
    "objectID": "reference/stat_summary.html",
    "href": "reference/stat_summary.html",
    "title": "stat_summary",
    "section": "",
    "text": "stats.stat_summary()\nCalculate summary statistics depending on x\nUsage\nstat_summary(mapping=None, data=None, geom='pointrange', position='identity',\n             na_rm=False, fun_ymax=None, random_state=None, fun_ymin=None,\n             fun_data='mean_cl_boot', fun_args=None, fun_y=None, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\n\n\n\nIf any of fun_y, fun_ymin or fun_ymax are provided, the value of fun_data will be ignored.\n\n\n\n\nplotnine.geoms.geom_pointrange"
  },
  {
    "objectID": "reference/stat_summary.html#parameters",
    "href": "reference/stat_summary.html#parameters",
    "title": "stat_summary",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\nAesthetic\n\n\nDefault value\n\n\n\n\n\n\nx\n\n\n\n\n\n\ny\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired"
  },
  {
    "objectID": "reference/stat_summary.html#notes",
    "href": "reference/stat_summary.html#notes",
    "title": "stat_summary",
    "section": "",
    "text": "If any of fun_y, fun_ymin or fun_ymax are provided, the value of fun_data will be ignored."
  },
  {
    "objectID": "reference/stat_summary.html#see-also",
    "href": "reference/stat_summary.html#see-also",
    "title": "stat_summary",
    "section": "",
    "text": "plotnine.geoms.geom_pointrange"
  },
  {
    "objectID": "reference/stat_unique.html",
    "href": "reference/stat_unique.html",
    "title": "stat_unique",
    "section": "",
    "text": "stats.stat_unique()\nRemove duplicates\nUsage\nstat_unique(mapping=None, data=None, geom='point', position='identity',\n            na_rm=False, **kwargs)\nOnly the mapping and data can be positional, the rest must be keyword arguments. **kwargs can be aesthetics (or parameters) used by the geom.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_point) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values."
  },
  {
    "objectID": "reference/stat_unique.html#parameters",
    "href": "reference/stat_unique.html#parameters",
    "title": "stat_unique",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nmapping\n\n\naes\n\n\nAesthetic mappings created with aes. If specified and :py:inherit.aes=True, it is combined with the default mapping for the plot. You must supply mapping if there is no plot mapping.\n\n\n\n\n\n\n\n\nThe bold aesthetics are required.\n\n\nrequired\n\n\n\n\ndata : dataframe, optional The data to be displayed in this layer. If None, the data from from the :py:ggplot() call is used. If specified, it overrides the data from the :py:ggplot() call. geom : str or geom, optional (default: ~plotnine.geoms.geom_point) The statistical transformation to use on the data for this layer. If it is a string, it must be the registered and known to Plotnine. position : str or position, optional (default: ~plotnine.positions.position_identity) Position adjustment. If it is a string, it must be registered and known to Plotnine. na_rm : bool, optional (default: False) If False, removes missing values with a warning. If True silently removes missing values."
  },
  {
    "objectID": "reference/strip_align.html",
    "href": "reference/strip_align.html",
    "title": "strip_align",
    "section": "",
    "text": "themes.themeable.strip_align()\nAlignment of the strip & its background w.r.t the panel border\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue as a proportion of the strip text size. A good value should be the range :math:[-1, 0.5]. A negative value puts the strip inside the axes and a positive value creates a space between the strip and the axes.\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_align.html#parameters",
    "href": "reference/strip_align.html#parameters",
    "title": "strip_align",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue as a proportion of the strip text size. A good value should be the range :math:[-1, 0.5]. A negative value puts the strip inside the axes and a positive value creates a space between the strip and the axes.\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_align_y.html",
    "href": "reference/strip_align_y.html",
    "title": "strip_align_y",
    "section": "",
    "text": "themes.themeable.strip_align_y()\nHorizontal alignment of the strip & its background w.r.t the panel border\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue as a proportion of the strip size. A good value should be the range :math:[-1, 0.5]. A negative value puts the strip inside the axes. A positive value creates a margin between the strip and the axes. 0 puts the strip exactly beside the panels.\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_align_y.html#parameters",
    "href": "reference/strip_align_y.html#parameters",
    "title": "strip_align_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nfloat\n\n\nValue as a proportion of the strip size. A good value should be the range :math:[-1, 0.5]. A negative value puts the strip inside the axes. A positive value creates a margin between the strip and the axes. 0 puts the strip exactly beside the panels.\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_background_x.html",
    "href": "reference/strip_background_x.html",
    "title": "strip_background_x",
    "section": "",
    "text": "themes.themeable.strip_background_x()\nHorizontal facet label background\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_background_x.html#parameters",
    "href": "reference/strip_background_x.html#parameters",
    "title": "strip_background_x",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_rect\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_text.html",
    "href": "reference/strip_text.html",
    "title": "strip_text",
    "section": "",
    "text": "themes.themeable.strip_text()\nFacet labels along both axes\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_text.html#parameters",
    "href": "reference/strip_text.html#parameters",
    "title": "strip_text",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_text_y.html",
    "href": "reference/strip_text_y.html",
    "title": "strip_text_y",
    "section": "",
    "text": "themes.themeable.strip_text_y()\nFacet labels along the vertical axis\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/strip_text_y.html#parameters",
    "href": "reference/strip_text_y.html#parameters",
    "title": "strip_text_y",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ntheme_element\n\n\nelement_text\n\n\n\n\nrequired"
  },
  {
    "objectID": "reference/theme.html",
    "href": "reference/theme.html",
    "title": "theme",
    "section": "",
    "text": "themes.theme(self, complete=False, axis_title_x=None, axis_title_y=None, axis_title=None, legend_title=None, legend_text_legend=None, legend_text_colorbar=None, legend_text=None, plot_title=None, plot_subtitle=None, plot_caption=None, strip_text_x=None, strip_text_y=None, strip_text=None, title=None, axis_text_x=None, axis_text_y=None, axis_text=None, text=None, axis_line_x=None, axis_line_y=None, axis_line=None, axis_ticks_minor_x=None, axis_ticks_minor_y=None, axis_ticks_major_x=None, axis_ticks_major_y=None, axis_ticks_major=None, axis_ticks_minor=None, axis_ticks_x=None, axis_ticks_y=None, axis_ticks=None, panel_grid_major_x=None, panel_grid_major_y=None, panel_grid_minor_x=None, panel_grid_minor_y=None, panel_grid_major=None, panel_grid_minor=None, panel_grid=None, line=None, legend_key=None, legend_background=None, legend_box_background=None, panel_background=None, panel_border=None, plot_background=None, strip_background_x=None, strip_background_y=None, strip_background=None, rect=None, axis_ticks_length_major_x=None, axis_ticks_length_major_y=None, axis_ticks_length_major=None, axis_ticks_length_minor_x=None, axis_ticks_length_minor_y=None, axis_ticks_length_minor=None, axis_ticks_length=None, axis_ticks_pad_major_x=None, axis_ticks_pad_major_y=None, axis_ticks_pad_major=None, axis_ticks_pad_minor_x=None, axis_ticks_pad_minor_y=None, axis_ticks_pad_minor=None, axis_ticks_pad=None, axis_ticks_direction_x=None, axis_ticks_direction_y=None, axis_ticks_direction=None, panel_spacing_x=None, panel_spacing_y=None, panel_spacing=None, plot_margin_left=None, plot_margin_right=None, plot_margin_top=None, plot_margin_bottom=None, plot_margin=None, panel_ontop=None, aspect_ratio=None, dpi=None, figure_size=None, legend_box=None, legend_box_margin=None, legend_box_just=None, legend_direction=None, legend_key_width=None, legend_key_height=None, legend_key_size=None, legend_margin=None, legend_box_spacing=None, legend_spacing=None, legend_position=None, legend_title_align=None, legend_entry_spacing_x=None, legend_entry_spacing_y=None, legend_entry_spacing=None, strip_align_x=None, strip_align_y=None, strip_align=None, subplots_adjust=None, **kwargs)\nBase class for themes\nIn general, only complete themes should subclass this class.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncomplete\n\n\nbool\n\n\nThemes that are complete will override any existing themes. themes that are not complete (ie. partial) will add to or override specific elements of the current theme. e.g:: theme_gray() + theme_xkcd() will be completely determined by theme_xkcd, but:: theme_gray() + theme(axis_text_x=element_text(angle=45)) will only modify the x-axis text.\n\n\nFalse\n\n\n\n\n\n\n\nWhen subclassing, make sure to call theme.__init__. After which you can customise self._rcParams within the __init__ method of the new theme. The rcParams should not be modified after that.\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    facet_grid,\n    labs,\n    guide_legend,\n    guides,\n    theme,\n    element_text,\n    element_line,\n    element_rect,\n    theme_set,\n    theme_void\n)\nfrom plotnine.data import mtcars\n\n# We use theme_void as the base theme so that the modifications\n# we make in the code are transparent in the output\ntheme_set(theme_void())\n\n\nmtcars.head()\n\n\n\n\n\n\n\n\nname\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n0\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n1\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n2\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n3\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n4\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n\n\n\n\n\nThe base plots we will use for the demonstation and some colors.\n\np1 = (ggplot(mtcars, aes('wt', 'mpg', color='factor(cyl)'))\n      + geom_point()\n      + labs(title='mpg vs wt')\n     )\n\np2 = p1 + facet_grid('gear ~ am')\n\nblack = '#222222'\ngray = '#666666'\nred = '#FF3333'\ngreen = '#66CC00'\nblue = '#3333FF'\npurple = '#9933FF'\norange = '#FF8000'\nyellow = '#FFFF33'\n\nWhat the plots look like unmodified (unthemed).\n\np1\n\n\n\n\n\np2\n\n\n\n\nThere are 3 main top level theming elements:\n\ntext - controls all the text elements in the figure.\nrect - controls all the rectangles in the figure.\nline - controls all the lines in the figure.\n\nNote that none of the themeables control/modify the plotted data. e.g You cannot use text to change the appearance of objects plotted with geom_text.\ntext\n\np1 + theme(\n    text=element_text(color=purple)\n)\n\n\n\n\nrect\n\np1 + theme(\n    rect=element_rect(color=black, size=3, fill='#EEBB0050')\n) \n\n\n\n\nline\n\np1 + theme(\n    line=element_line(color=black)\n)\n\n\n\n\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=2),\n    axis_line_x=element_line(color=red),\n    axis_line_y=element_line(color=blue),\n    \n    axis_text=element_text(margin={'t': 5, 'r': 5}),\n    axis_text_x=element_text(color=black),\n    axis_text_y=element_text(color=purple)\n)\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    \n    # We are focusing on the ticks, make them long\n    axis_ticks_length=20,\n    axis_ticks_length_minor=10,\n    axis_ticks_length_major=20,\n    \n    axis_ticks=element_line(size=2),\n    \n    axis_ticks_major=element_line(color=purple),\n    axis_ticks_major_x=element_line(size=4),        # override size=2\n    axis_ticks_major_y=element_line(color=yellow),  # override color=purple\n    \n    axis_ticks_minor=element_line(color=red),\n    axis_ticks_minor_x=element_line(),              # do not override anything\n    axis_ticks_minor_y=element_line(color=gray),    # override color=red\n\n)\n\n\n\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    axis_ticks=element_line(),\n    \n    axis_title=element_text(),\n    axis_title_x=element_text(color=blue),\n    axis_title_y=element_text(color=red),\n    \n    # The gap between the title and the ticks\n    axis_ticks_pad=20,\n    axis_ticks_pad_major=20,\n    axis_ticks_pad_minor=20\n)\n\n\n\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    axis_ticks=element_line(),\n    \n    axis_ticks_direction='in',\n    axis_ticks_direction_x='in',\n    axis_ticks_direction_y='out'\n)\n\n\n\n\n\n\n\nNot all themeables that affect the legend box are demonstrated\n\n(p1 + aes(fill='drat')\n + theme(\n    legend_position='left',\n    legend_direction='horizontal', # affected by the ncol=2\n    legend_title_align='center',\n    legend_box_margin=5,\n    legend_background=element_rect(color=purple, size=2, fill='white'),\n     \n    legend_box='vertical',\n     \n    legend_key=element_rect(fill=gray, alpha=.3),\n    legend_title=element_text(color=orange),\n    legend_text=element_text(weight='bold'),\n    \n    legend_key_size=30,            # overridden\n    legend_key_width=30,\n    legend_key_height=15,\n\n    legend_entry_spacing=10,      # overridden\n    legend_entry_spacing_x=15,\n    legend_entry_spacing_y=5) \n \n # so we can see legend_entry_spacing in action\n + guides(color=guide_legend(ncol=2))\n)\n\n\n\n\n\n\n\n\np2 + theme(\n    plot_background=element_rect(fill='gray', alpha=.3),\n    panel_background=element_rect(fill=purple, alpha=.2),\n    panel_border=element_rect(color=red, size=1),\n    panel_spacing=.25,\n    #panel_spacing_x=.05,\n    #panel_spacing_y=.25\n)\n\n\n\n\n\n\n\n\np1 + theme(\n    panel_grid=element_line(color=purple),\n    \n    panel_grid_major=element_line(size=1.4, alpha=1),\n    panel_grid_major_x=element_line(linetype='dashed'),\n    panel_grid_major_y=element_line(linetype='dashdot'),\n    \n    panel_grid_minor=element_line(alpha=.25),\n    panel_grid_minor_x=element_line(color=red),\n    panel_grid_minor_y=element_line(color=green),\n    \n    panel_ontop=False  # puts the points behind the grid\n )\n\n\n\n\n\n\n\n\np2 + theme(\n    panel_spacing=.25,\n    \n    strip_background=element_rect(color=purple, fill=orange, size=1.4, alpha=.95),\n    strip_background_x=element_rect(x=1/6, width=2/3), # you can get really crazy\n    strip_background_y=element_rect(),\n    \n    strip_margin=0,\n    strip_margin_x=0.2,\n    strip_margin_y=0.2,\n    \n    strip_text=element_text(weight='bold'),\n    strip_text_x=element_text(color=red),\n    strip_text_y=element_text(color=blue)\n )\n\n\n\n\n\n\n\nThe aspect_ratio takes precedence over the figure_size, and it modifies the height. The effective width and height are:\nwidth = figure_size[0]\nheight = figure_size[0] * aspect_ratio\n\np1 + theme(\n    panel_background=element_rect(fill=gray, alpha=.2),\n    #dpi=120,\n    figure_size=(8, 6), # inches\n    aspect_ratio=1/3    # height:width\n)\n\n\n\n\n\n\nSource: We use theme_void as the base theme so that the modifications"
  },
  {
    "objectID": "reference/theme.html#parameters",
    "href": "reference/theme.html#parameters",
    "title": "theme",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\ncomplete\n\n\nbool\n\n\nThemes that are complete will override any existing themes. themes that are not complete (ie. partial) will add to or override specific elements of the current theme. e.g:: theme_gray() + theme_xkcd() will be completely determined by theme_xkcd, but:: theme_gray() + theme(axis_text_x=element_text(angle=45)) will only modify the x-axis text.\n\n\nFalse"
  },
  {
    "objectID": "reference/theme.html#notes",
    "href": "reference/theme.html#notes",
    "title": "theme",
    "section": "",
    "text": "When subclassing, make sure to call theme.__init__. After which you can customise self._rcParams within the __init__ method of the new theme. The rcParams should not be modified after that."
  },
  {
    "objectID": "reference/theme.html#examples",
    "href": "reference/theme.html#examples",
    "title": "theme",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    facet_grid,\n    labs,\n    guide_legend,\n    guides,\n    theme,\n    element_text,\n    element_line,\n    element_rect,\n    theme_set,\n    theme_void\n)\nfrom plotnine.data import mtcars\n\n# We use theme_void as the base theme so that the modifications\n# we make in the code are transparent in the output\ntheme_set(theme_void())\n\n\nmtcars.head()\n\n\n\n\n\n\n\n\nname\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n0\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n1\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n2\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n3\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n4\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n\n\n\n\n\nThe base plots we will use for the demonstation and some colors.\n\np1 = (ggplot(mtcars, aes('wt', 'mpg', color='factor(cyl)'))\n      + geom_point()\n      + labs(title='mpg vs wt')\n     )\n\np2 = p1 + facet_grid('gear ~ am')\n\nblack = '#222222'\ngray = '#666666'\nred = '#FF3333'\ngreen = '#66CC00'\nblue = '#3333FF'\npurple = '#9933FF'\norange = '#FF8000'\nyellow = '#FFFF33'\n\nWhat the plots look like unmodified (unthemed).\n\np1\n\n\n\n\n\np2\n\n\n\n\nThere are 3 main top level theming elements:\n\ntext - controls all the text elements in the figure.\nrect - controls all the rectangles in the figure.\nline - controls all the lines in the figure.\n\nNote that none of the themeables control/modify the plotted data. e.g You cannot use text to change the appearance of objects plotted with geom_text.\ntext\n\np1 + theme(\n    text=element_text(color=purple)\n)\n\n\n\n\nrect\n\np1 + theme(\n    rect=element_rect(color=black, size=3, fill='#EEBB0050')\n) \n\n\n\n\nline\n\np1 + theme(\n    line=element_line(color=black)\n)\n\n\n\n\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=2),\n    axis_line_x=element_line(color=red),\n    axis_line_y=element_line(color=blue),\n    \n    axis_text=element_text(margin={'t': 5, 'r': 5}),\n    axis_text_x=element_text(color=black),\n    axis_text_y=element_text(color=purple)\n)\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    \n    # We are focusing on the ticks, make them long\n    axis_ticks_length=20,\n    axis_ticks_length_minor=10,\n    axis_ticks_length_major=20,\n    \n    axis_ticks=element_line(size=2),\n    \n    axis_ticks_major=element_line(color=purple),\n    axis_ticks_major_x=element_line(size=4),        # override size=2\n    axis_ticks_major_y=element_line(color=yellow),  # override color=purple\n    \n    axis_ticks_minor=element_line(color=red),\n    axis_ticks_minor_x=element_line(),              # do not override anything\n    axis_ticks_minor_y=element_line(color=gray),    # override color=red\n\n)\n\n\n\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    axis_ticks=element_line(),\n    \n    axis_title=element_text(),\n    axis_title_x=element_text(color=blue),\n    axis_title_y=element_text(color=red),\n    \n    # The gap between the title and the ticks\n    axis_ticks_pad=20,\n    axis_ticks_pad_major=20,\n    axis_ticks_pad_minor=20\n)\n\n\n\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    axis_ticks=element_line(),\n    \n    axis_ticks_direction='in',\n    axis_ticks_direction_x='in',\n    axis_ticks_direction_y='out'\n)\n\n\n\n\n\n\n\nNot all themeables that affect the legend box are demonstrated\n\n(p1 + aes(fill='drat')\n + theme(\n    legend_position='left',\n    legend_direction='horizontal', # affected by the ncol=2\n    legend_title_align='center',\n    legend_box_margin=5,\n    legend_background=element_rect(color=purple, size=2, fill='white'),\n     \n    legend_box='vertical',\n     \n    legend_key=element_rect(fill=gray, alpha=.3),\n    legend_title=element_text(color=orange),\n    legend_text=element_text(weight='bold'),\n    \n    legend_key_size=30,            # overridden\n    legend_key_width=30,\n    legend_key_height=15,\n\n    legend_entry_spacing=10,      # overridden\n    legend_entry_spacing_x=15,\n    legend_entry_spacing_y=5) \n \n # so we can see legend_entry_spacing in action\n + guides(color=guide_legend(ncol=2))\n)\n\n\n\n\n\n\n\n\np2 + theme(\n    plot_background=element_rect(fill='gray', alpha=.3),\n    panel_background=element_rect(fill=purple, alpha=.2),\n    panel_border=element_rect(color=red, size=1),\n    panel_spacing=.25,\n    #panel_spacing_x=.05,\n    #panel_spacing_y=.25\n)\n\n\n\n\n\n\n\n\np1 + theme(\n    panel_grid=element_line(color=purple),\n    \n    panel_grid_major=element_line(size=1.4, alpha=1),\n    panel_grid_major_x=element_line(linetype='dashed'),\n    panel_grid_major_y=element_line(linetype='dashdot'),\n    \n    panel_grid_minor=element_line(alpha=.25),\n    panel_grid_minor_x=element_line(color=red),\n    panel_grid_minor_y=element_line(color=green),\n    \n    panel_ontop=False  # puts the points behind the grid\n )\n\n\n\n\n\n\n\n\np2 + theme(\n    panel_spacing=.25,\n    \n    strip_background=element_rect(color=purple, fill=orange, size=1.4, alpha=.95),\n    strip_background_x=element_rect(x=1/6, width=2/3), # you can get really crazy\n    strip_background_y=element_rect(),\n    \n    strip_margin=0,\n    strip_margin_x=0.2,\n    strip_margin_y=0.2,\n    \n    strip_text=element_text(weight='bold'),\n    strip_text_x=element_text(color=red),\n    strip_text_y=element_text(color=blue)\n )\n\n\n\n\n\n\n\nThe aspect_ratio takes precedence over the figure_size, and it modifies the height. The effective width and height are:\nwidth = figure_size[0]\nheight = figure_size[0] * aspect_ratio\n\np1 + theme(\n    panel_background=element_rect(fill=gray, alpha=.2),\n    #dpi=120,\n    figure_size=(8, 6), # inches\n    aspect_ratio=1/3    # height:width\n)\n\n\n\n\n\n\nSource: We use theme_void as the base theme so that the modifications"
  },
  {
    "objectID": "reference/theme.html#theming-specific-items",
    "href": "reference/theme.html#theming-specific-items",
    "title": "theme",
    "section": "",
    "text": "p1 + theme(\n    axis_line=element_line(size=2),\n    axis_line_x=element_line(color=red),\n    axis_line_y=element_line(color=blue),\n    \n    axis_text=element_text(margin={'t': 5, 'r': 5}),\n    axis_text_x=element_text(color=black),\n    axis_text_y=element_text(color=purple)\n)\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    \n    # We are focusing on the ticks, make them long\n    axis_ticks_length=20,\n    axis_ticks_length_minor=10,\n    axis_ticks_length_major=20,\n    \n    axis_ticks=element_line(size=2),\n    \n    axis_ticks_major=element_line(color=purple),\n    axis_ticks_major_x=element_line(size=4),        # override size=2\n    axis_ticks_major_y=element_line(color=yellow),  # override color=purple\n    \n    axis_ticks_minor=element_line(color=red),\n    axis_ticks_minor_x=element_line(),              # do not override anything\n    axis_ticks_minor_y=element_line(color=gray),    # override color=red\n\n)\n\n\n\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    axis_ticks=element_line(),\n    \n    axis_title=element_text(),\n    axis_title_x=element_text(color=blue),\n    axis_title_y=element_text(color=red),\n    \n    # The gap between the title and the ticks\n    axis_ticks_pad=20,\n    axis_ticks_pad_major=20,\n    axis_ticks_pad_minor=20\n)\n\n\n\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    axis_ticks=element_line(),\n    \n    axis_ticks_direction='in',\n    axis_ticks_direction_x='in',\n    axis_ticks_direction_y='out'\n)\n\n\n\n\n\n\n\nNot all themeables that affect the legend box are demonstrated\n\n(p1 + aes(fill='drat')\n + theme(\n    legend_position='left',\n    legend_direction='horizontal', # affected by the ncol=2\n    legend_title_align='center',\n    legend_box_margin=5,\n    legend_background=element_rect(color=purple, size=2, fill='white'),\n     \n    legend_box='vertical',\n     \n    legend_key=element_rect(fill=gray, alpha=.3),\n    legend_title=element_text(color=orange),\n    legend_text=element_text(weight='bold'),\n    \n    legend_key_size=30,            # overridden\n    legend_key_width=30,\n    legend_key_height=15,\n\n    legend_entry_spacing=10,      # overridden\n    legend_entry_spacing_x=15,\n    legend_entry_spacing_y=5) \n \n # so we can see legend_entry_spacing in action\n + guides(color=guide_legend(ncol=2))\n)\n\n\n\n\n\n\n\n\np2 + theme(\n    plot_background=element_rect(fill='gray', alpha=.3),\n    panel_background=element_rect(fill=purple, alpha=.2),\n    panel_border=element_rect(color=red, size=1),\n    panel_spacing=.25,\n    #panel_spacing_x=.05,\n    #panel_spacing_y=.25\n)\n\n\n\n\n\n\n\n\np1 + theme(\n    panel_grid=element_line(color=purple),\n    \n    panel_grid_major=element_line(size=1.4, alpha=1),\n    panel_grid_major_x=element_line(linetype='dashed'),\n    panel_grid_major_y=element_line(linetype='dashdot'),\n    \n    panel_grid_minor=element_line(alpha=.25),\n    panel_grid_minor_x=element_line(color=red),\n    panel_grid_minor_y=element_line(color=green),\n    \n    panel_ontop=False  # puts the points behind the grid\n )\n\n\n\n\n\n\n\n\np2 + theme(\n    panel_spacing=.25,\n    \n    strip_background=element_rect(color=purple, fill=orange, size=1.4, alpha=.95),\n    strip_background_x=element_rect(x=1/6, width=2/3), # you can get really crazy\n    strip_background_y=element_rect(),\n    \n    strip_margin=0,\n    strip_margin_x=0.2,\n    strip_margin_y=0.2,\n    \n    strip_text=element_text(weight='bold'),\n    strip_text_x=element_text(color=red),\n    strip_text_y=element_text(color=blue)\n )\n\n\n\n\n\n\n\nThe aspect_ratio takes precedence over the figure_size, and it modifies the height. The effective width and height are:\nwidth = figure_size[0]\nheight = figure_size[0] * aspect_ratio\n\np1 + theme(\n    panel_background=element_rect(fill=gray, alpha=.2),\n    #dpi=120,\n    figure_size=(8, 6), # inches\n    aspect_ratio=1/3    # height:width\n)"
  },
  {
    "objectID": "reference/theme_bw.html",
    "href": "reference/theme_bw.html",
    "title": "theme_bw",
    "section": "",
    "text": "themes.theme_bw(self, base_size=11, base_family=None)\nWhite background with black gridlines\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_bw.html#parameters",
    "href": "reference/theme_bw.html#parameters",
    "title": "theme_bw",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_dark.html",
    "href": "reference/theme_dark.html",
    "title": "theme_dark",
    "section": "",
    "text": "themes.theme_dark(self, base_size=11, base_family=None)\nThe dark cousin of theme_light\nIt has similar line sizes but a dark background. Useful to make thin colored lines pop out.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_dark.html#parameters",
    "href": "reference/theme_dark.html#parameters",
    "title": "theme_dark",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_gray.html",
    "href": "reference/theme_gray.html",
    "title": "theme_gray",
    "section": "",
    "text": "themes.theme_gray(self, base_size=11, base_family=None)\nA gray background with white gridlines.\nThis is the default theme\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_gray.html#parameters",
    "href": "reference/theme_gray.html#parameters",
    "title": "theme_gray",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_light.html",
    "href": "reference/theme_light.html",
    "title": "theme_light",
    "section": "",
    "text": "themes.theme_light(self, base_size=11, base_family=None)\nA theme similar to theme_linedraw\nHas light grey lines lines and axes to direct more attention towards the data.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_light.html#parameters",
    "href": "reference/theme_light.html#parameters",
    "title": "theme_light",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_matplotlib.html",
    "href": "reference/theme_matplotlib.html",
    "title": "theme_matplotlib",
    "section": "",
    "text": "themes.theme_matplotlib(self, rc=None, fname=None, use_defaults=True)\nThe default matplotlib look and feel.\nThe theme can be used (and has the same parameter to customize) like a matplotlib.rc_context manager.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrc\n\n\ndict\n\n\nrcParams which should be applied on top of mathplotlib default.\n\n\nNone\n\n\n\n\nfname\n\n\nstr\n\n\nFilename to a matplotlibrc file\n\n\nNone\n\n\n\n\nuse_defaults\n\n\nbool\n\n\nIf True (the default) resets the plot setting to the (current) matplotlib.rcParams values\n\n\nTrue"
  },
  {
    "objectID": "reference/theme_matplotlib.html#parameters",
    "href": "reference/theme_matplotlib.html#parameters",
    "title": "theme_matplotlib",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nrc\n\n\ndict\n\n\nrcParams which should be applied on top of mathplotlib default.\n\n\nNone\n\n\n\n\nfname\n\n\nstr\n\n\nFilename to a matplotlibrc file\n\n\nNone\n\n\n\n\nuse_defaults\n\n\nbool\n\n\nIf True (the default) resets the plot setting to the (current) matplotlib.rcParams values\n\n\nTrue"
  },
  {
    "objectID": "reference/theme_seaborn.html",
    "href": "reference/theme_seaborn.html",
    "title": "theme_seaborn",
    "section": "",
    "text": "themes.theme_seaborn(self, style='darkgrid', context='notebook', font='sans-serif', font_scale=1)\nTheme for seaborn.\nCredit to Michael Waskom’s seaborn:\n- http://stanford.edu/~mwaskom/software/seaborn\n- https://github.com/mwaskom/seaborn\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstyle\n\n\n\n\nStyle of axis background.\n\n\n'darkgrid'\n\n\n\n\ncontext\n\n\n\n\nIntended context for resulting figures.\n\n\n'notebook'\n\n\n\n\nfont\n\n\nstr\n\n\nFont family, see matplotlib font manager.\n\n\n'sans-serif'\n\n\n\n\nfont_scale\n\n\nfloat\n\n\nSeparate scaling factor to independently scale the size of the font elements.\n\n\n1"
  },
  {
    "objectID": "reference/theme_seaborn.html#parameters",
    "href": "reference/theme_seaborn.html#parameters",
    "title": "theme_seaborn",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nstyle\n\n\n\n\nStyle of axis background.\n\n\n'darkgrid'\n\n\n\n\ncontext\n\n\n\n\nIntended context for resulting figures.\n\n\n'notebook'\n\n\n\n\nfont\n\n\nstr\n\n\nFont family, see matplotlib font manager.\n\n\n'sans-serif'\n\n\n\n\nfont_scale\n\n\nfloat\n\n\nSeparate scaling factor to independently scale the size of the font elements.\n\n\n1"
  },
  {
    "objectID": "reference/theme_tufte.html",
    "href": "reference/theme_tufte.html",
    "title": "theme_tufte",
    "section": "",
    "text": "themes.theme_tufte(self, base_size=11, base_family=None, ticks=True)\nTufte Maximal Data, Minimal Ink Theme\nTheme based on Chapter 6 ’Data-Ink Maximization and Graphical Design of Edward Tufte The Visual Display of Quantitative Information. No border, no axis lines, no grids. This theme works best in combination with :class:geom_rug() or :class:geom_rangeframe().\nThe default font family is set to ‘serif’ as he uses serif fonts for labels in ‘The Visual Display of Quantitative Information’. The serif font used by Tufte in his books is a variant of Bembo, while the sans serif font is Gill Sans. If these fonts are installed on your system, consider setting them explicitly via the argument base_family.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone\n\n\n\n\nticks\n\n\n\n\nShow axis ticks?\n\n\nTrue\n\n\n\n\nTufte, Edward R. (2001) The Visual Display of Quantitative Information, Chapter 6.\nTranslated from the R ggthemes package by hyiltiz hyiltiz@gmail.com. Released under GNU GPL v2 license or later."
  },
  {
    "objectID": "reference/theme_tufte.html#parameters",
    "href": "reference/theme_tufte.html#parameters",
    "title": "theme_tufte",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nstr\n\n\nBase font family.\n\n\nNone\n\n\n\n\nticks\n\n\n\n\nShow axis ticks?\n\n\nTrue\n\n\n\n\nTufte, Edward R. (2001) The Visual Display of Quantitative Information, Chapter 6.\nTranslated from the R ggthemes package by hyiltiz hyiltiz@gmail.com. Released under GNU GPL v2 license or later."
  },
  {
    "objectID": "reference/theme_void.html",
    "href": "reference/theme_void.html",
    "title": "theme_void",
    "section": "",
    "text": "themes.theme_void(self, base_size=11, base_family=None)\nA classic-looking theme, with x & y axis lines and no gridlines.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nint\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/theme_void.html#parameters",
    "href": "reference/theme_void.html#parameters",
    "title": "theme_void",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nbase_size\n\n\nint\n\n\nBase font size. All text sizes are a scaled versions of the base font size. Default is 11.\n\n\n11\n\n\n\n\nbase_family\n\n\nint\n\n\nBase font family.\n\n\nNone"
  },
  {
    "objectID": "reference/themeable.html",
    "href": "reference/themeable.html",
    "title": "themeable",
    "section": "",
    "text": "themes.themeable.themeable(self, theme_element=None)\n\n\nA user should never create instances of class themeable or subclasses of it.\n\n\n\n\n\n\nName\nDescription\n\n\n\n\norder\nint([x]) -&gt; integer\n\n\nrcParams\nReturn themeables rcparams to an rcparam dict before plotting.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\napply\nCalled by the theme to apply the themeable\n\n\napply_ax\nCalled after a chart has been plotted.\n\n\napply_figure\nApply theme to the figure\n\n\nblank_ax\nBlank out theme elements\n\n\nblank_figure\nBlank out elements on the figure\n\n\nfrom_class_name\nCreate a themeable by name\n\n\nis_blank\nReturn True if theme_element is made of element_blank\n\n\nmerge\nMerge properties of other into self\n\n\nsetup_figure\nApply theme to the figure\n\n\n\n\n\nthemes.themeable.themeable.apply(self, theme)\nCalled by the theme to apply the themeable\nSubclasses shouldn’t have to override this method to customize.\n\n\n\nthemes.themeable.themeable.apply_ax(self, ax)\nCalled after a chart has been plotted.\nSubclasses can override this method to customize the plot according to the theme.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nax\n\n\nmatplotlib.axes.Axes\n\n\n\n\nrequired\n\n\n\n\nThis method should be implemented as super(…).apply_ax() followed by extracting the portion of the axes specific to this themeable then applying the properties.\n\n\n\n\nthemes.themeable.themeable.apply_figure(self, figure, targets)\nApply theme to the figure\nCompared to setup_figure, this method is called after plotting and all the elements are drawn onto the figure.\n\n\n\nthemes.themeable.themeable.blank_ax(self, ax)\nBlank out theme elements\n\n\n\nthemes.themeable.themeable.blank_figure(self, figure, targets)\nBlank out elements on the figure\n\n\n\nthemes.themeable.themeable.from_class_name(name, theme_element)\nCreate a themeable by name\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nname\n\n\nstr\n\n\nClass name\n\n\nrequired\n\n\n\n\ntheme_element\n\n\nelement object\n\n\nA of the type required by the theme For lines, text and rects it should be one of: element_line, element_rect, element_text or element_blank\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nThemeable\n\n\n\n\n\n\n\n\n\n\nthemes.themeable.themeable.is_blank(self)\nReturn True if theme_element is made of element_blank\n\n\n\nthemes.themeable.themeable.merge(self, other)\nMerge properties of other into self\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nValueError\n\n\nIf any of the properties are blank\n\n\n\n\n\n\n\n\nthemes.themeable.themeable.setup_figure(self, figure)\nApply theme to the figure\nCompared to apply_figure, this method is called before any plotting is done. This is necessary in some cases where the drawing functions need(or can make use of) this information."
  },
  {
    "objectID": "reference/themeable.html#notes",
    "href": "reference/themeable.html#notes",
    "title": "themeable",
    "section": "",
    "text": "A user should never create instances of class themeable or subclasses of it."
  },
  {
    "objectID": "reference/themeable.html#attributes",
    "href": "reference/themeable.html#attributes",
    "title": "themeable",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\norder\nint([x]) -&gt; integer\n\n\nrcParams\nReturn themeables rcparams to an rcparam dict before plotting."
  },
  {
    "objectID": "reference/themeable.html#methods",
    "href": "reference/themeable.html#methods",
    "title": "themeable",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\napply\nCalled by the theme to apply the themeable\n\n\napply_ax\nCalled after a chart has been plotted.\n\n\napply_figure\nApply theme to the figure\n\n\nblank_ax\nBlank out theme elements\n\n\nblank_figure\nBlank out elements on the figure\n\n\nfrom_class_name\nCreate a themeable by name\n\n\nis_blank\nReturn True if theme_element is made of element_blank\n\n\nmerge\nMerge properties of other into self\n\n\nsetup_figure\nApply theme to the figure\n\n\n\n\n\nthemes.themeable.themeable.apply(self, theme)\nCalled by the theme to apply the themeable\nSubclasses shouldn’t have to override this method to customize.\n\n\n\nthemes.themeable.themeable.apply_ax(self, ax)\nCalled after a chart has been plotted.\nSubclasses can override this method to customize the plot according to the theme.\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nax\n\n\nmatplotlib.axes.Axes\n\n\n\n\nrequired\n\n\n\n\nThis method should be implemented as super(…).apply_ax() followed by extracting the portion of the axes specific to this themeable then applying the properties.\n\n\n\n\nthemes.themeable.themeable.apply_figure(self, figure, targets)\nApply theme to the figure\nCompared to setup_figure, this method is called after plotting and all the elements are drawn onto the figure.\n\n\n\nthemes.themeable.themeable.blank_ax(self, ax)\nBlank out theme elements\n\n\n\nthemes.themeable.themeable.blank_figure(self, figure, targets)\nBlank out elements on the figure\n\n\n\nthemes.themeable.themeable.from_class_name(name, theme_element)\nCreate a themeable by name\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nname\n\n\nstr\n\n\nClass name\n\n\nrequired\n\n\n\n\ntheme_element\n\n\nelement object\n\n\nA of the type required by the theme For lines, text and rects it should be one of: element_line, element_rect, element_text or element_blank\n\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nThemeable\n\n\n\n\n\n\n\n\n\n\nthemes.themeable.themeable.is_blank(self)\nReturn True if theme_element is made of element_blank\n\n\n\nthemes.themeable.themeable.merge(self, other)\nMerge properties of other into self\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\nValueError\n\n\nIf any of the properties are blank\n\n\n\n\n\n\n\n\nthemes.themeable.themeable.setup_figure(self, figure)\nApply theme to the figure\nCompared to apply_figure, this method is called before any plotting is done. This is necessary in some cases where the drawing functions need(or can make use of) this information."
  },
  {
    "objectID": "reference/txhousing.html",
    "href": "reference/txhousing.html",
    "title": "txhousing",
    "section": "",
    "text": "txhousing\ndata.txhousing\nHousing sales in TX.\n.. rubric:: Description\nInformation about the housing market in Texas provided by the TAMU real estate center, http://recenter.tamu.edu/.\n.. rubric:: Format\nA data frame with 8602 observations and 9 variables:\n========= =============================================== Column Description ========= =============================================== city Name of MLS area year Year month Month sales Number of sales volume Total value of sales median Median sale price listings Total active listings inventory “Months inventory”: amount of time it would\n        take to sell all current listings at current \n\n        pace of sales.\ndate Date ========= ==============================================="
  },
  {
    "objectID": "reference/xlab.html",
    "href": "reference/xlab.html",
    "title": "xlab",
    "section": "",
    "text": "labels.xlab(self, xlab)\nCreate x-axis label\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nxlab\n\n\nstr\n\n\nx-axis label\n\n\nrequired"
  },
  {
    "objectID": "reference/xlab.html#parameters",
    "href": "reference/xlab.html#parameters",
    "title": "xlab",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nxlab\n\n\nstr\n\n\nx-axis label\n\n\nrequired"
  },
  {
    "objectID": "reference/ylab.html",
    "href": "reference/ylab.html",
    "title": "ylab",
    "section": "",
    "text": "labels.ylab(self, ylab)\nCreate y-axis label\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nylab\n\n\nstr\n\n\ny-axis label\n\n\nrequired"
  },
  {
    "objectID": "reference/ylab.html#parameters",
    "href": "reference/ylab.html#parameters",
    "title": "ylab",
    "section": "",
    "text": "Name\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\nylab\n\n\nstr\n\n\ny-axis label\n\n\nrequired"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Plotnine",
    "section": "",
    "text": "plotnine started as an effort to improve the scaling functionality in ggpy_ formally known as “ggplot for python”. It was part of a larger goal to evolve the package into one that supported a full plotting grammar. It turned out that to have a grammar of graphics system we had to just about start anew.\nThe complete guide to what constitutes a “Grammar of Graphics” is Leland Wilkinson’s book The Grammar of Graphics. To create ggplot2_ Hadley Wickham came up with an interpretation termed A layered grammar of graphics 1. Core to the interpretation is a crucial plot building pipeline 2 in ggplot2 that we adopted 3 for plotnine.\nThe R programming language has a rich statistical ecosystem that ggplot2 taps into with ease. In plotnine we have done our best to integrate with the rest of the scientific python ecosystem. Though we feel we could do more on that integration, notwithstanding language differences, users familiar with ggplot2 should be comfortable and productive with plotnine.\n\n\n\n\nmatplotlib - Plotting backend.\npandas - Data handling.\nmizani - Scales framework.\nstatsmodels - For various statistical computations.\nscipy - For various statistical computation procedures."
  },
  {
    "objectID": "about.html#history-and-objective",
    "href": "about.html#history-and-objective",
    "title": "About Plotnine",
    "section": "",
    "text": "plotnine started as an effort to improve the scaling functionality in ggpy_ formally known as “ggplot for python”. It was part of a larger goal to evolve the package into one that supported a full plotting grammar. It turned out that to have a grammar of graphics system we had to just about start anew.\nThe complete guide to what constitutes a “Grammar of Graphics” is Leland Wilkinson’s book The Grammar of Graphics. To create ggplot2_ Hadley Wickham came up with an interpretation termed A layered grammar of graphics 1. Core to the interpretation is a crucial plot building pipeline 2 in ggplot2 that we adopted 3 for plotnine.\nThe R programming language has a rich statistical ecosystem that ggplot2 taps into with ease. In plotnine we have done our best to integrate with the rest of the scientific python ecosystem. Though we feel we could do more on that integration, notwithstanding language differences, users familiar with ggplot2 should be comfortable and productive with plotnine."
  },
  {
    "objectID": "about.html#built-with",
    "href": "about.html#built-with",
    "title": "About Plotnine",
    "section": "",
    "text": "matplotlib - Plotting backend.\npandas - Data handling.\nmizani - Scales framework.\nstatsmodels - For various statistical computations.\nscipy - For various statistical computation procedures."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Grammar of Graphics for Python",
    "section": "",
    "text": "plotnine\nplotnine is an implementation of a grammar of graphics in Python based on ggplot2. The grammar allows you to compose plots by explicitly mapping variables in a dataframe to the visual objects that make up the plot.\nPlotting with a grammar of graphics is powerful. Custom (and otherwise complex) plots are easy to think about and build incremently, while the simple plots remain simple to create."
  },
  {
    "objectID": "index.html#example",
    "href": "index.html#example",
    "title": "A Grammar of Graphics for Python",
    "section": "Example",
    "text": "Example\n\nfrom plotnine import ggplot, geom_point, aes, stat_smooth, facet_wrap\nfrom plotnine.data import mtcars\n\n(ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n    + geom_point()\n    + stat_smooth(method=\"lm\")\n    + facet_wrap(\"~gear\"))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "index.html#documentation",
    "href": "index.html#documentation",
    "title": "A Grammar of Graphics for Python",
    "section": "Documentation",
    "text": "Documentation\n\nAPI Reference\nInstallation (TODO)\nGallery\nChangelog (TODO)\nAbout plotnine\nTutorials\nGlossary (TODO)\nExternal Resources external-resources"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/PlotnineAnimation.html",
    "href": "plotnine-examples/plotnine_examples/examples/PlotnineAnimation.html",
    "title": "Spiral Animation ###",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_path,\n    theme,\n    theme_void,\n    lims\n)\nfrom plotnine.animation import PlotnineAnimation\n\n# for animation in the notebook\nfrom matplotlib import rc\nrc('animation', html='html5')\n\nHow to create Animations\nThe PlotnineAnimation methods takes a sequence of plots and animates them. The best way to create the sequence is to use a function that generates plots.\nNOTE: When creating the plots make sure all the plots have scales with the same limits for each aesthetic, including the x and y aesthetics.\n\n# Parameters used to control the spiral\nn = 100\ntightness = 1.3\nkmin = 1\nkmax = 25\nnum_frames = 25\ntheta = np.linspace(-np.pi, np.pi, n)\n\ndef plot(k):\n    # For every plot we change the theta\n    _theta = theta*k\n    \n    # Polar Equation of each spiral\n    r = tightness*_theta\n    \n    df = pd.DataFrame({\n        'theta': _theta,\n        'r': r,\n        'x': r*np.sin(_theta),\n        'y': r*np.cos(_theta)\n    })\n\n    p = (ggplot(df)\n         + geom_path(aes('x', 'y', color='theta'), size=1)\n         + lims(\n             # All the plots have scales with the same limits\n             x=(-130, 130),\n             y=(-130, 130),\n             color=(-kmax*np.pi, kmax*np.pi)\n         )\n         + theme_void()\n         + theme(\n             aspect_ratio=1,\n             # Make room on the right for the legend\n             subplots_adjust={'right': 0.85}\n         )\n    )\n    return p\n\n# It is better to use a generator instead of a list\nplots = (plot(k) for k in np.linspace(kmin, kmax, num_frames))\nani = PlotnineAnimation(plots, interval=100, repeat_delay=500)\n# ani.save('/tmp/animation.mp4')\nani\n\n\n  \n  Your browser does not support the video tag.\n\n\n\nThe final image of the spiral\n\n# Gallery Plot\n\nplot(kmax)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/after_scale.html",
    "href": "plotnine-examples/plotnine_examples/examples/after_scale.html",
    "title": "after_scale",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_scale,\n    geom_bar,\n    theme_classic\n)\n\nThe bars in geom_bar have two aesthetics that control the coloring; fill for the interior and color for the boundary/edge. Using after_scale we can create a matching combination of these two.\nStart off with a mapping to the color.\n\ndf = pd.DataFrame({\n    'var1': [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n})\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(size=1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can match the color with the fill.\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(aes(fill=after_scale('color')), size=1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAs after_scale takes an expression, for the fill aesthetic we can modify the color by adding to it an alpha channel i.e. '#AABBCC' to '#AABBCC66'.\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(aes(fill=after_scale('color + \"66\"')), size=1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe rely on the fact that you can append a string to all elements of a pandas series\npd.Series(['#AABBCC', '#112233']) + '66' == pd.Series(['#AABBCC66', '#11223366'])\nWith a fitting theme.\n\n(ggplot(df, aes('var1', color='factor(var1)'))\n + geom_bar(aes(fill=after_scale('color + \"66\"')), size=1)\n + theme_classic()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/facet_grid.html",
    "href": "plotnine-examples/plotnine_examples/examples/facet_grid.html",
    "title": "Facet grid",
    "section": "",
    "text": "import pandas as pd\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    labs,\n    facet_grid,\n    theme,\n    element_text\n)\nfrom plotnine.data import mpg\n\nfacet_grid() is used to form a grid of plots, where the rows and columns of the grid are set by the faceting variables. It is useful for visualising two discrete variables.\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nBasic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet a discrete variable into rows:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ .')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet a discrete variable into columns:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('. ~ cyl')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet two discrete variables into rows and columns:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ cyl')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo change the plot order of the rows or columns in the facet grid, reorder the levels of the faceting variable in the data.\n\n# re-order categories\nmpg['drv'] = mpg['drv'].cat.reorder_categories(['f', 'r','4'])\n\n\n# facet plot with reorded drv category\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ cyl')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can choose if the scale of x- and y-axes are fixed or variable by using the scales argument within the facet_grid() command:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ .', scales = 'free')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add additional information to your facet labels, by using the labeller argument within the facet_grid() command. Below we use labeller = 'label_both' to include the column name in the facet label.\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv ~ .', labeller = 'label_both')\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can add two discrete variables to a facet:\n\n# add additional column for plotting exercise\nmpg[\"transmission\"] = mpg['trans'].map(lambda x: \"auto\" if \"auto\" in x else \"man\" if \"man\" in x else \"\")\n\n\n# inspect new column transmission which identifies cars as having an automatic or manual transmission\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\ntransmission\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\nauto\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\nman\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\nman\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\nauto\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\nauto\n\n\n\n\n\n\n\n\n# facet plot with two variables on one facet\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + facet_grid('drv + transmission ~ .') # use + to add additional faceting variables\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFacet labels can be rotated to make them easier to read using strip_text_y = element_text(angle = 0) for row labels within the theme() command (use strip_text_x = element_text(angle = 0) for column labels).\nIf the labels do not fit in the strip, adjust the width of the strip using strip_background_y for rows (use strip_background_x for columns). You may also need to adjust the text position so it fits in the strip: adjust the horizontal text position in the strip by specifying ha in element_text()(specify va in element_text() to adjust the vertical text position).\nYou can also change the colour of the strip by specifying color in element_text() .\n\n(\n    ggplot(mpg, aes(x='drv', y='model'))\n    + geom_point()\n    + facet_grid('manufacturer ~ .', scales = 'free')\n    + theme(strip_text_y = element_text(angle = 0,              # change facet text angle\n                                        ha = 'left'             # change text alignment\n                                       ),\n            strip_background_y = element_text(color = '#969dff' # change background colour of facet background\n                                              , width = 0.2     # adjust width of facet background to fit facet text\n                                             ),\n            figure_size=(6, 15)                                 # adjust width & height of figure to fit y-axis\n           )\n    + labs(x='displacement', y='')\n)\n\n\n\n\n&lt;Figure Size: (600 x 1500)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_abline.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_abline.html",
    "title": "AB line",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    labs,\n    geom_abline,\n    facet_grid\n)\nfrom plotnine.data import mpg\n\ngeom_abline() draws a line when the yintercept and gradient is supplied, and is useful as a guide.\n\n# inspect the data\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nIt’s useful to use geom_abline() with some data, so we start with a basic scatter plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nNow layer a line over the scatter plot using geom_abline(). geom_abline() requires inputs for the slope (default slope is 1) and y-intercept (default value is [0,0]).\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_abline(intercept=45, # set the y-intercept value\n                  slope=-5      # set the slope value\n                 ) \n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can plot two lines on one plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()                   \n    + geom_abline(intercept=[45,45], # add many lines to a plot using a list for the y-intercepts...\n                  slope=[-5,-7]      # ... and for the slopes\n                 )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can change the look of the line:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_abline(intercept=45,\n                  slope=-5,\n                  color='blue',      # set line colour\n                  size=2,            # set line thickness\n                  linetype=\"dashed\"  # set line type\n                 )\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\ngeom_abline() can be used with a facet plot:\n\n(\n    ggplot(mpg, aes(x='displ', y='hwy')) \n    + geom_point()\n    + geom_abline(intercept=45,slope=-5)     # add a line ...\n    + facet_grid('drv ~ .')                  # ... to a facet plot.\n    + labs(x='displacement', y='horsepower')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_boxplot.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_boxplot.html",
    "title": "A box and whiskers plot",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_boxplot,\n    geom_jitter,\n    scale_x_discrete,\n    coord_flip\n)\n\nThe boxplot compactly displays the distribution of a continuous variable.\nRead more: + wikipedia + ggplot2 docs\n\nflights = pd.read_csv('data/flights.csv')\nflights.head()\n\n\n\n\n\n\n\n\nyear\nmonth\npassengers\n\n\n\n\n0\n1949\nJanuary\n112\n\n\n1\n1949\nFebruary\n118\n\n\n2\n1949\nMarch\n132\n\n\n3\n1949\nApril\n129\n\n\n4\n1949\nMay\n121\n\n\n\n\n\n\n\nBasic boxplot\n\nmonths = [month[:3] for month in flights.month[:12]]\nprint(months)\n\n['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n\n\n(\n    ggplot(flights) \n    + geom_boxplot(aes(x='factor(month)', y='passengers'))\n    + scale_x_discrete(labels=months, name='month')  # change ticks labels on OX\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nHorizontal boxplot\n\n(\n    ggplot(flights) \n    + geom_boxplot(aes(x='factor(month)', y='passengers'))\n    + coord_flip()\n    + scale_x_discrete(\n        labels=months[::-1], \n        limits=flights.month[11::-1],\n        name='month',\n    )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nBoxplot with jittered points:\n\n(\n    ggplot(flights, aes(x='factor(month)', y='passengers')) \n    + geom_boxplot()\n    + geom_jitter()\n    + scale_x_discrete(labels=months, name='month')  # change ticks labels on OX\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_count.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_count.html",
    "title": "Categorized Data Plot",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_count,\n    scale_size_continuous\n)\nfrom plotnine.data import diamonds\n\ngeom_count() makes the point size proportional to the number of points at a location\n\ndiamonds.head()\n\n\n\n\n\n\n\n\ncarat\ncut\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0\n0.23\nIdeal\nE\nSI2\n61.5\n55.0\n326\n3.95\n3.98\n2.43\n\n\n1\n0.21\nPremium\nE\nSI1\n59.8\n61.0\n326\n3.89\n3.84\n2.31\n\n\n2\n0.23\nGood\nE\nVS1\n56.9\n65.0\n327\n4.05\n4.07\n2.31\n\n\n3\n0.29\nPremium\nI\nVS2\n62.4\n58.0\n334\n4.20\n4.23\n2.63\n\n\n4\n0.31\nGood\nJ\nSI2\n63.3\n58.0\n335\n4.34\n4.35\n2.75\n\n\n\n\n\n\n\n\nggplot(diamonds) + geom_count(aes(x='cut', y='color'))\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can adjust the size range of the points with scale_size_continuous\n\n(\n    ggplot(diamonds)\n    + geom_count(aes(x='cut', y='color'))\n    + scale_size_continuous(range=[1,20])\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_histogram.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_histogram.html",
    "title": "Histograms",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    geom_histogram,\n    facet_wrap,\n    facet_grid,\n    coord_flip,\n    scale_y_continuous,\n    scale_y_sqrt,\n    scale_y_log10,\n    scale_fill_manual,\n    theme_bw,\n    theme_xkcd\n    \n)\nfrom plotnine.data import diamonds\nfrom mizani.formatters import percent_format \n\nVisualise the distribution of a variable by dividing the x-axis into bins and counting the number of observations in each bin. Histograms display the counts with bars.\nYou can define the number of bins (e.g. divide the data five bins) or define the binwidth (e.g. each bin is size 10).\nDistributions can be visualised as: * count, * normalised count, * density, * normalised density, * scaled density as a percentage.\n\ndiamonds.head(5)\n\n\n\n\n\n\n\n\ncarat\ncut\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0\n0.23\nIdeal\nE\nSI2\n61.5\n55.0\n326\n3.95\n3.98\n2.43\n\n\n1\n0.21\nPremium\nE\nSI1\n59.8\n61.0\n326\n3.89\n3.84\n2.31\n\n\n2\n0.23\nGood\nE\nVS1\n56.9\n65.0\n327\n4.05\n4.07\n2.31\n\n\n3\n0.29\nPremium\nI\nVS2\n62.4\n58.0\n334\n4.20\n4.23\n2.63\n\n\n4\n0.31\nGood\nJ\nSI2\n63.3\n58.0\n335\n4.34\n4.35\n2.75\n\n\n\n\n\n\n\nIf you create a basic histogram, you will be prompted to define the binwidth or number of bins.\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram()\n)\n\n/Users/hassan/scm/python/plotnine/plotnine/stats/stat_bin.py:109: PlotnineWarning: 'stat_bin()' using 'bins = 142'. Pick better value with 'binwidth'.\n\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can define the width of the bins, by specifying the binwidth inside geom_histogram().\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram(binwidth=0.5) # specify the binwidth\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nOr you can define the number of bins by specifying bins inside geom_histogram(). Note, the example below uses 10 bins, however you can’t see them all because some of the bins are too small to be noticeable.\n\n(\n    ggplot(diamonds, aes(x='carat')) \n    + geom_histogram(bins=10) # specify the number of bins\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThere are different ways to visualise the distribution, you can specify this using the y argument within aes(). In the example below I’m using the default setting: raw count with after_stat('count').\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('count') # specify each bin is a count\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can normalise the raw count to 1 by using after_stat('ncount'):\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('ncount') # normalise the count to 1\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can display the density of points in a bin, (this is scaled to integrate to 1) by using after_stat('density'):\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('density') # density\n                        )) \n    + geom_histogram(binwidth=0.50)  \n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe proportion of bins can be shown, in the example below the bin=0.5 accounts for about ~55% of the data:\n\n(\n    ggplot(diamonds, aes(x='carat',\n                         y=after_stat('width*density')) # show proportion\n          ) \n    + geom_histogram(binwidth=0.5)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can also display counts as percentages by using the percent_format() which requires the mizani.formatters library:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('width*density'))) \n    + geom_histogram(binwidth=0.5)\n    + scale_y_continuous(labels=percent_format()) # display labels as a percentage\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nInstead of using stat you can use stat_bin defined within geom_histogram(), this is useful if you want to layer a few different plots in the one figure.\n\n(\n    ggplot(diamonds, aes(x='carat'))\n    + geom_histogram(binwidth=0.5, alpha=0.5)\n    + geom_histogram(binwidth=0.2, alpha=0.5, fill='green')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can also flip the x-y coordinates:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('density'))) \n    + geom_histogram(binwidth=0.5)\n    + coord_flip()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can visualise counts by other variables using fill within aes():\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('count'),fill='cut')) \n    + geom_histogram(binwidth=0.5)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can visualise too-small-to-see bars by transforming the y-axis scaling by using scale_y_sqrt() square-root scale or scale_y_log10() for a log-scale (similarly use scale_x_sqrt() and scale_x_log10() to transform the x-axis).\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('count'))) \n    + geom_histogram(binwidth=0.5)\n    + scale_y_sqrt() # square root scale\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(\n    ggplot(diamonds, aes(x = 'carat', y = after_stat('count'))) \n    + geom_histogram(binwidth = 0.5)\n    + scale_y_log10() # log scale\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nChange the look of your plot:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('density')))\n    + geom_histogram(binwidth=0.5,\n                    fill='green',  # change the fill colour (one colour)\n                    colour='pink', # change the outline\n                    size=2,        # change the thickness of the outline\n                    alpha=0.7      # change the transparency \n                    )\n    + theme_xkcd()                 # play with themes (look/arrangement)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAnother change, this time changing the fill colours manually:\n\n(\n    ggplot(diamonds, aes(x='carat', \n                         y=after_stat('density'),\n                         fill='cut'  # change the fill colour using another variable\n                        ))\n    + scale_fill_manual(values=[\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\"]) # change the fill colour\n    + geom_histogram(binwidth=0.5,\n                    colour=\"#D55E00\",# change the outline\n                    size=1,          # change the thickness of the outline\n                    alpha=0.7        # change the transparency \n                    )\n    + theme_bw()                     # play with themes (look/arrangement)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWhen faceting histograms with scaled counts/densities, they are normalised by each facet, and not overall. Here’s an example of a facet wrap:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('ncount'))) \n    + geom_histogram(binwidth=0.5)\n    + facet_wrap('color') # facet wrap\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nHere’s an example of a facet grid with the count normalised in each grid:\n\n(\n    ggplot(diamonds, aes(x='carat', y=after_stat('ncount'))) \n    + geom_histogram(binwidth=0.5)\n    + facet_grid('cut ~ color')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_line.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_line.html",
    "title": "Line plots",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_line,\n    labs,\n    arrow\n)\nfrom plotnine.data import economics\n\ngeom_line() connects the dots, and is useful for time series data.\n\neconomics.head()\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n\n\n\n\n\n\n\n\n(\n    ggplot(economics, aes(x='date', y='uempmed')) \n    + geom_line() # line plot\n    + labs(x='date', y='median duration of unemployment')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can put arrows at the end of a line:\n\n(\n    ggplot(economics, aes(x='date', y='pop')) \n    + geom_line(arrow=arrow()) # add an arrow to the end of the line\n    + labs(x='date', y='total population (,000)')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe arrow can be modified for a different look:\n\n(\n    ggplot(economics, aes(x='date', y='pop')) \n    + geom_line(arrow=arrow(angle=35,      # defines the shape of the arrow head\n                              ends=\"both\",   # input what end to put the arrow on\n                              type=\"closed\", # defines arrow head type\n                             )) \n    + labs(x='date', y='total population (,000)')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can change the look of the line:\n\n(\n    ggplot(economics, aes(x='date', y='uempmed')) \n    + geom_line(color='pink',        # set line colour\n                  size=7,            # set line thickness\n                  linetype='dashed'  # set line type\n               )\n    + labs(x='date', y='median duration of unemployment')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_path.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_path.html",
    "title": "Path plots",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_path,\n    geom_line,\n    labs,\n    scale_color_continuous,\n    element_text,\n    theme\n)\nfrom plotnine.data import economics\n\ngeom_path() connects the observations in the order in which they appear in the data, this is different from geom_line() which connects observations in order of the variable on the x axis.\n\neconomics.head(10) # notice the rows are ordered by date\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n\n\n5\n1967-12-01\n525.8\n199657\n12.1\n4.8\n3018\n\n\n6\n1968-01-01\n531.5\n199808\n11.7\n5.1\n2878\n\n\n7\n1968-02-01\n534.2\n199920\n12.2\n4.5\n3001\n\n\n8\n1968-03-01\n544.9\n200056\n11.6\n4.1\n2877\n\n\n9\n1968-04-01\n544.6\n200208\n12.2\n4.6\n2709\n\n\n\n\n\n\n\nBecause the data is in date order geom_path() (in pint) produces the same result as geom_line() (in black):\n\n(\n    ggplot(economics, aes(x='date', y='unemploy')) \n    + geom_line(size=5)             # plot geom_line as the first layer                   \n    + geom_path(colour='#ff69b4',   # plot a path - colour pink \n               size=1)   \n    + labs(x='date', y='unemployment (,000)') # label x & y-axis\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nPlotting unemployment (scaled by population) versus savings rate shows how geom_path() differs from geom_line(). Because geom_path() connects the observations in the order in which they appear in the data, this line is like a “journey through time”:\n\n(\n    ggplot(economics, aes(x='unemploy/pop', y='psavert')) \n    + geom_path()                                    # plot geom path\n    + labs(x='scaled unemployment', y='saving rate') # label x & y-axis\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nComparing geom_line() (black) to geom_path() (pink) shows how these two plots differ in what they can show: geom_path() shows the savings rate has gone down over time, which is not evident with geom_path().\n\n(\n    ggplot(economics, aes(x='unemploy/pop', y='psavert')) \n    + geom_path(colour='#ff69b4', # plot geom_path as the first layer - colour pink\n                alpha=0.5,        # line transparency\n                size=2.5)         # line thickness\n    + geom_line()                   # layer geom_line \n    + labs(x='scaled unemployment', y='saving rate') # label x & y-axis\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe geom_path can be easier to interpret if time is coloured in. First convert time to a number, and use this number to colour the path:\n\n# convert date to a number \neconomics['date_as_number']=pd.to_numeric(economics['date'])\n\n\n# inspect new column\neconomics.head()\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\ndate_as_number\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n-79056000000000000\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n-76377600000000000\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n-73699200000000000\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n-71107200000000000\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n-68428800000000000\n\n\n\n\n\n\n\nThe path is coloured such that it changes with time using the command aes(colour='date_as_number') within geom_path().\n\n# input\nlegend_breaks=[-79056000000000000, 709948800000000000, 1401580800000000000] # used to modify colour-graded legend\nlegend_labels=[\"1967-Jul\", \"1992-Jun\",\"2014-Jun\"]\n\n# plot\n(\n    ggplot(economics, aes(x='unemploy/pop', y='psavert')) \n    + geom_path(aes(colour='date_as_number'))       # colour geom_path using time variable \"date_as_number\"\n    + labs(x='scaled unemployment', y='saving rate')\n    + scale_color_continuous(breaks=legend_breaks,  # set legend breaks (where labels will appear)\n                            labels=legend_labels)   # set labels on legend\n    + theme(legend_title=element_text(text='Date')) # set title of legend\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_segment.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_segment.html",
    "title": "Ranges of Similar Variables",
    "section": "",
    "text": "# NOTE: This notebook uses the polars package\nimport pandas as pd\nimport pandas.api.types as pdtypes\nimport numpy as np\n\nfrom plotnine import *\nimport polars as pl\nfrom polars import col\n\nComparing the point to point difference of many similar variables\nRead the data.\nSource: Pew Research Global Attitudes Spring 2015\n\n!head -n 20 'data/survey-social-media.csv'\n\nPSRAID,COUNTRY,Q145,Q146,Q70,Q74\n100000,Ethiopia,Female,35,No, \n100001,Ethiopia,Female,25,No, \n100002,Ethiopia,Male,40,Don’t know, \n100003,Ethiopia,Female,30,Don’t know, \n100004,Ethiopia,Male,22,No, \n100005,Ethiopia,Male,40,No, \n100006,Ethiopia,Female,20,No, \n100007,Ethiopia,Female,18,No,No\n100008,Ethiopia,Male,50,No, \n100009,Ethiopia,Male,35,No, \n100010,Ethiopia,Female,20,No, \n100011,Ethiopia,Female,30,Don’t know, \n100012,Ethiopia,Male,60,No, \n100013,Ethiopia,Male,18,No, \n100014,Ethiopia,Male,40,No, \n100015,Ethiopia,Male,28,Don’t know, \n100016,Ethiopia,Female,55,Don’t know, \n100017,Ethiopia,Male,30,Don’t know, \n100018,Ethiopia,Female,22,No, \n\n\n\ncolumns = dict(\n    COUNTRY='country',\n    Q145='gender',\n    Q146='age',\n    Q70='use_internet',\n    Q74='use_social_media'\n)\n\ndata = pl.scan_csv(\n    'data/survey-social-media.csv',\n    dtypes=dict(Q146=pl.Utf8),\n).rename(\n    columns\n).select([\n    'country',\n    'age',\n    'use_social_media'\n]).collect()\n\ndata.sample(10, seed=123)\n\n\n\nshape: (10, 3)\n\n\n\n\ncountry\n\n\nage\n\n\nuse_social_media\n\n\n\n\nstr\n\n\nstr\n\n\nstr\n\n\n\n\n\n\n\"Venezuela\"\n\n\n\"47\"\n\n\n\"Yes\"\n\n\n\n\n\"Israel\"\n\n\n\"63\"\n\n\n\" \"\n\n\n\n\n\"Germany\"\n\n\n\"60\"\n\n\n\"Yes\"\n\n\n\n\n\"France\"\n\n\n\"60\"\n\n\n\"No\"\n\n\n\n\n\"Philippines\"\n\n\n\"25\"\n\n\n\" \"\n\n\n\n\n\"China\"\n\n\n\"40\"\n\n\n\" \"\n\n\n\n\n\"Senegal\"\n\n\n\"20\"\n\n\n\" \"\n\n\n\n\n\"Argentina\"\n\n\n\"47\"\n\n\n\"Yes\"\n\n\n\n\n\"India\"\n\n\n\"53\"\n\n\n\"No\"\n\n\n\n\n\"Jordan\"\n\n\n\"24\"\n\n\n\" \"\n\n\n\n\n\n\n\nCreate age groups for users of social media\n\nyes_no = ['Yes', 'No']\nvalid_age_groups = ['18-34', '35-49', '50+']\n\nrdata = data.with_columns([\n    pl\n    .when(col('age') &lt;= '34').then('18-34')\n    .when(col('age') &lt;= '49').then('35-49')\n    .when(col('age') &lt; '98').then('50+')\n    .otherwise(\"\")\n    .alias('age_group'),\n    pl.count().over(\"country\").alias('country_count')\n]).filter(\n    col('age_group').is_in(valid_age_groups) &\n    col('use_social_media').is_in(yes_no)\n).groupby(['country', 'age_group']).agg([\n    # social media use percentage\n    ((col('use_social_media') == 'Yes').sum() * 100 / pl.count()).alias('sm_use_percent'),\n    \n    # social media question response rate\n    (col('use_social_media').is_in(yes_no).sum() * 100 / col('country_count').first()).alias('smq_response_rate')\n]).sort(['country', 'age_group'])\n\nrdata.head()\n\n\n\nshape: (5, 4)\n\n\n\n\ncountry\n\n\nage_group\n\n\nsm_use_percent\n\n\nsmq_response_rate\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\n\n\n\n\n\"Argentina\"\n\n\n\"18-34\"\n\n\n90.883191\n\n\n35.1\n\n\n\n\n\"Argentina\"\n\n\n\"35-49\"\n\n\n84.40367\n\n\n21.8\n\n\n\n\n\"Argentina\"\n\n\n\"50+\"\n\n\n67.333333\n\n\n15.0\n\n\n\n\n\"Australia\"\n\n\n\"18-34\"\n\n\n90.862944\n\n\n19.621514\n\n\n\n\n\"Australia\"\n\n\n\"35-49\"\n\n\n78.04878\n\n\n20.418327\n\n\n\n\n\n\n\nTop 14 countries by response rate to the social media question.\n\ndef col_format(name, fmt):\n    # Format useing python formating\n    # for more control over\n    return col(name).apply(lambda x: fmt.format(x=x))\n\ndef float_to_str_round(name):\n    return col_format(name, '{x:.0f}')\n\nn = 14\n\ntop = rdata.groupby('country').agg([\n    col('smq_response_rate').sum().alias('r')\n]).sort('r', reverse=True).head(n)\ntop_countries = top['country']\n\nexpr = float_to_str_round('sm_use_percent')\nexpr_pct = expr + '%'\n\npoint_data = rdata.filter(\n    col('country').is_in(top_countries)\n).with_column(\n    pl.when(col('country') == 'France').then(expr_pct).otherwise(expr).alias('sm_use_percent_str')\n)\n\npoint_data.head()\n\n\n\nshape: (5, 5)\n\n\n\n\ncountry\n\n\nage_group\n\n\nsm_use_percent\n\n\nsmq_response_rate\n\n\nsm_use_percent_str\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nstr\n\n\n\n\n\n\n\"Australia\"\n\n\n\"18-34\"\n\n\n90.862944\n\n\n19.621514\n\n\n\"91\"\n\n\n\n\n\"Australia\"\n\n\n\"35-49\"\n\n\n78.04878\n\n\n20.418327\n\n\n\"78\"\n\n\n\n\n\"Australia\"\n\n\n\"50+\"\n\n\n48.479087\n\n\n52.390438\n\n\n\"48\"\n\n\n\n\n\"Canada\"\n\n\n\"18-34\"\n\n\n92.063492\n\n\n25.099602\n\n\n\"92\"\n\n\n\n\n\"Canada\"\n\n\n\"35-49\"\n\n\n75.925926\n\n\n21.513944\n\n\n\"76\"\n\n\n\n\n\n\n\n\nsegment_data = point_data.groupby('country').agg([\n    col('sm_use_percent').min().alias('min'),\n    col('sm_use_percent').max().alias('max'),\n]).with_column(\n    (col('max') - col('min')).alias('gap')\n).sort(\n    'gap',\n).with_columns([\n    float_to_str_round('min').alias('min_str'),\n    float_to_str_round('max').alias('max_str'),\n    float_to_str_round('gap').alias('gap_str')\n])\n\nsegment_data.head()\n\n\n\nshape: (5, 7)\n\n\n\n\ncountry\n\n\nmin\n\n\nmax\n\n\ngap\n\n\nmin_str\n\n\nmax_str\n\n\ngap_str\n\n\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\nstr\n\n\n\n\n\n\n\"Russia\"\n\n\n76.07362\n\n\n95.151515\n\n\n19.077896\n\n\n\"76\"\n\n\n\"95\"\n\n\n\"19\"\n\n\n\n\n\"Israel\"\n\n\n55.405405\n\n\n88.311688\n\n\n32.906283\n\n\n\"55\"\n\n\n\"88\"\n\n\n\"33\"\n\n\n\n\n\"United Kingdom...\n\n\n52.74463\n\n\n86.096257\n\n\n33.351627\n\n\n\"53\"\n\n\n\"86\"\n\n\n\"33\"\n\n\n\n\n\"United States\"\n\n\n52.597403\n\n\n88.669951\n\n\n36.072548\n\n\n\"53\"\n\n\n\"89\"\n\n\n\"36\"\n\n\n\n\n\"Canada\"\n\n\n53.986333\n\n\n92.063492\n\n\n38.077159\n\n\n\"54\"\n\n\n\"92\"\n\n\n\"38\"\n\n\n\n\n\n\n\nFormat the floating point data that will be plotted into strings\nSet the order of the countries along the y-axis by setting the country variable to an ordered categorical.\n\ncountry_expr = col('country').cast(pl.Categorical)\nsegment_data = segment_data.with_column(country_expr)\npoint_data = point_data.with_columns(country_expr)\n\nFirst plot\n\n# The right column (youngest-oldest gap) location\nxgap = 112\n\n(ggplot()\n # Range strip\n + geom_segment(\n     segment_data,\n     aes(x='min', xend='max', y='country', yend='country'),\n     size=6,\n     color='#a7a9ac'\n )\n # Age group markers\n + geom_point(\n     point_data,\n     aes('sm_use_percent', 'country', color='age_group', fill='age_group'),\n     size=5,\n     stroke=0.7,\n )\n # Age group percentages\n + geom_text(\n     point_data.filter(col('age_group')==\"50+\"),\n     aes(x='sm_use_percent-2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='right'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"35-49\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str'),\n     size=8,\n     ha='left',\n     va='center',\n     color='white'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"18-34\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='left',\n )\n # gap difference\n + geom_text(\n     segment_data,\n     aes(x=xgap, y='country', label='gap_str'),\n     size=9,\n     fontweight='bold',\n     format_string='+{}'\n )\n)\n\n\n\n\nTweak it\n\n# The right column (youngest-oldest gap) location\nxgap = 115\n\n# Gallery Plot\n\n(ggplot()\n # Background Strips                                     # new\n + geom_segment(\n     segment_data,\n     aes(y='country', yend='country'),\n     x=0, xend=100,\n     size=8.5,\n     color='#edece3'\n )\n # vertical grid lines along the strips                  # new\n + annotate(\n     'segment',\n     x=list(range(10, 100, 10)) * n,\n     xend=list(range(10, 100, 10)) * n,\n     y=np.tile(np.arange(1, n+1), 9)-.25,\n     yend=np.tile(np.arange(1, n+1), 9) + .25,\n     color='#CCCCCC'\n )\n # Range strip\n + geom_segment(\n     segment_data,\n     aes(x='min', xend='max', y='country', yend='country'),\n     size=6,\n     color='#a7a9ac'\n )\n # Age group markers\n + geom_point(\n     point_data,\n     aes('sm_use_percent', 'country', color='age_group', fill='age_group'),\n     size=5,\n     stroke=0.7,\n )\n # Age group percentages\n + geom_text(\n     point_data.filter(col('age_group')==\"50+\"),\n     aes(x='sm_use_percent-2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='right',\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"35-49\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str'),\n     size=8,\n     ha='left',\n     va='center',\n     color='white'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"18-34\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='left',\n )\n # countries right-hand-size (instead of y-axis)         # new\n + geom_text(\n     segment_data,\n     aes(y='country', label='country'),\n     x=-1,\n     size=8,\n     ha='right',\n     fontweight='bold',\n     color='#222222'\n )\n # gap difference\n + geom_vline(xintercept=xgap, color='#edece3', size=32)  # new\n + geom_text(\n     segment_data,\n     aes(x=xgap, y='country', label='gap_str'),\n     size=9,\n     fontweight='bold',\n     format_string='+{}'\n )\n # Annotations                                            # new\n + annotate('text', x=31, y=n+1.1, label='50+', size=9, color='#ea9f2f', va='top')\n + annotate('text', x=56, y=n+1.1, label='35-49', size=9, color='#6d6e71', va='top')\n + annotate('text', x=85, y=n+1.1, label='18-34', size=9, color='#939c49', va='top')\n + annotate('text', x=xgap, y=n+.5, label='Youngest-\\nOldest Gap', size=9, color='#444444', va='bottom', ha='center')\n + annotate('point', x=[31, 56, 85], y=n+.3, alpha=0.85, stroke=0)\n + annotate('segment', x=[31, 56, 85], xend=[31, 56, 85], y=n+.3, yend=n+.8, alpha=0.85)\n + annotate('hline', yintercept=[x+0.5 for x in range(2, n, 2)], alpha=.5, linetype='dotted', size=0.7)\n \n # Better spacing and color                              # new\n + scale_x_continuous(limits=(-18, xgap+2))\n + scale_y_discrete(expand=(0, 0.25, 0.1, 0))\n + scale_fill_manual(values=['#c3ca8c', '#d1d3d4', '#f2c480'])\n + scale_color_manual(values=['#939c49', '#6d6e71', '#ea9f2f'])\n + guides(color=None, fill=None)\n + theme_void()\n + theme(figure_size=(8, 8.5))\n)\n\n\n\n\nInstead of looking at this plot as having a country variable on the y-axis and a percentage variable on the x-axis, we can view it as having vertically stacked up many indepedent variables, the values of which have a similar scale.\nProtip: Save a pdf file.\n\nChange in Rank\nComparing a group of ranked items at two different times\nRead the data.\nSource: World Bank - Infanct Mortality Rate (per 1,000 live births)b\n\ndata = pl.read_csv(\n    'data/API_SP.DYN.IMRT.IN_DS2_en_csv_v2/API_SP.DYN.IMRT.IN_DS2_en_csv_v2.csv',\n    skip_rows=4,\n    null_values=\"\",\n)\n\n# Columns as valid python variables\nyear_columns = {c: f'y{c}' for c in data.columns if c[:2] in {'19', '20'}}\ndata = data.rename({\n    'Country Name': 'country',\n    'Country Code': 'code',\n    **year_columns\n}).drop(['Indicator Name', 'Indicator Code'])\ndata.head()\n\n\n\nshape: (5, 59)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\n\n\n\n\n\"Aruba\"\n\n\n\"ABW\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n\n\n\"Afghanistan\"\n\n\n\"AFG\"\n\n\nnull\n\n\n240.5\n\n\n236.3\n\n\n232.3\n\n\n228.5\n\n\n224.6\n\n\n220.7\n\n\n217.0\n\n\n213.3\n\n\n209.8\n\n\n206.1\n\n\n202.2\n\n\n198.2\n\n\n194.3\n\n\n190.3\n\n\n186.6\n\n\n182.6\n\n\n178.7\n\n\n174.5\n\n\n170.4\n\n\n166.1\n\n\n161.8\n\n\n157.5\n\n\n153.2\n\n\n148.7\n\n\n144.5\n\n\n140.2\n\n\n135.7\n\n\n131.3\n\n\n126.8\n\n\n122.5\n\n\n118.3\n\n\n114.4\n\n\n110.9\n\n\n107.7\n\n\n105.0\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.2\n\n\n95.4\n\n\n93.4\n\n\n91.2\n\n\n89.0\n\n\n86.7\n\n\n84.4\n\n\n82.3\n\n\n80.4\n\n\n78.6\n\n\n76.8\n\n\n75.1\n\n\n73.4\n\n\n71.7\n\n\n69.9\n\n\n68.1\n\n\n66.3\n\n\nnull\n\n\n\n\n\"Angola\"\n\n\n\"AGO\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n138.3\n\n\n137.5\n\n\n136.8\n\n\n136.0\n\n\n135.3\n\n\n134.9\n\n\n134.4\n\n\n134.1\n\n\n133.8\n\n\n133.6\n\n\n133.5\n\n\n133.5\n\n\n133.5\n\n\n133.4\n\n\n133.2\n\n\n132.8\n\n\n132.3\n\n\n131.5\n\n\n130.6\n\n\n129.5\n\n\n128.3\n\n\n126.9\n\n\n125.5\n\n\n124.1\n\n\n122.8\n\n\n121.2\n\n\n119.4\n\n\n117.1\n\n\n114.7\n\n\n112.2\n\n\n109.6\n\n\n106.8\n\n\n104.1\n\n\n101.4\n\n\n98.8\n\n\n96.0\n\n\nnull\n\n\n\n\n\"Albania\"\n\n\n\"ALB\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n73.0\n\n\n68.4\n\n\n64.0\n\n\n59.9\n\n\n56.1\n\n\n52.4\n\n\n49.1\n\n\n45.9\n\n\n43.2\n\n\n40.8\n\n\n38.6\n\n\n36.7\n\n\n35.1\n\n\n33.7\n\n\n32.5\n\n\n31.4\n\n\n30.3\n\n\n29.1\n\n\n27.9\n\n\n26.8\n\n\n25.5\n\n\n24.4\n\n\n23.2\n\n\n22.1\n\n\n21.0\n\n\n20.0\n\n\n19.1\n\n\n18.3\n\n\n17.4\n\n\n16.7\n\n\n16.0\n\n\n15.4\n\n\n14.8\n\n\n14.3\n\n\n13.8\n\n\n13.3\n\n\n12.9\n\n\n12.5\n\n\nnull\n\n\n\n\n\"Andorra\"\n\n\n\"AND\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n7.5\n\n\n7.0\n\n\n6.5\n\n\n6.1\n\n\n5.6\n\n\n5.2\n\n\n5.0\n\n\n4.6\n\n\n4.3\n\n\n4.1\n\n\n3.9\n\n\n3.7\n\n\n3.5\n\n\n3.3\n\n\n3.2\n\n\n3.1\n\n\n2.9\n\n\n2.8\n\n\n2.7\n\n\n2.6\n\n\n2.5\n\n\n2.4\n\n\n2.3\n\n\n2.2\n\n\n2.1\n\n\n2.1\n\n\nnull\n\n\n\n\n\n\n\nThe data includes regional aggregates. To tell apart the regional aggregates we need the metadata. Every row in the data table has a corresponding row in the metadata table. Where the row has regional aggregate data, the Region column in the metadata table is NaN.\n\ndef ordered_categorical(s, categories=None):\n    \"\"\"\n    Create a categorical ordered according to the categories\n    \"\"\"\n    name = getattr(s, 'name', '')\n    if categories is None:\n        return pl.Series(name, s).cast(pl.Categorical)\n\n    with pl.StringCache():\n        pl.Series(categories).cast(pl.Categorical)\n        return pl.Series(name, s).cast(pl.Categorical)\n\ncolumns = {\n    'Country Code': 'code',\n    'Region': 'region',\n    'IncomeGroup': 'income_group'\n}\n\nmetadata = pl.scan_csv(\n    'data/API_SP.DYN.IMRT.IN_DS2_en_csv_v2/Metadata_Country_API_SP.DYN.IMRT.IN_DS2_en_csv_v2.csv'\n).rename(\n    columns\n).select(\n    list(columns.values())\n).filter(\n    # Drop the regional aggregate information\n    (col('region') != '') & (col('income_group') != '')\n).collect()\n\ncat_order = ['High income', 'Upper middle income', 'Lower middle income', 'Low income']\nmetadata = metadata.with_columns([\n    ordered_categorical(metadata['income_group'], cat_order)\n])\n\nmetadata.head(10)\n\n\n\nshape: (10, 3)\n\n\n\n\ncode\n\n\nregion\n\n\nincome_group\n\n\n\n\nstr\n\n\nstr\n\n\ncat\n\n\n\n\n\n\n\"ABW\"\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\"AFG\"\n\n\n\"South Asia\"\n\n\n\"Low income\"\n\n\n\n\n\"AGO\"\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n\n\n\"ALB\"\n\n\n\"Europe & Centr...\n\n\n\"Upper middle i...\n\n\n\n\n\"AND\"\n\n\n\"Europe & Centr...\n\n\n\"High income\"\n\n\n\n\n\"ARE\"\n\n\n\"Middle East & ...\n\n\n\"High income\"\n\n\n\n\n\"ARG\"\n\n\n\"Latin America ...\n\n\n\"Upper middle i...\n\n\n\n\n\"ARM\"\n\n\n\"Europe & Centr...\n\n\n\"Lower middle i...\n\n\n\n\n\"ASM\"\n\n\n\"East Asia & Pa...\n\n\n\"Upper middle i...\n\n\n\n\n\"ATG\"\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\n\n\nRemove the regional aggregates, to create a table with only country data\n\ncountry_data = data.join(metadata, on='code')\ncountry_data.head()\n\n\n\nshape: (5, 61)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\nregion\n\n\nincome_group\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\ncat\n\n\n\n\n\n\n\"Aruba\"\n\n\n\"ABW\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\"Afghanistan\"\n\n\n\"AFG\"\n\n\nnull\n\n\n240.5\n\n\n236.3\n\n\n232.3\n\n\n228.5\n\n\n224.6\n\n\n220.7\n\n\n217.0\n\n\n213.3\n\n\n209.8\n\n\n206.1\n\n\n202.2\n\n\n198.2\n\n\n194.3\n\n\n190.3\n\n\n186.6\n\n\n182.6\n\n\n178.7\n\n\n174.5\n\n\n170.4\n\n\n166.1\n\n\n161.8\n\n\n157.5\n\n\n153.2\n\n\n148.7\n\n\n144.5\n\n\n140.2\n\n\n135.7\n\n\n131.3\n\n\n126.8\n\n\n122.5\n\n\n118.3\n\n\n114.4\n\n\n110.9\n\n\n107.7\n\n\n105.0\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.2\n\n\n95.4\n\n\n93.4\n\n\n91.2\n\n\n89.0\n\n\n86.7\n\n\n84.4\n\n\n82.3\n\n\n80.4\n\n\n78.6\n\n\n76.8\n\n\n75.1\n\n\n73.4\n\n\n71.7\n\n\n69.9\n\n\n68.1\n\n\n66.3\n\n\nnull\n\n\n\"South Asia\"\n\n\n\"Low income\"\n\n\n\n\n\"Angola\"\n\n\n\"AGO\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n138.3\n\n\n137.5\n\n\n136.8\n\n\n136.0\n\n\n135.3\n\n\n134.9\n\n\n134.4\n\n\n134.1\n\n\n133.8\n\n\n133.6\n\n\n133.5\n\n\n133.5\n\n\n133.5\n\n\n133.4\n\n\n133.2\n\n\n132.8\n\n\n132.3\n\n\n131.5\n\n\n130.6\n\n\n129.5\n\n\n128.3\n\n\n126.9\n\n\n125.5\n\n\n124.1\n\n\n122.8\n\n\n121.2\n\n\n119.4\n\n\n117.1\n\n\n114.7\n\n\n112.2\n\n\n109.6\n\n\n106.8\n\n\n104.1\n\n\n101.4\n\n\n98.8\n\n\n96.0\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n\n\n\"Albania\"\n\n\n\"ALB\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n73.0\n\n\n68.4\n\n\n64.0\n\n\n59.9\n\n\n56.1\n\n\n52.4\n\n\n49.1\n\n\n45.9\n\n\n43.2\n\n\n40.8\n\n\n38.6\n\n\n36.7\n\n\n35.1\n\n\n33.7\n\n\n32.5\n\n\n31.4\n\n\n30.3\n\n\n29.1\n\n\n27.9\n\n\n26.8\n\n\n25.5\n\n\n24.4\n\n\n23.2\n\n\n22.1\n\n\n21.0\n\n\n20.0\n\n\n19.1\n\n\n18.3\n\n\n17.4\n\n\n16.7\n\n\n16.0\n\n\n15.4\n\n\n14.8\n\n\n14.3\n\n\n13.8\n\n\n13.3\n\n\n12.9\n\n\n12.5\n\n\nnull\n\n\n\"Europe & Centr...\n\n\n\"Upper middle i...\n\n\n\n\n\"Andorra\"\n\n\n\"AND\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n7.5\n\n\n7.0\n\n\n6.5\n\n\n6.1\n\n\n5.6\n\n\n5.2\n\n\n5.0\n\n\n4.6\n\n\n4.3\n\n\n4.1\n\n\n3.9\n\n\n3.7\n\n\n3.5\n\n\n3.3\n\n\n3.2\n\n\n3.1\n\n\n2.9\n\n\n2.8\n\n\n2.7\n\n\n2.6\n\n\n2.5\n\n\n2.4\n\n\n2.3\n\n\n2.2\n\n\n2.1\n\n\n2.1\n\n\nnull\n\n\n\"Europe & Centr...\n\n\n\"High income\"\n\n\n\n\n\n\n\nWe are interested in the changes in rank between 1960 and 2015. To plot a reasonable sized graph, we randomly sample 35 countries.\n\nsampled_data = country_data.drop_nulls(\n    subset=['y1960', 'y2015']\n).sample(\n    n=35,\n    seed=123\n).with_columns([\n    col('y1960').rank(method='ordinal').cast(pl.Int64).suffix('_rank'),\n    col('y2015').rank(method='ordinal').cast(pl.Int64).suffix('_rank')\n]).sort('y2015_rank', reverse=True)\n\nsampled_data.head()\n\n\n\nshape: (5, 63)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\nregion\n\n\nincome_group\n\n\ny1960_rank\n\n\ny2015_rank\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\ncat\n\n\ni64\n\n\ni64\n\n\n\n\n\n\n\"Togo\"\n\n\n\"TGO\"\n\n\n162.4\n\n\n159.4\n\n\n156.4\n\n\n153.5\n\n\n150.5\n\n\n147.7\n\n\n144.7\n\n\n141.8\n\n\n138.8\n\n\n135.8\n\n\n132.8\n\n\n130.0\n\n\n127.2\n\n\n124.4\n\n\n121.8\n\n\n119.2\n\n\n116.6\n\n\n114.1\n\n\n111.7\n\n\n109.2\n\n\n106.9\n\n\n104.8\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.1\n\n\n95.5\n\n\n94.0\n\n\n92.6\n\n\n91.4\n\n\n90.2\n\n\n89.0\n\n\n87.9\n\n\n86.8\n\n\n85.5\n\n\n84.2\n\n\n82.8\n\n\n81.2\n\n\n79.6\n\n\n77.9\n\n\n76.2\n\n\n74.4\n\n\n72.6\n\n\n70.8\n\n\n69.1\n\n\n67.4\n\n\n65.7\n\n\n64.1\n\n\n62.5\n\n\n60.9\n\n\n59.3\n\n\n57.9\n\n\n56.5\n\n\n55.0\n\n\n53.6\n\n\n52.3\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n33\n\n\n35\n\n\n\n\n\"Haiti\"\n\n\n\"HTI\"\n\n\n194.8\n\n\n191.5\n\n\n188.3\n\n\n185.2\n\n\n182.2\n\n\n179.1\n\n\n176.0\n\n\n172.9\n\n\n169.8\n\n\n166.6\n\n\n163.4\n\n\n160.1\n\n\n156.6\n\n\n153.0\n\n\n149.5\n\n\n146.0\n\n\n142.6\n\n\n139.2\n\n\n135.8\n\n\n132.5\n\n\n129.4\n\n\n126.2\n\n\n123.0\n\n\n120.0\n\n\n117.1\n\n\n114.3\n\n\n111.5\n\n\n108.8\n\n\n106.1\n\n\n103.5\n\n\n101.0\n\n\n98.4\n\n\n95.8\n\n\n93.1\n\n\n90.4\n\n\n87.8\n\n\n85.1\n\n\n82.4\n\n\n79.9\n\n\n77.4\n\n\n75.0\n\n\n72.8\n\n\n70.7\n\n\n68.9\n\n\n67.2\n\n\n65.6\n\n\n64.1\n\n\n62.7\n\n\n61.3\n\n\n60.0\n\n\n85.5\n\n\n57.5\n\n\n56.2\n\n\n54.8\n\n\n53.5\n\n\n52.2\n\n\nnull\n\n\n\"Latin America ...\n\n\n\"Low income\"\n\n\n35\n\n\n34\n\n\n\n\n\"Gambia, The\"\n\n\n\"GMB\"\n\n\n148.4\n\n\n146.1\n\n\n143.8\n\n\n141.5\n\n\n139.3\n\n\n137.1\n\n\n134.9\n\n\n132.6\n\n\n130.5\n\n\n128.3\n\n\n126.0\n\n\n123.8\n\n\n121.5\n\n\n119.1\n\n\n116.7\n\n\n114.4\n\n\n112.1\n\n\n109.8\n\n\n107.6\n\n\n105.4\n\n\n103.2\n\n\n100.9\n\n\n98.6\n\n\n96.2\n\n\n93.7\n\n\n91.3\n\n\n88.9\n\n\n86.5\n\n\n84.3\n\n\n82.1\n\n\n80.0\n\n\n78.0\n\n\n76.1\n\n\n74.3\n\n\n72.6\n\n\n70.9\n\n\n69.3\n\n\n67.7\n\n\n66.2\n\n\n64.8\n\n\n63.3\n\n\n62.0\n\n\n60.6\n\n\n59.3\n\n\n58.0\n\n\n56.8\n\n\n55.6\n\n\n54.5\n\n\n53.6\n\n\n52.6\n\n\n51.7\n\n\n50.9\n\n\n50.1\n\n\n49.4\n\n\n48.6\n\n\n47.9\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n32\n\n\n33\n\n\n\n\n\"Zimbabwe\"\n\n\n\"ZWE\"\n\n\n92.6\n\n\n90.1\n\n\n87.6\n\n\n85.3\n\n\n82.8\n\n\n80.5\n\n\n78.3\n\n\n76.3\n\n\n74.7\n\n\n73.4\n\n\n72.4\n\n\n71.6\n\n\n71.1\n\n\n70.7\n\n\n70.5\n\n\n70.3\n\n\n70.1\n\n\n69.8\n\n\n69.2\n\n\n68.1\n\n\n66.4\n\n\n64.2\n\n\n61.6\n\n\n58.8\n\n\n56.0\n\n\n53.6\n\n\n51.7\n\n\n50.4\n\n\n49.8\n\n\n50.2\n\n\n51.2\n\n\n52.6\n\n\n54.5\n\n\n56.4\n\n\n58.1\n\n\n60.1\n\n\n61.6\n\n\n62.7\n\n\n63.3\n\n\n63.5\n\n\n63.5\n\n\n63.2\n\n\n62.7\n\n\n61.9\n\n\n61.5\n\n\n61.0\n\n\n60.3\n\n\n59.9\n\n\n58.9\n\n\n57.7\n\n\n55.8\n\n\n54.0\n\n\n49.4\n\n\n48.8\n\n\n47.6\n\n\n46.6\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n19\n\n\n32\n\n\n\n\n\"Zambia\"\n\n\n\"ZMB\"\n\n\n123.2\n\n\n120.9\n\n\n118.7\n\n\n116.7\n\n\n115.1\n\n\n114.0\n\n\n113.3\n\n\n112.9\n\n\n112.2\n\n\n111.1\n\n\n109.3\n\n\n106.7\n\n\n103.7\n\n\n100.7\n\n\n98.1\n\n\n96.3\n\n\n95.3\n\n\n95.1\n\n\n95.3\n\n\n95.6\n\n\n96.1\n\n\n97.0\n\n\n98.3\n\n\n100.2\n\n\n102.7\n\n\n105.6\n\n\n108.3\n\n\n110.6\n\n\n112.2\n\n\n113.1\n\n\n113.3\n\n\n113.0\n\n\n112.4\n\n\n111.3\n\n\n109.7\n\n\n107.8\n\n\n106.1\n\n\n104.6\n\n\n103.1\n\n\n100.9\n\n\n97.6\n\n\n92.7\n\n\n86.5\n\n\n80.0\n\n\n73.9\n\n\n68.7\n\n\n64.9\n\n\n61.3\n\n\n58.7\n\n\n55.6\n\n\n52.9\n\n\n51.1\n\n\n49.0\n\n\n46.5\n\n\n44.7\n\n\n43.3\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n23\n\n\n31\n\n\n\n\n\n\n\nFirst graph\n\n(ggplot(sampled_data)\n + geom_text(aes(1, 'y1960_rank', label='country'), ha='right', size=9)\n + geom_text(aes(2, 'y2015_rank', label='country'), ha='left', size=9)\n + geom_point(aes(1, 'y1960_rank', color='income_group'), size=2.5)\n + geom_point(aes(2, 'y2015_rank', color='income_group'), size=2.5)\n + geom_segment(aes(x=1, y='y1960_rank', xend=2, yend='y2015_rank', color='income_group'))\n + scale_y_reverse()\n)\n\n\n\n\nIt has the form we want, but we need to tweak it.\n\n# Text colors\nblack1 = '#252525'\nblack2 = '#222222'\n\n# Gallery Plot\n\n(ggplot(sampled_data)\n # Slight modifications for the original lines,\n # 1. Nudge the text to either sides of the points\n # 2. Alter the color and alpha values\n + geom_text(aes(1, 'y1960_rank', label='country'), nudge_x=-0.05, ha='right', size=9, color=black1)\n + geom_text(aes(2, 'y2015_rank', label='country'), nudge_x=0.05, ha='left', size=9, color=black1)\n + geom_point(aes(1, 'y1960_rank', color='income_group'), size=2.5, alpha=.7)\n + geom_point(aes(2, 'y2015_rank', color='income_group'), size=2.5, alpha=.7)\n + geom_segment(aes(x=1, y='y1960_rank', xend=2, yend='y2015_rank', color='income_group'), alpha=.7)\n \n # Text Annotations\n #+ annotate('text', x=1, y=0, label='Rank in 1960', fontweight='bold', ha='right', size=10, color=black2)\n #+ annotate('text', x=2, y=0, label='Rank in 2015', fontweight='bold', ha='left', size=10, color=black2)\n + annotate('text', x=1.5, y=0, label='Lines show change in rank', size=9, color=black1)\n #+ annotate('label', x=1.5, y=3, label='Lower infant\\ndeath rates', size=9, color=black1,\n #           label_size=0, fontstyle='italic')\n #+ annotate('label', x=1.5, y=33, label='Higher infant\\ndeath rates', size=9, color=black1,\n #           label_size=0, fontstyle='italic')\n \n # Prevent country names from being chopped off\n + lims(x=(0.35, 2.65))\n + labs(color='Income Group')\n # Countries with lower rates on top\n + scale_y_reverse()\n # Change colors\n + scale_color_brewer(type='qual', palette=2)\n # Removes all decorations\n + theme_void()\n # Changing the figure size prevents the country names from squishing up\n + theme(figure_size=(8, 11))\n)"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_step.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_step.html",
    "title": "Step plots",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_step,\n    geom_line,\n    labs,\n    theme,\n    element_text\n)\nfrom plotnine.data import economics\n\ngeom_step() connects points using ‘steps’ instead of a line.\n\n# inspect the data\neconomics.head()\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n\n\n\n\n\n\n\nPlot a step plot using geom_plot(). Notice from the first point the line travels vertically then horizontally:\n\n(\n    ggplot(economics.iloc[:20],                 # filter for first twenty rows (dates) to make steps more visible\n           aes('date', 'unemploy')) \n    + geom_step()                               # step plot\n    + labs(x='date', y='unemployment (,000)')   # label x & y-axis\n    + theme(axis_text_x=element_text(angle=45)) # rotate x-axis text for readability\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou can see how geom_path() (shown in pink) differs from geom_line() (black):\n\n(\n    ggplot(economics.iloc[:20], \n           aes('date', 'unemploy')) \n    + geom_step(colour='#ff69b4',              # plot geom_step as the first layer - colour pink\n                alpha=0.5,                     # line transparency\n                size=2.5)                      # line thickness\n    + geom_line()                              # plot geom_line as the second layer\n    + labs(x='date', y='unemployment (,000)')\n    + theme(axis_text_x=element_text(angle=45))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nRather than a line that travels vertically then horizontally, this order can be switched by specifying direction='vh' within geom_step(). Below direction='vh' is shown in black with the default direction='hv' shown in pink:\n\n(\n    ggplot(economics.iloc[:20], \n           aes('date', 'unemploy')) \n    + geom_step(colour='#ff69b4', # plot geom_path with default direction as the first layer - colour pink\n                linetype='dashed',# line type\n                size=2,           # line thickness\n                alpha=0.5)        # line transparency        \n    + geom_step(direction='vh')   # plot geom_path with step order reversed\n    + labs(x='date', y='unemployment (,000)')\n    + theme(axis_text_x=element_text(angle=45))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/geom_violin.html",
    "href": "plotnine-examples/plotnine_examples/examples/geom_violin.html",
    "title": "Violins, Boxes, Points and Lines",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport pandas.api.types as pdtypes\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    stage,\n    geom_violin,\n    geom_point,\n    geom_line,\n    geom_boxplot,\n    scale_fill_manual,\n    theme,\n    theme_classic\n)\n\nComparing repeated measurements and their summaries\nSuppose you have two sets of related data and each point in the first set maps onto a point in the second set. e.g. they could represent a transition from one state to another for example two measurements of the height of pupils in different years.\nFor demonstration we shall generate data with a before measurement and an after measurement.\n\nnp.random.seed(123)\nn = 20\nmu = (1, 2.3)\nsigma = (1, 1.6)\n\nbefore = np.random.normal(loc=mu[0], scale=sigma[0], size=n)\nafter = np.random.normal(loc=mu[1], scale=sigma[1], size=n)\n\ndf = pd.DataFrame({\n    'value': np.hstack([before, after]),\n    'when': np.repeat(['before', 'after'], n),\n    'id': np.hstack([range(n), range(n)])\n})\n\ndf['when'] = df['when'].astype(pdtypes.CategoricalDtype(categories=['before', 'after']))\ndf.head()\n\n\n\n\n\n\n\n\nvalue\nwhen\nid\n\n\n\n\n0\n-0.085631\nbefore\n0\n\n\n1\n1.997345\nbefore\n1\n\n\n2\n1.282978\nbefore\n2\n\n\n3\n-0.506295\nbefore\n3\n\n\n4\n0.421400\nbefore\n4\n\n\n\n\n\n\n\nA basic violin plot shows distributions of the two sets of data.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd the original data in form of points.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df)\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe violins are symmetrical about the vertical axis and half a violin has the same information as the full violin. We cut (style) the violins in half and choose to alternate with the left half for the first one and the right half for the second.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df, style='left-right') # changed\n + geom_point()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nLink up the points to get a sense of how the data the moves.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(df, style='left-right') # changed\n + geom_point()\n + geom_line(aes(group='id'))          # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nMake gap between the points and the violions. i.e. shift the violins outward and the points & lines inward. We used stage mapping to get it done. For example\nx=stage('when', after_scale='x+shift*alt_sign(x)')\nsays, map the xaesthetic to the ‘when’ column/variable and after the scale computed the x locations add a shift to them. The calculated x locations of a discrete scale are consecutive numbers 1, 2, 3, ..., so we use that move objects of adjacent groups in opposite directions i.e $(-1)^1, (-1)^2, (-1)^3 … = -1, 1, -1… $\n\n# How much to shift the violin, points and lines\n# 0.1 is 10% of the allocated space for the category\nshift = 0.1\n\ndef alt_sign(x):\n    \"Alternate +1/-1 if x is even/odd\"\n    return (-1) ** x\n\nm1 = aes(x=stage('when', after_scale='x+shift*alt_sign(x)'))              # shift outward\nm2 = aes(x=stage('when', after_scale='x-shift*alt_sign(x)'), group='id')  # shift inward\n         \n(ggplot(df, aes('when', 'value'))\n + geom_violin(m1, style='left-right') # changed\n + geom_point(m2)                      # changed\n + geom_line(m2)                       # changed\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAdd a boxplot in the gap. The space between the flat edge of the violin and the center of the points is 2 * shift, so we can use the shift to control the width of the boxplot.\n\n(ggplot(df, aes('when', 'value'))\n + geom_violin(m1, style='left-right')\n + geom_point(m2)\n + geom_line(m2)\n + geom_boxplot(width=shift)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFinall, style it up.\n\n# Gallery Plot\nlsize = 0.65\nfill_alpha = 0.7\n\n(ggplot(df, aes('when', 'value', fill='when'))\n + geom_violin(m1, style='left-right', alpha=fill_alpha, size=lsize, show_legend=False)\n + geom_point(m2, color='none', alpha=fill_alpha, size=2, show_legend=False)\n + geom_line(m2, color='gray', size=lsize, alpha=0.6)\n + geom_boxplot(width=shift, alpha=fill_alpha, size=lsize, show_legend=False)\n + scale_fill_manual(values=['dodgerblue', 'darkorange'])\n + theme_classic()\n + theme(figure_size=(8, 6))\n)\n\n\n\n\n&lt;Figure Size: (800 x 600)&gt;\n\n\nCredit: This is example is motivated by the work of Jordy van Langen (@jorvlan) at https://github.com/jorvlan/open-visualizations."
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/scale_x_continuous.html",
    "href": "plotnine-examples/plotnine_examples/examples/scale_x_continuous.html",
    "title": "Guitar Neck ###",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    geom_path,\n    scale_x_continuous,\n    scale_y_continuous,\n    guides,\n    theme,\n    element_line,\n    element_rect\n)\nfrom mizani.transforms import trans\n\nUsing a transformed x-axis to visualise guitar chords\nThe x-axis is transformed to resemble the narrowing width of frets on a 25.5 inch Strat. To do that we create custom transformation.\nThe key parts of any transform object are the transform and inverse functions.\n\nclass frets_trans(trans):\n    \"\"\"\n    Frets Transformation\n    \"\"\"\n    number_of_frets = 23               # Including fret 0\n    domain = (0, number_of_frets-1)\n    \n    @staticmethod\n    def transform(x):\n        x = np.asarray(x)\n        return 25.5 - (25.5 / (2 ** (x/12)))\n    \n    @staticmethod\n    def inverse(x):\n        x = np.asarray(x)\n        return 12 * np.log2(25.5/(25.5-x))\n    \n    @classmethod\n    def breaks_(cls, limits):\n        # Fixed major breaks\n        return cls.domain\n    \n    @classmethod\n    def minor_breaks(cls, major, limits):\n        # The major breaks as passed to this method are in transformed space.\n        # The minor breaks are calculated in data space to reveal the \n        # non-linearity of the scale.\n        _major = cls.inverse(major)\n        minor = cls.transform(np.linspace(*_major, cls.number_of_frets))\n        return minor\n\nThe above transform is different from most in that, breaks and minor breaks do not change. This is common of very specialized scales. It can also be a key requirement when creating graphics for demontration purposes.\nSome chord Data\n\n# Notes: the 0 fret is an open strum, all other frets are played half-way between fret bars.\n# The strings are 1:low E, 2: A, 3: D, 4: G, 5: B, 6: E\nc_chord = pd.DataFrame({\n    'Fret':   [0, 2.5, 1.5, 0, 0.5, 0],\n    'String': [1, 2, 3, 4, 5, 6]\n})\n\n# Sequence based on the number of notes in the chord\nc_chord['Sequence'] = list(range(1, 1+len(c_chord['Fret'])))\n\n# Standard markings for a Stratocaster\nmarkings = pd.DataFrame({\n    'Fret':   [2.5, 4.5, 6.5, 8.5, 11.5, 11.5, 14.5, 16.5, 18.5, 20.5],\n    'String': [3.5, 3.5, 3.5, 3.5, 2, 5, 3.5, 3.5, 3.5, 3.5]\n})\n\nVisualizing the chord\n\n# Look and feel of the graphic\nneck_color = '#FFDDCC'\nfret_color = '#998888'\nstring_color = '#AA9944'\n\nneck_theme = theme(\n    figure_size=(10, 2),\n    panel_background=element_rect(fill=neck_color),\n    panel_grid_major_y=element_line(color=string_color, size=2.2),\n    panel_grid_major_x=element_line(color=fret_color, size=2.2),\n    panel_grid_minor_x=element_line(color=fret_color, size=1)\n)\n\n# Gallery Plot\n\n(ggplot(c_chord, aes('Fret', 'String'))\n + geom_path(aes(color='Sequence'), size=3)\n + geom_point(aes(color='Sequence'), fill='#FFFFFF', size=3)\n + geom_point(data=markings, fill='#000000', size=4)\n + scale_x_continuous(trans=frets_trans)\n + scale_y_continuous(breaks=range(0, 7), minor_breaks=[])\n + guides(color=False)\n + neck_theme\n)\n\n\n\n\n&lt;Figure Size: (1000 x 200)&gt;\n\n\nCredit: This example was motivated by Jonathan Vitale who wanted to create graphics for a guitar scale trainer."
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/examples/theme.html",
    "href": "plotnine-examples/plotnine_examples/examples/theme.html",
    "title": "Theming specific items",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    facet_grid,\n    labs,\n    guide_legend,\n    guides,\n    theme,\n    element_text,\n    element_line,\n    element_rect,\n    theme_set,\n    theme_void\n)\nfrom plotnine.data import mtcars\n\n# We use theme_void as the base theme so that the modifications\n# we make in the code are transparent in the output\ntheme_set(theme_void())\n\n\nmtcars.head()\n\n\n\n\n\n\n\n\nname\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n0\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n1\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n2\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n3\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n4\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n\n\n\n\n\nThe base plots we will use for the demonstation and some colors.\n\np1 = (ggplot(mtcars, aes('wt', 'mpg', color='factor(cyl)'))\n      + geom_point()\n      + labs(title='mpg vs wt')\n     )\n\np2 = p1 + facet_grid('gear ~ am')\n\nblack = '#222222'\ngray = '#666666'\nred = '#FF3333'\ngreen = '#66CC00'\nblue = '#3333FF'\npurple = '#9933FF'\norange = '#FF8000'\nyellow = '#FFFF33'\n\nWhat the plots look like unmodified (unthemed).\n\np1\n\n\n\n\n\np2\n\n\n\n\nThere are 3 main top level theming elements:\n\ntext - controls all the text elements in the figure.\nrect - controls all the rectangles in the figure.\nline - controls all the lines in the figure.\n\nNote that none of the themeables control/modify the plotted data. e.g You cannot use text to change the appearance of objects plotted with geom_text.\ntext\n\np1 + theme(\n    text=element_text(color=purple)\n)\n\n\n\n\nrect\n\np1 + theme(\n    rect=element_rect(color=black, size=3, fill='#EEBB0050')\n) \n\n\n\n\nline\n\np1 + theme(\n    line=element_line(color=black)\n)\n\n\n\n\n\naxis_line and axis_text\n\np1 + theme(\n    axis_line=element_line(size=2),\n    axis_line_x=element_line(color=red),\n    axis_line_y=element_line(color=blue),\n    \n    axis_text=element_text(margin={'t': 5, 'r': 5}),\n    axis_text_x=element_text(color=black),\n    axis_text_y=element_text(color=purple)\n)\n\n\n\n\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    \n    # We are focusing on the ticks, make them long\n    axis_ticks_length=20,\n    axis_ticks_length_minor=10,\n    axis_ticks_length_major=20,\n    \n    axis_ticks=element_line(size=2),\n    \n    axis_ticks_major=element_line(color=purple),\n    axis_ticks_major_x=element_line(size=4),        # override size=2\n    axis_ticks_major_y=element_line(color=yellow),  # override color=purple\n    \n    axis_ticks_minor=element_line(color=red),\n    axis_ticks_minor_x=element_line(),              # do not override anything\n    axis_ticks_minor_y=element_line(color=gray),    # override color=red\n\n)\n\n\n\n\n\n\naxis_title and axis_ticks_pad\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    axis_ticks=element_line(),\n    \n    axis_title=element_text(),\n    axis_title_x=element_text(color=blue),\n    axis_title_y=element_text(color=red),\n    \n    # The gap between the title and the ticks\n    axis_ticks_pad=20,\n    axis_ticks_pad_major=20,\n    axis_ticks_pad_minor=20\n)\n\n\n\n\n\n\naxis_ticks_direction\n\np1 + theme(\n    axis_line=element_line(size=.7, color=gray),\n    axis_ticks=element_line(),\n    \n    axis_ticks_direction='in',\n    axis_ticks_direction_x='in',\n    axis_ticks_direction_y='out'\n)\n\n\n\n\n\n\nLegend_box\nNot all themeables that affect the legend box are demonstrated\n\n(p1 + aes(fill='drat')\n + theme(\n    legend_position='left',\n    legend_direction='horizontal', # affected by the ncol=2\n    legend_title_align='center',\n    legend_box_margin=5,\n    legend_background=element_rect(color=purple, size=2, fill='white'),\n     \n    legend_box='vertical',\n     \n    legend_key=element_rect(fill=gray, alpha=.3),\n    legend_title=element_text(color=orange),\n    legend_text=element_text(weight='bold'),\n    \n    legend_key_size=30,            # overridden\n    legend_key_width=30,\n    legend_key_height=15,\n\n    legend_entry_spacing=10,      # overridden\n    legend_entry_spacing_x=15,\n    legend_entry_spacing_y=5) \n \n # so we can see legend_entry_spacing in action\n + guides(color=guide_legend(ncol=2))\n)\n\n\n\n\n\n\nplot_background, panel_background and panel_border\n\np2 + theme(\n    plot_background=element_rect(fill='gray', alpha=.3),\n    panel_background=element_rect(fill=purple, alpha=.2),\n    panel_border=element_rect(color=red, size=1),\n    panel_spacing=.25,\n    #panel_spacing_x=.05,\n    #panel_spacing_y=.25\n)\n\n\n\n\n\n\npanel_grid\n\np1 + theme(\n    panel_grid=element_line(color=purple),\n    \n    panel_grid_major=element_line(size=1.4, alpha=1),\n    panel_grid_major_x=element_line(linetype='dashed'),\n    panel_grid_major_y=element_line(linetype='dashdot'),\n    \n    panel_grid_minor=element_line(alpha=.25),\n    panel_grid_minor_x=element_line(color=red),\n    panel_grid_minor_y=element_line(color=green),\n    \n    panel_ontop=False  # puts the points behind the grid\n )\n\n\n\n\n\n\nstrip_background, strip_margin and strip_text\n\np2 + theme(\n    panel_spacing=.25,\n    \n    strip_background=element_rect(color=purple, fill=orange, size=1.4, alpha=.95),\n    strip_background_x=element_rect(x=1/6, width=2/3), # you can get really crazy\n    strip_background_y=element_rect(),\n    \n    strip_margin=0,\n    strip_margin_x=0.2,\n    strip_margin_y=0.2,\n    \n    strip_text=element_text(weight='bold'),\n    strip_text_x=element_text(color=red),\n    strip_text_y=element_text(color=blue)\n )\n\n\n\n\n\n\naspect_ratio and figure_size\nThe aspect_ratio takes precedence over the figure_size, and it modifies the height. The effective width and height are:\nwidth = figure_size[0]\nheight = figure_size[0] * aspect_ratio\n\np1 + theme(\n    panel_background=element_rect(fill=gray, alpha=.2),\n    #dpi=120,\n    figure_size=(8, 6), # inches\n    aspect_ratio=1/3    # height:width\n)"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-altering-colors.html",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-altering-colors.html",
    "title": "Using slightly altered colors to make a distinction between related data",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_col,\n    geom_path,\n    geom_point,\n    geom_col,\n    scale_color_discrete,\n    guides,\n    guide_legend\n)\n\nFirst, we make up some data. The data we create has y for actual data value and yfit for a hypothetical fitted model. It also has a category column cat.\n\nn = 10\ndf = pd.DataFrame({'x': np.arange(n),\n                   'y': np.arange(n),\n                   'yfit': np.arange(n) + np.tile([-.2, .2], n//2),\n                   'cat': ['a', 'b']*(n//2)})\n\nInitial plot\n\n(ggplot(df)\n + geom_col(aes('x', 'y', fill='cat'))\n + geom_point(aes('x', y='yfit', color='cat'))\n + geom_path(aes('x', y='yfit', color='cat'))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThere is a clash of colors between the actual data (the bars) and the fitted model (the points and lines). A simple solution is to adjust the colors of the fitted data slightly. We do that by varying the lightness of the default color scale, make them a little darker.\n\n(ggplot(df)\n + geom_col(aes('x', 'y', fill='cat'))\n + geom_point(aes('x', y='yfit', color='cat'))\n + geom_path(aes('x', y='yfit', color='cat'))\n + scale_color_discrete(l=.4)                                     # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThere are two main pieces of information in the plot, but we a single combined legend. Since we use separate aesthetics for the actual data and fitted model, we can have distinct legends for both.\nWe manually define the legend for the fill and color aesthetics, this overrides the automatic legend creation.\n\n(ggplot(df)\n + geom_col(aes('x', 'y', fill='cat'))\n + geom_point(aes('x', y='yfit', color='cat'))\n + geom_path(aes('x', y='yfit', color='cat'))\n + scale_color_discrete(l=.4)\n + guides(                                                        # new\n     fill=guide_legend(title='Data'),\n     color=guide_legend(title='Model'))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-manipulating-date-breaks-and-date-labels.html",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-manipulating-date-breaks-and-date-labels.html",
    "title": "Manipulating date breaks and date labels",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    scale_x_datetime,\n    labs,\n    theme_set,\n    theme_linedraw\n)\nfrom plotnine.data import economics\n\nfrom mizani.breaks import date_breaks\nfrom mizani.formatters import date_format\n\ntheme_set(theme_linedraw()) # default theme\n\nUsing the economics dataset\n\neconomics.head()\n\n\n\n\n\n\n\n\ndate\npce\npop\npsavert\nuempmed\nunemploy\n\n\n\n\n0\n1967-07-01\n507.4\n198712\n12.5\n4.5\n2944\n\n\n1\n1967-08-01\n510.5\n198911\n12.5\n4.7\n2945\n\n\n2\n1967-09-01\n516.3\n199113\n11.7\n4.6\n2958\n\n\n3\n1967-10-01\n512.9\n199311\n12.5\n4.9\n3143\n\n\n4\n1967-11-01\n518.1\n199498\n12.5\n4.7\n3066\n\n\n\n\n\n\n\nHow does the saving rate vary with time?\n\n(ggplot(economics)\n + geom_point(aes('date', 'psavert'))\n + labs(y='personal saving rate')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYikes! the calculated breaks are awful, we need to intervene. We do so using the date_breaks and date_format functions from mizani.\nSet breaks every 10 years\n\n(ggplot(economics)\n + geom_point(aes('date', 'psavert'))\n + scale_x_datetime(breaks=date_breaks('10 years'))        # new\n + labs(y='personal saving rate')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat is better. Since all the breaks are at the beginning of the year, we can omit the month and day. Using date_format we override the format string. For more on the options for the format string see the strftime behavior.\n\n\n(ggplot(economics)\n + geom_point(aes('date', 'psavert'))\n + scale_x_datetime(breaks=date_breaks('10 years'), labels=date_format('%Y'))     # modified\n + labs(y='personal saving rate')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can achieve the same result with a custom formating function.\n\ndef custom_date_format1(breaks):\n    \"\"\"\n    Function to format the date\n    \"\"\"\n    return [x.year if x.month==1 and x.day==1 else \"\" for x in breaks]\n\n(ggplot(economics)\n + geom_point(aes('date', 'psavert'))\n + scale_x_datetime(                                # modified\n     breaks=date_breaks('10 years'),\n     labels=custom_date_format1)\n + labs(y='personal saving rate')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe can use a custom formatting function to get results that are not obtainable with the date_format function. For example if we have monthly breaks over a handful of years we can mix date formats as follows; specify beginning of the year and every other month. Such tricks can be used reduce overcrowding.\n\nfrom datetime import date\n\ndef custom_date_format2(breaks):\n    \"\"\"\n    Function to format the date\n    \"\"\"\n    res = []\n    for x in breaks:\n        # First day of the year\n        if x.month == 1 and x.day == 1:\n            fmt = '%Y'\n        # Every other month\n        elif x.month % 2 != 0:\n            fmt = '%b'\n        else:\n            fmt = ''\n            \n        res.append(date.strftime(x, fmt))\n            \n    return res\n\n(ggplot(economics.loc[40:60, :])                            # modified\n + geom_point(aes('date', 'psavert'))\n + scale_x_datetime(\n     breaks=date_breaks('1 months'),\n     labels=custom_date_format2,\n     minor_breaks=[])\n + labs(y='personal saving rate')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWe removed the labels but not the breaks, leaving behind dangling ticks for the skipped months. We can fix that by wrapping date_breaks around a filtering function.\n\ndef custom_date_format3(breaks):\n    \"\"\"\n    Function to format the date\n    \"\"\"\n    res = []\n    for x in breaks:\n        # First day of the year\n        if x.month == 1:\n            fmt = '%Y'\n        else:\n            fmt = '%b'\n            \n        res.append(date.strftime(x, fmt))\n            \n    return res\n\n\ndef custom_date_breaks(width=None):\n    \"\"\"\n    Create a function that calculates date breaks\n    \n    It delegates the work to `date_breaks`\n    \"\"\"\n    def filter_func(limits):\n        breaks = date_breaks(width)(limits)\n        # filter\n        return [x for x in breaks if x.month % 2]\n    \n    return filter_func\n\n\n(ggplot(economics.loc[40:60, :])\n + geom_point(aes('date', 'psavert'))\n + scale_x_datetime(                                        # modified\n     breaks=custom_date_breaks('1 months'),\n     labels=custom_date_format3)\n + labs(y='personal saving rate')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe breaks and labels functions are tightly coupled to give us exactly what we want.\nCredit: This example was motivated by the github user lorin (Lorin Hochstein) and his endeavor to control date breaks and date labels."
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-show-counts-and-percentages-for-bar-plots.html",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-show-counts-and-percentages-for-bar-plots.html",
    "title": "Show counts and percentages for bar plots",
    "section": "",
    "text": "import pandas as pd\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    stage,\n    geom_bar,\n    geom_text,\n    geom_label,\n    position_dodge2,\n    facet_wrap\n)\nfrom plotnine.data import mtcars\n\nWe can plot a bar graph and easily show the counts for each bar\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(cyl)'))\n + geom_bar()\n + geom_text(\n     aes(label=after_stat('count')),\n     stat='count',\n     nudge_y=0.125,\n     va='bottom'\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nstat_count also calculates proportions (as prop) and a proportion can be converted to a percentage.\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(cyl)'))\n + geom_bar()\n + geom_text(\n     aes(label=after_stat('prop*100')),\n     stat='count',\n     nudge_y=0.125,\n     va='bottom',\n     format_string='{:.1f}% '\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThese are clearly wrong percentages. The system puts each bar in a separate group. We need to tell it to put all bars in the panel in single group, so that the percentage are what we expect.\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(cyl)'))\n + geom_bar()\n + geom_text(\n     aes(label=after_stat('prop*100'), group=1),\n     stat='count',\n     nudge_y=0.125,\n     va='bottom',\n     format_string='{:.1f}%'\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWithout group=1, you can calculate the proportion / percentage after statistics have been calculated. This works because mapping expressions are evaluated across the whole panel. It can work when you have more than 1 categorical.\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(cyl)'))\n + geom_bar()\n + geom_text(\n     aes(label=after_stat('count / sum(count) * 100')),\n     stat='count',\n     nudge_y=0.125,\n     va='bottom',\n     format_string='{:.1f}%'\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFor more on why automatic grouping may work the way you want, see this tutorial.\nWe can get the counts and we can get the percentages we need to print both. We can do that in two ways,\n\nUsing two geom_text layers.\n\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(cyl)'))\n + geom_bar()\n + geom_text(\n     aes(label=after_stat('count')),\n     stat='count',\n     nudge_x=-0.14,\n     nudge_y=0.125,\n     va='bottom'\n )\n + geom_text(\n     aes(label=after_stat('prop*100'), group=1),\n     stat='count',\n     nudge_x=0.14,\n     nudge_y=0.125,\n     va='bottom',\n     format_string='({:.1f}%)'\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nUsing a function to combine the counts and percentages\n\n\ndef combine(counts, percentages):\n    fmt = '{} ({:.1f}%)'.format\n    return [fmt(c, p) for c, p in zip(counts, percentages)]\n\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(cyl)'))\n + geom_bar()\n + geom_text(\n     aes(label=after_stat('combine(count, prop*100)'), group=1),\n     stat='count',\n     nudge_y=0.125,\n     va='bottom'\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nIt works with facetting.\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(cyl)'))\n + geom_bar()\n + geom_text(\n     aes(label=after_stat('combine(count, prop*100)'), group=1),\n     stat='count',\n     nudge_y=0.125,\n     va='bottom',\n     size=9\n )\n + facet_wrap('am')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nCredit: This example was motivated by the github user Fandekasp (Adrien Lemaire) and difficulty he faced in displaying percentages of bar plots.\n\nPercentages when you have more than one categorical.\ngroup = 1 does not work when you have more than one categories per x location.\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(am)'))\n + geom_bar(position='dodge2')\n + geom_text(\n     aes(\n         label=after_stat('prop * 100'),\n         group=1\n     ),\n     stat='count',\n     position=position_dodge2(width=0.9),\n     format_string='{:.1f}%',\n     size=9,\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nYou have to calculate the percentages after statistics for the panel have been calculated.\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(am)'))\n + geom_bar(position='dodge2')\n + geom_text(\n     aes(\n         label=after_stat('count / sum(count) * 100'),\n         y=stage(after_stat='count', after_scale='y + 0.25'),\n     ),\n     stat='count',\n     position=position_dodge2(width=0.9),\n     format_string='{:.1f}%',\n     size=9,\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nFor percentages per bar at each x location, you have to group the counts per location can compute the proportions.\n\ndef prop_per_x(x, count):\n    \"\"\"\n    Compute the proportion of the counts for each value of x\n    \"\"\"\n    df = pd.DataFrame({\n        'x': x,\n        'count': count\n    })\n    prop = df['count']/df.groupby('x')['count'].transform('sum')\n    return prop\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(am)'))\n + geom_bar(position='dodge2')\n + geom_text(\n     aes(\n         label=after_stat('prop_per_x(x, count) * 100'),\n         y=stage(after_stat='count', after_scale='y+.25')\n     ),\n     stat='count',\n     position=position_dodge2(width=0.9),\n     format_string='{:.1f}%',\n     size=9,\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n(ggplot(mtcars, aes('factor(cyl)', fill='factor(am)'))\n + geom_bar(position='fill')\n + geom_label(\n     aes(label=after_stat('prop_per_x(x, count) * 100')),\n     stat='count',\n     position='fill',\n     format_string='{:.1f}%',\n     size=9,\n )\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nNOTE\nWith more categories, if it becomes harder get the right groupings withing plotnine, the solution is to do all (or most) the data manipulation in pandas then plot using geom_col + geom_text."
  },
  {
    "objectID": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-using-letter-as-shapes.html",
    "href": "plotnine-examples/plotnine_examples/tutorials/miscellaneous-using-letter-as-shapes.html",
    "title": "Using letters as shapes",
    "section": "",
    "text": "import pandas as pd\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_point,\n    scale_shape_manual,\n)\nfrom plotnine.data import mtcars\n\nYou can create shape symbols using \\(\\TeX\\). For example\n\nmixed_shapes = (\n    r'$\\mathrm{A}$', \n    r'$\\mathrm{B}$',  \n    r'$\\mathrm{C}$',  \n    r'$\\mathrm{D}$',\n)\n\n\n(ggplot(mtcars, aes('wt', 'mpg', shape='factor(gear)', colour='factor(gear)'))\n + geom_point(size=6)\n + scale_shape_manual(values=mixed_shapes)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nSee matplotlib documentation for more."
  }
]